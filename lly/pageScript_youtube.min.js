/*! jQuery v3.2.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function(a,b){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){"use strict";var c=[],d=a.document,e=Object.getPrototypeOf,f=c.slice,g=c.concat,h=c.push,i=c.indexOf,j={},k=j.toString,l=j.hasOwnProperty,m=l.toString,n=m.call(Object),o={};function p(a,b){b=b||d;var c=b.createElement("script");c.text=a,b.head.appendChild(c).parentNode.removeChild(c)}var q="3.2.1",r=function(a,b){return new r.fn.init(a,b)},s=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,t=/^-ms-/,u=/-([a-z])/g,v=function(a,b){return b.toUpperCase()};r.fn=r.prototype={jquery:q,constructor:r,length:0,toArray:function(){return f.call(this)},get:function(a){return null==a?f.call(this):a<0?this[a+this.length]:this[a]},pushStack:function(a){var b=r.merge(this.constructor(),a);return b.prevObject=this,b},each:function(a){return r.each(this,a)},map:function(a){return this.pushStack(r.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(f.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(a<0?b:0);return this.pushStack(c>=0&&c<b?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:c.sort,splice:c.splice},r.extend=r.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||r.isFunction(g)||(g={}),h===i&&(g=this,h--);h<i;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(r.isPlainObject(d)||(e=Array.isArray(d)))?(e?(e=!1,f=c&&Array.isArray(c)?c:[]):f=c&&r.isPlainObject(c)?c:{},g[b]=r.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},r.extend({expando:"jQuery"+(q+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===r.type(a)},isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=r.type(a);return("number"===b||"string"===b)&&!isNaN(a-parseFloat(a))},isPlainObject:function(a){var b,c;return!(!a||"[object Object]"!==k.call(a))&&(!(b=e(a))||(c=l.call(b,"constructor")&&b.constructor,"function"==typeof c&&m.call(c)===n))},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?j[k.call(a)]||"object":typeof a},globalEval:function(a){p(a)},camelCase:function(a){return a.replace(t,"ms-").replace(u,v)},each:function(a,b){var c,d=0;if(w(a)){for(c=a.length;d<c;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(s,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(w(Object(a))?r.merge(c,"string"==typeof a?[a]:a):h.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:i.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;d<c;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;f<g;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,f=0,h=[];if(w(a))for(d=a.length;f<d;f++)e=b(a[f],f,c),null!=e&&h.push(e);else for(f in a)e=b(a[f],f,c),null!=e&&h.push(e);return g.apply([],h)},guid:1,proxy:function(a,b){var c,d,e;if("string"==typeof b&&(c=a[b],b=a,a=c),r.isFunction(a))return d=f.call(arguments,2),e=function(){return a.apply(b||this,d.concat(f.call(arguments)))},e.guid=a.guid=a.guid||r.guid++,e},now:Date.now,support:o}),"function"==typeof Symbol&&(r.fn[Symbol.iterator]=c[Symbol.iterator]),r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){j["[object "+b+"]"]=b.toLowerCase()});function w(a){var b=!!a&&"length"in a&&a.length,c=r.type(a);return"function"!==c&&!r.isWindow(a)&&("array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a)}var x=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=function(a,b){for(var c=0,d=a.length;c<d;c++)if(a[c]===b)return c;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+K+"*("+L+")(?:"+K+"*([*^$|!~]?=)"+K+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+L+"))|)"+K+"*\\]",N=":("+L+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",O=new RegExp(K+"+","g"),P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(N),U=new RegExp("^"+L+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),aa=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:d<0?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ba=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ca=function(a,b){return b?"\0"===a?"\ufffd":a.slice(0,-1)+"\\"+a.charCodeAt(a.length-1).toString(16)+" ":"\\"+a},da=function(){m()},ea=ta(function(a){return a.disabled===!0&&("form"in a||"label"in a)},{dir:"parentNode",next:"legend"});try{G.apply(D=H.call(v.childNodes),v.childNodes),D[v.childNodes.length].nodeType}catch(fa){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s=b&&b.ownerDocument,w=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==w&&9!==w&&11!==w)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==w&&(l=Z.exec(a)))if(f=l[1]){if(9===w){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(s&&(j=s.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(l[2])return G.apply(d,b.getElementsByTagName(a)),d;if((f=l[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==w)s=b,r=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(ba,ca):b.setAttribute("id",k=u),o=g(a),h=o.length;while(h--)o[h]="#"+k+" "+sa(o[h]);r=o.join(","),s=$.test(a)&&qa(b.parentNode)||b}if(r)try{return G.apply(d,s.querySelectorAll(r)),d}catch(x){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(P,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("fieldset");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&a.sourceIndex-b.sourceIndex;if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return function(b){return"form"in b?b.parentNode&&b.disabled===!1?"label"in b?"label"in b.parentNode?b.parentNode.disabled===a:b.disabled===a:b.isDisabled===a||b.isDisabled!==!a&&ea(b)===a:b.disabled===a:"label"in b&&b.disabled===a}}function pa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function qa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return!!b&&"HTML"!==b.nodeName},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),v!==n&&(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(n.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){return a.getAttribute("id")===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}}):(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c,d,e,f=b.getElementById(a);if(f){if(c=f.getAttributeNode("id"),c&&c.value===a)return[f];e=b.getElementsByName(a),d=0;while(f=e[d++])if(c=f.getAttributeNode("id"),c&&c.value===a)return[f]}return[]}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){if("undefined"!=typeof b.getElementsByClassName&&p)return b.getElementsByClassName(a)},r=[],q=[],(c.qsa=Y.test(n.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){a.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+K+"*[*^$|!~]?="),2!==a.querySelectorAll(":enabled").length&&q.push(":enabled",":disabled"),o.appendChild(a).disabled=!0,2!==a.querySelectorAll(":disabled").length&&q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Y.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"*"),s.call(a,"[s!='']:x"),r.push("!=",N)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Y.test(o.compareDocumentPosition),t=b||Y.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?I(k,a)-I(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?I(k,a)-I(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?la(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(S,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.escape=function(a){return(a+"").replace(ba,ca)},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(_,aa),a[3]=(a[3]||a[4]||a[5]||"").replace(_,aa),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return V.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&T.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(_,aa).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:!b||(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(O," ")+" ").indexOf(c)>-1:"|="===b&&(e===c||e.slice(0,c.length+1)===c+"-"))}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(P,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(_,aa),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return U.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(_,aa).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:oa(!1),disabled:oa(!0),checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:pa(function(){return[0]}),last:pa(function(a,b){return[b-1]}),eq:pa(function(a,b,c){return[c<0?c+b:c]}),even:pa(function(a,b){for(var c=0;c<b;c+=2)a.push(c);return a}),odd:pa(function(a,b){for(var c=1;c<b;c+=2)a.push(c);return a}),lt:pa(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:pa(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function ra(){}ra.prototype=d.filters=d.pseudos,d.setFilters=new ra,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=Q.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function sa(a){for(var b=0,c=a.length,d="";b<c;b++)d+=a[b].value;return d}function ta(a,b,c){var d=b.dir,e=b.next,f=e||d,g=c&&"parentNode"===f,h=x++;return b.first?function(b,c,e){while(b=b[d])if(1===b.nodeType||g)return a(b,c,e);return!1}:function(b,c,i){var j,k,l,m=[w,h];if(i){while(b=b[d])if((1===b.nodeType||g)&&a(b,c,i))return!0}else while(b=b[d])if(1===b.nodeType||g)if(l=b[u]||(b[u]={}),k=l[b.uniqueID]||(l[b.uniqueID]={}),e&&e===b.nodeName.toLowerCase())b=b[d]||b;else{if((j=k[f])&&j[0]===w&&j[1]===h)return m[2]=j[2];if(k[f]=m,m[2]=a(b,c,i))return!0}return!1}}function ua(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function va(a,b,c){for(var d=0,e=b.length;d<e;d++)ga(a,b[d],c);return c}function wa(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;h<i;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function xa(a,b,c,d,e,f){return d&&!d[u]&&(d=xa(d)),e&&!e[u]&&(e=xa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||va(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:wa(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=wa(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=wa(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ya(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ta(function(a){return a===b},h,!0),l=ta(function(a){return I(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];i<f;i++)if(c=d.relative[a[i].type])m=[ta(ua(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;e<f;e++)if(d.relative[a[e].type])break;return xa(i>1&&ua(m),i>1&&sa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(P,"$1"),c,i<e&&ya(a.slice(i,e)),e<f&&ya(a=a.slice(e)),e<f&&sa(a))}m.push(c)}return ua(m)}function za(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=E.call(i));u=wa(u)}G.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&ga.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=ya(b[c]),f[u]?d.push(f):e.push(f);f=A(a,za(e,d)),f.selector=a}return f},i=ga.select=function(a,b,c,e){var f,i,j,k,l,m="function"==typeof a&&a,n=!e&&g(a=m.selector||a);if(c=c||[],1===n.length){if(i=n[0]=n[0].slice(0),i.length>2&&"ID"===(j=i[0]).type&&9===b.nodeType&&p&&d.relative[i[1].type]){if(b=(d.find.ID(j.matches[0].replace(_,aa),b)||[])[0],!b)return c;m&&(b=b.parentNode),a=a.slice(i.shift().value.length)}f=V.needsContext.test(a)?0:i.length;while(f--){if(j=i[f],d.relative[k=j.type])break;if((l=d.find[k])&&(e=l(j.matches[0].replace(_,aa),$.test(i[0].type)&&qa(b.parentNode)||b))){if(i.splice(f,1),a=e.length&&sa(i),!a)return G.apply(c,e),c;break}}}return(m||h(a,n))(e,b,!p,c,!b||$.test(a)&&qa(b.parentNode)||b),c},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("fieldset"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){if(!c)return a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){if(!c&&"input"===a.nodeName.toLowerCase())return a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(J,function(a,b,c){var d;if(!c)return a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);r.find=x,r.expr=x.selectors,r.expr[":"]=r.expr.pseudos,r.uniqueSort=r.unique=x.uniqueSort,r.text=x.getText,r.isXMLDoc=x.isXML,r.contains=x.contains,r.escapeSelector=x.escape;var y=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&r(a).is(c))break;d.push(a)}return d},z=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},A=r.expr.match.needsContext;function B(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()}var C=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,D=/^.[^:#\[\.,]*$/;function E(a,b,c){return r.isFunction(b)?r.grep(a,function(a,d){return!!b.call(a,d,a)!==c}):b.nodeType?r.grep(a,function(a){return a===b!==c}):"string"!=typeof b?r.grep(a,function(a){return i.call(b,a)>-1!==c}):D.test(b)?r.filter(b,a,c):(b=r.filter(b,a),r.grep(a,function(a){return i.call(b,a)>-1!==c&&1===a.nodeType}))}r.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?r.find.matchesSelector(d,a)?[d]:[]:r.find.matches(a,r.grep(b,function(a){return 1===a.nodeType}))},r.fn.extend({find:function(a){var b,c,d=this.length,e=this;if("string"!=typeof a)return this.pushStack(r(a).filter(function(){for(b=0;b<d;b++)if(r.contains(e[b],this))return!0}));for(c=this.pushStack([]),b=0;b<d;b++)r.find(a,e[b],c);return d>1?r.uniqueSort(c):c},filter:function(a){return this.pushStack(E(this,a||[],!1))},not:function(a){return this.pushStack(E(this,a||[],!0))},is:function(a){return!!E(this,"string"==typeof a&&A.test(a)?r(a):a||[],!1).length}});var F,G=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,H=r.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||F,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:G.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof r?b[0]:b,r.merge(this,r.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),C.test(e[1])&&r.isPlainObject(b))for(e in b)r.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&(this[0]=f,this.length=1),this}return a.nodeType?(this[0]=a,this.length=1,this):r.isFunction(a)?void 0!==c.ready?c.ready(a):a(r):r.makeArray(a,this)};H.prototype=r.fn,F=r(d);var I=/^(?:parents|prev(?:Until|All))/,J={children:!0,contents:!0,next:!0,prev:!0};r.fn.extend({has:function(a){var b=r(a,this),c=b.length;return this.filter(function(){for(var a=0;a<c;a++)if(r.contains(this,b[a]))return!0})},closest:function(a,b){var c,d=0,e=this.length,f=[],g="string"!=typeof a&&r(a);if(!A.test(a))for(;d<e;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&r.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?r.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?i.call(r(a),this[0]):i.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(r.uniqueSort(r.merge(this.get(),r(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function K(a,b){while((a=a[b])&&1!==a.nodeType);return a}r.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return y(a,"parentNode")},parentsUntil:function(a,b,c){return y(a,"parentNode",c)},next:function(a){return K(a,"nextSibling")},prev:function(a){return K(a,"previousSibling")},nextAll:function(a){return y(a,"nextSibling")},prevAll:function(a){return y(a,"previousSibling")},nextUntil:function(a,b,c){return y(a,"nextSibling",c)},prevUntil:function(a,b,c){return y(a,"previousSibling",c)},siblings:function(a){return z((a.parentNode||{}).firstChild,a)},children:function(a){return z(a.firstChild)},contents:function(a){return B(a,"iframe")?a.contentDocument:(B(a,"template")&&(a=a.content||a),r.merge([],a.childNodes))}},function(a,b){r.fn[a]=function(c,d){var e=r.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=r.filter(d,e)),this.length>1&&(J[a]||r.uniqueSort(e),I.test(a)&&e.reverse()),this.pushStack(e)}});var L=/[^\x20\t\r\n\f]+/g;function M(a){var b={};return r.each(a.match(L)||[],function(a,c){b[c]=!0}),b}r.Callbacks=function(a){a="string"==typeof a?M(a):r.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=e||a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){r.each(b,function(b,c){r.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==r.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return r.each(arguments,function(a,b){var c;while((c=r.inArray(b,f,c))>-1)f.splice(c,1),c<=h&&h--}),this},has:function(a){return a?r.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||b||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j};function N(a){return a}function O(a){throw a}function P(a,b,c,d){var e;try{a&&r.isFunction(e=a.promise)?e.call(a).done(b).fail(c):a&&r.isFunction(e=a.then)?e.call(a,b,c):b.apply(void 0,[a].slice(d))}catch(a){c.apply(void 0,[a])}}r.extend({Deferred:function(b){var c=[["notify","progress",r.Callbacks("memory"),r.Callbacks("memory"),2],["resolve","done",r.Callbacks("once memory"),r.Callbacks("once memory"),0,"resolved"],["reject","fail",r.Callbacks("once memory"),r.Callbacks("once memory"),1,"rejected"]],d="pending",e={state:function(){return d},always:function(){return f.done(arguments).fail(arguments),this},"catch":function(a){return e.then(null,a)},pipe:function(){var a=arguments;return r.Deferred(function(b){r.each(c,function(c,d){var e=r.isFunction(a[d[4]])&&a[d[4]];f[d[1]](function(){var a=e&&e.apply(this,arguments);a&&r.isFunction(a.promise)?a.promise().progress(b.notify).done(b.resolve).fail(b.reject):b[d[0]+"With"](this,e?[a]:arguments)})}),a=null}).promise()},then:function(b,d,e){var f=0;function g(b,c,d,e){return function(){var h=this,i=arguments,j=function(){var a,j;if(!(b<f)){if(a=d.apply(h,i),a===c.promise())throw new TypeError("Thenable self-resolution");j=a&&("object"==typeof a||"function"==typeof a)&&a.then,r.isFunction(j)?e?j.call(a,g(f,c,N,e),g(f,c,O,e)):(f++,j.call(a,g(f,c,N,e),g(f,c,O,e),g(f,c,N,c.notifyWith))):(d!==N&&(h=void 0,i=[a]),(e||c.resolveWith)(h,i))}},k=e?j:function(){try{j()}catch(a){r.Deferred.exceptionHook&&r.Deferred.exceptionHook(a,k.stackTrace),b+1>=f&&(d!==O&&(h=void 0,i=[a]),c.rejectWith(h,i))}};b?k():(r.Deferred.getStackHook&&(k.stackTrace=r.Deferred.getStackHook()),a.setTimeout(k))}}return r.Deferred(function(a){c[0][3].add(g(0,a,r.isFunction(e)?e:N,a.notifyWith)),c[1][3].add(g(0,a,r.isFunction(b)?b:N)),c[2][3].add(g(0,a,r.isFunction(d)?d:O))}).promise()},promise:function(a){return null!=a?r.extend(a,e):e}},f={};return r.each(c,function(a,b){var g=b[2],h=b[5];e[b[1]]=g.add,h&&g.add(function(){d=h},c[3-a][2].disable,c[0][2].lock),g.add(b[3].fire),f[b[0]]=function(){return f[b[0]+"With"](this===f?void 0:this,arguments),this},f[b[0]+"With"]=g.fireWith}),e.promise(f),b&&b.call(f,f),f},when:function(a){var b=arguments.length,c=b,d=Array(c),e=f.call(arguments),g=r.Deferred(),h=function(a){return function(c){d[a]=this,e[a]=arguments.length>1?f.call(arguments):c,--b||g.resolveWith(d,e)}};if(b<=1&&(P(a,g.done(h(c)).resolve,g.reject,!b),"pending"===g.state()||r.isFunction(e[c]&&e[c].then)))return g.then();while(c--)P(e[c],h(c),g.reject);return g.promise()}});var Q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook=function(b,c){a.console&&a.console.warn&&b&&Q.test(b.name)&&a.console.warn("jQuery.Deferred exception: "+b.message,b.stack,c)},r.readyException=function(b){a.setTimeout(function(){throw b})};var R=r.Deferred();r.fn.ready=function(a){return R.then(a)["catch"](function(a){r.readyException(a)}),this},r.extend({isReady:!1,readyWait:1,ready:function(a){(a===!0?--r.readyWait:r.isReady)||(r.isReady=!0,a!==!0&&--r.readyWait>0||R.resolveWith(d,[r]))}}),r.ready.then=R.then;function S(){d.removeEventListener("DOMContentLoaded",S),
a.removeEventListener("load",S),r.ready()}"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(r.ready):(d.addEventListener("DOMContentLoaded",S),a.addEventListener("load",S));var T=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===r.type(c)){e=!0;for(h in c)T(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,r.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(r(a),c)})),b))for(;h<i;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},U=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function V(){this.expando=r.expando+V.uid++}V.uid=1,V.prototype={cache:function(a){var b=a[this.expando];return b||(b={},U(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[r.camelCase(b)]=c;else for(d in b)e[r.camelCase(d)]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][r.camelCase(b)]},access:function(a,b,c){return void 0===b||b&&"string"==typeof b&&void 0===c?this.get(a,b):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d=a[this.expando];if(void 0!==d){if(void 0!==b){Array.isArray(b)?b=b.map(r.camelCase):(b=r.camelCase(b),b=b in d?[b]:b.match(L)||[]),c=b.length;while(c--)delete d[b[c]]}(void 0===b||r.isEmptyObject(d))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!r.isEmptyObject(b)}};var W=new V,X=new V,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function $(a){return"true"===a||"false"!==a&&("null"===a?null:a===+a+""?+a:Y.test(a)?JSON.parse(a):a)}function _(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Z,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c=$(c)}catch(e){}X.set(a,b,c)}else c=void 0;return c}r.extend({hasData:function(a){return X.hasData(a)||W.hasData(a)},data:function(a,b,c){return X.access(a,b,c)},removeData:function(a,b){X.remove(a,b)},_data:function(a,b,c){return W.access(a,b,c)},_removeData:function(a,b){W.remove(a,b)}}),r.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=X.get(f),1===f.nodeType&&!W.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=r.camelCase(d.slice(5)),_(f,d,e[d])));W.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){X.set(this,a)}):T(this,function(b){var c;if(f&&void 0===b){if(c=X.get(f,a),void 0!==c)return c;if(c=_(f,a),void 0!==c)return c}else this.each(function(){X.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){X.remove(this,a)})}}),r.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=W.get(a,b),c&&(!d||Array.isArray(c)?d=W.access(a,b,r.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=r.queue(a,b),d=c.length,e=c.shift(),f=r._queueHooks(a,b),g=function(){r.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return W.get(a,c)||W.access(a,c,{empty:r.Callbacks("once memory").add(function(){W.remove(a,[b+"queue",c])})})}}),r.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?r.queue(this[0],a):void 0===b?this:this.each(function(){var c=r.queue(this,a,b);r._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&r.dequeue(this,a)})},dequeue:function(a){return this.each(function(){r.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=r.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=W.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var aa=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ba=new RegExp("^(?:([+-])=|)("+aa+")([a-z%]*)$","i"),ca=["Top","Right","Bottom","Left"],da=function(a,b){return a=b||a,"none"===a.style.display||""===a.style.display&&r.contains(a.ownerDocument,a)&&"none"===r.css(a,"display")},ea=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};function fa(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return r.css(a,b,"")},i=h(),j=c&&c[3]||(r.cssNumber[b]?"":"px"),k=(r.cssNumber[b]||"px"!==j&&+i)&&ba.exec(r.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,r.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var ga={};function ha(a){var b,c=a.ownerDocument,d=a.nodeName,e=ga[d];return e?e:(b=c.body.appendChild(c.createElement(d)),e=r.css(b,"display"),b.parentNode.removeChild(b),"none"===e&&(e="block"),ga[d]=e,e)}function ia(a,b){for(var c,d,e=[],f=0,g=a.length;f<g;f++)d=a[f],d.style&&(c=d.style.display,b?("none"===c&&(e[f]=W.get(d,"display")||null,e[f]||(d.style.display="")),""===d.style.display&&da(d)&&(e[f]=ha(d))):"none"!==c&&(e[f]="none",W.set(d,"display",c)));for(f=0;f<g;f++)null!=e[f]&&(a[f].style.display=e[f]);return a}r.fn.extend({show:function(){return ia(this,!0)},hide:function(){return ia(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){da(this)?r(this).show():r(this).hide()})}});var ja=/^(?:checkbox|radio)$/i,ka=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,la=/^$|\/(?:java|ecma)script/i,ma={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ma.optgroup=ma.option,ma.tbody=ma.tfoot=ma.colgroup=ma.caption=ma.thead,ma.th=ma.td;function na(a,b){var c;return c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[],void 0===b||b&&B(a,b)?r.merge([a],c):c}function oa(a,b){for(var c=0,d=a.length;c<d;c++)W.set(a[c],"globalEval",!b||W.get(b[c],"globalEval"))}var pa=/<|&#?\w+;/;function qa(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],n=0,o=a.length;n<o;n++)if(f=a[n],f||0===f)if("object"===r.type(f))r.merge(m,f.nodeType?[f]:f);else if(pa.test(f)){g=g||l.appendChild(b.createElement("div")),h=(ka.exec(f)||["",""])[1].toLowerCase(),i=ma[h]||ma._default,g.innerHTML=i[1]+r.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;r.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",n=0;while(f=m[n++])if(d&&r.inArray(f,d)>-1)e&&e.push(f);else if(j=r.contains(f.ownerDocument,f),g=na(l.appendChild(f),"script"),j&&oa(g),c){k=0;while(f=g[k++])la.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),o.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",o.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var ra=d.documentElement,sa=/^key/,ta=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ua=/^([^.]*)(?:\.(.+)|)/;function va(){return!0}function wa(){return!1}function xa(){try{return d.activeElement}catch(a){}}function ya(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ya(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=wa;else if(!e)return a;return 1===f&&(g=e,e=function(a){return r().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=r.guid++)),a.each(function(){r.event.add(this,b,e,d,c)})}r.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=W.get(a);if(q){c.handler&&(f=c,c=f.handler,e=f.selector),e&&r.find.matchesSelector(ra,e),c.guid||(c.guid=r.guid++),(i=q.events)||(i=q.events={}),(g=q.handle)||(g=q.handle=function(b){return"undefined"!=typeof r&&r.event.triggered!==b.type?r.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(L)||[""],j=b.length;while(j--)h=ua.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n&&(l=r.event.special[n]||{},n=(e?l.delegateType:l.bindType)||n,l=r.event.special[n]||{},k=r.extend({type:n,origType:p,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&r.expr.match.needsContext.test(e),namespace:o.join(".")},f),(m=i[n])||(m=i[n]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,o,g)!==!1||a.addEventListener&&a.addEventListener(n,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),r.event.global[n]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=W.hasData(a)&&W.get(a);if(q&&(i=q.events)){b=(b||"").match(L)||[""],j=b.length;while(j--)if(h=ua.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n){l=r.event.special[n]||{},n=(d?l.delegateType:l.bindType)||n,m=i[n]||[],h=h[2]&&new RegExp("(^|\\.)"+o.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&p!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,o,q.handle)!==!1||r.removeEvent(a,n,q.handle),delete i[n])}else for(n in i)r.event.remove(a,n+b[j],c,d,!0);r.isEmptyObject(i)&&W.remove(a,"handle events")}},dispatch:function(a){var b=r.event.fix(a),c,d,e,f,g,h,i=new Array(arguments.length),j=(W.get(this,"events")||{})[b.type]||[],k=r.event.special[b.type]||{};for(i[0]=b,c=1;c<arguments.length;c++)i[c]=arguments[c];if(b.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,b)!==!1){h=r.event.handlers.call(this,b,j),c=0;while((f=h[c++])&&!b.isPropagationStopped()){b.currentTarget=f.elem,d=0;while((g=f.handlers[d++])&&!b.isImmediatePropagationStopped())b.rnamespace&&!b.rnamespace.test(g.namespace)||(b.handleObj=g,b.data=g.data,e=((r.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(b.result=e)===!1&&(b.preventDefault(),b.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,b),b.result}},handlers:function(a,b){var c,d,e,f,g,h=[],i=b.delegateCount,j=a.target;if(i&&j.nodeType&&!("click"===a.type&&a.button>=1))for(;j!==this;j=j.parentNode||this)if(1===j.nodeType&&("click"!==a.type||j.disabled!==!0)){for(f=[],g={},c=0;c<i;c++)d=b[c],e=d.selector+" ",void 0===g[e]&&(g[e]=d.needsContext?r(e,this).index(j)>-1:r.find(e,this,null,[j]).length),g[e]&&f.push(d);f.length&&h.push({elem:j,handlers:f})}return j=this,i<b.length&&h.push({elem:j,handlers:b.slice(i)}),h},addProp:function(a,b){Object.defineProperty(r.Event.prototype,a,{enumerable:!0,configurable:!0,get:r.isFunction(b)?function(){if(this.originalEvent)return b(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[a]},set:function(b){Object.defineProperty(this,a,{enumerable:!0,configurable:!0,writable:!0,value:b})}})},fix:function(a){return a[r.expando]?a:new r.Event(a)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==xa()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===xa()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&B(this,"input"))return this.click(),!1},_default:function(a){return B(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},r.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},r.Event=function(a,b){return this instanceof r.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?va:wa,this.target=a.target&&3===a.target.nodeType?a.target.parentNode:a.target,this.currentTarget=a.currentTarget,this.relatedTarget=a.relatedTarget):this.type=a,b&&r.extend(this,b),this.timeStamp=a&&a.timeStamp||r.now(),void(this[r.expando]=!0)):new r.Event(a,b)},r.Event.prototype={constructor:r.Event,isDefaultPrevented:wa,isPropagationStopped:wa,isImmediatePropagationStopped:wa,isSimulated:!1,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=va,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=va,a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=va,a&&!this.isSimulated&&a.stopImmediatePropagation(),this.stopPropagation()}},r.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(a){var b=a.button;return null==a.which&&sa.test(a.type)?null!=a.charCode?a.charCode:a.keyCode:!a.which&&void 0!==b&&ta.test(a.type)?1&b?1:2&b?3:4&b?2:0:a.which}},r.event.addProp),r.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){r.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||r.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),r.fn.extend({on:function(a,b,c,d){return ya(this,a,b,c,d)},one:function(a,b,c,d){return ya(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,r(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=wa),this.each(function(){r.event.remove(this,a,c,b)})}});var za=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Aa=/<script|<style|<link/i,Ba=/checked\s*(?:[^=]|=\s*.checked.)/i,Ca=/^true\/(.*)/,Da=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ea(a,b){return B(a,"table")&&B(11!==b.nodeType?b:b.firstChild,"tr")?r(">tbody",a)[0]||a:a}function Fa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function Ga(a){var b=Ca.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Ha(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(W.hasData(a)&&(f=W.access(a),g=W.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;c<d;c++)r.event.add(b,e,j[e][c])}X.hasData(a)&&(h=X.access(a),i=r.extend({},h),X.set(b,i))}}function Ia(a,b){var c=b.nodeName.toLowerCase();"input"===c&&ja.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function Ja(a,b,c,d){b=g.apply([],b);var e,f,h,i,j,k,l=0,m=a.length,n=m-1,q=b[0],s=r.isFunction(q);if(s||m>1&&"string"==typeof q&&!o.checkClone&&Ba.test(q))return a.each(function(e){var f=a.eq(e);s&&(b[0]=q.call(this,e,f.html())),Ja(f,b,c,d)});if(m&&(e=qa(b,a[0].ownerDocument,!1,a,d),f=e.firstChild,1===e.childNodes.length&&(e=f),f||d)){for(h=r.map(na(e,"script"),Fa),i=h.length;l<m;l++)j=e,l!==n&&(j=r.clone(j,!0,!0),i&&r.merge(h,na(j,"script"))),c.call(a[l],j,l);if(i)for(k=h[h.length-1].ownerDocument,r.map(h,Ga),l=0;l<i;l++)j=h[l],la.test(j.type||"")&&!W.access(j,"globalEval")&&r.contains(k,j)&&(j.src?r._evalUrl&&r._evalUrl(j.src):p(j.textContent.replace(Da,""),k))}return a}function Ka(a,b,c){for(var d,e=b?r.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||r.cleanData(na(d)),d.parentNode&&(c&&r.contains(d.ownerDocument,d)&&oa(na(d,"script")),d.parentNode.removeChild(d));return a}r.extend({htmlPrefilter:function(a){return a.replace(za,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=r.contains(a.ownerDocument,a);if(!(o.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||r.isXMLDoc(a)))for(g=na(h),f=na(a),d=0,e=f.length;d<e;d++)Ia(f[d],g[d]);if(b)if(c)for(f=f||na(a),g=g||na(h),d=0,e=f.length;d<e;d++)Ha(f[d],g[d]);else Ha(a,h);return g=na(h,"script"),g.length>0&&oa(g,!i&&na(a,"script")),h},cleanData:function(a){for(var b,c,d,e=r.event.special,f=0;void 0!==(c=a[f]);f++)if(U(c)){if(b=c[W.expando]){if(b.events)for(d in b.events)e[d]?r.event.remove(c,d):r.removeEvent(c,d,b.handle);c[W.expando]=void 0}c[X.expando]&&(c[X.expando]=void 0)}}}),r.fn.extend({detach:function(a){return Ka(this,a,!0)},remove:function(a){return Ka(this,a)},text:function(a){return T(this,function(a){return void 0===a?r.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return Ja(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ea(this,a);b.appendChild(a)}})},prepend:function(){return Ja(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ea(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ja(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ja(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(r.cleanData(na(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null!=a&&a,b=null==b?a:b,this.map(function(){return r.clone(this,a,b)})},html:function(a){return T(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!Aa.test(a)&&!ma[(ka.exec(a)||["",""])[1].toLowerCase()]){a=r.htmlPrefilter(a);try{for(;c<d;c++)b=this[c]||{},1===b.nodeType&&(r.cleanData(na(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ja(this,arguments,function(b){var c=this.parentNode;r.inArray(this,a)<0&&(r.cleanData(na(this)),c&&c.replaceChild(b,this))},a)}}),r.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){r.fn[a]=function(a){for(var c,d=[],e=r(a),f=e.length-1,g=0;g<=f;g++)c=g===f?this:this.clone(!0),r(e[g])[b](c),h.apply(d,c.get());return this.pushStack(d)}});var La=/^margin/,Ma=new RegExp("^("+aa+")(?!px)[a-z%]+$","i"),Na=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)};!function(){function b(){if(i){i.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",i.innerHTML="",ra.appendChild(h);var b=a.getComputedStyle(i);c="1%"!==b.top,g="2px"===b.marginLeft,e="4px"===b.width,i.style.marginRight="50%",f="4px"===b.marginRight,ra.removeChild(h),i=null}}var c,e,f,g,h=d.createElement("div"),i=d.createElement("div");i.style&&(i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",o.clearCloneStyle="content-box"===i.style.backgroundClip,h.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",h.appendChild(i),r.extend(o,{pixelPosition:function(){return b(),c},boxSizingReliable:function(){return b(),e},pixelMarginRight:function(){return b(),f},reliableMarginLeft:function(){return b(),g}}))}();function Oa(a,b,c){var d,e,f,g,h=a.style;return c=c||Na(a),c&&(g=c.getPropertyValue(b)||c[b],""!==g||r.contains(a.ownerDocument,a)||(g=r.style(a,b)),!o.pixelMarginRight()&&Ma.test(g)&&La.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function Pa(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Qa=/^(none|table(?!-c[ea]).+)/,Ra=/^--/,Sa={position:"absolute",visibility:"hidden",display:"block"},Ta={letterSpacing:"0",fontWeight:"400"},Ua=["Webkit","Moz","ms"],Va=d.createElement("div").style;function Wa(a){if(a in Va)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ua.length;while(c--)if(a=Ua[c]+b,a in Va)return a}function Xa(a){var b=r.cssProps[a];return b||(b=r.cssProps[a]=Wa(a)||a),b}function Ya(a,b,c){var d=ba.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Za(a,b,c,d,e){var f,g=0;for(f=c===(d?"border":"content")?4:"width"===b?1:0;f<4;f+=2)"margin"===c&&(g+=r.css(a,c+ca[f],!0,e)),d?("content"===c&&(g-=r.css(a,"padding"+ca[f],!0,e)),"margin"!==c&&(g-=r.css(a,"border"+ca[f]+"Width",!0,e))):(g+=r.css(a,"padding"+ca[f],!0,e),"padding"!==c&&(g+=r.css(a,"border"+ca[f]+"Width",!0,e)));return g}function $a(a,b,c){var d,e=Na(a),f=Oa(a,b,e),g="border-box"===r.css(a,"boxSizing",!1,e);return Ma.test(f)?f:(d=g&&(o.boxSizingReliable()||f===a.style[b]),"auto"===f&&(f=a["offset"+b[0].toUpperCase()+b.slice(1)]),f=parseFloat(f)||0,f+Za(a,b,c||(g?"border":"content"),d,e)+"px")}r.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Oa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=r.camelCase(b),i=Ra.test(b),j=a.style;return i||(b=Xa(h)),g=r.cssHooks[b]||r.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:j[b]:(f=typeof c,"string"===f&&(e=ba.exec(c))&&e[1]&&(c=fa(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(r.cssNumber[h]?"":"px")),o.clearCloneStyle||""!==c||0!==b.indexOf("background")||(j[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i?j.setProperty(b,c):j[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=r.camelCase(b),i=Ra.test(b);return i||(b=Xa(h)),g=r.cssHooks[b]||r.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Oa(a,b,d)),"normal"===e&&b in Ta&&(e=Ta[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),r.each(["height","width"],function(a,b){r.cssHooks[b]={get:function(a,c,d){if(c)return!Qa.test(r.css(a,"display"))||a.getClientRects().length&&a.getBoundingClientRect().width?$a(a,b,d):ea(a,Sa,function(){return $a(a,b,d)})},set:function(a,c,d){var e,f=d&&Na(a),g=d&&Za(a,b,d,"border-box"===r.css(a,"boxSizing",!1,f),f);return g&&(e=ba.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=r.css(a,b)),Ya(a,c,g)}}}),r.cssHooks.marginLeft=Pa(o.reliableMarginLeft,function(a,b){if(b)return(parseFloat(Oa(a,"marginLeft"))||a.getBoundingClientRect().left-ea(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px"}),r.each({margin:"",padding:"",border:"Width"},function(a,b){r.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];d<4;d++)e[a+ca[d]+b]=f[d]||f[d-2]||f[0];return e}},La.test(a)||(r.cssHooks[a+b].set=Ya)}),r.fn.extend({css:function(a,b){return T(this,function(a,b,c){var d,e,f={},g=0;if(Array.isArray(b)){for(d=Na(a),e=b.length;g<e;g++)f[b[g]]=r.css(a,b[g],!1,d);return f}return void 0!==c?r.style(a,b,c):r.css(a,b)},a,b,arguments.length>1)}});function _a(a,b,c,d,e){return new _a.prototype.init(a,b,c,d,e)}r.Tween=_a,_a.prototype={constructor:_a,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||r.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(r.cssNumber[c]?"":"px")},cur:function(){var a=_a.propHooks[this.prop];return a&&a.get?a.get(this):_a.propHooks._default.get(this)},run:function(a){var b,c=_a.propHooks[this.prop];return this.options.duration?this.pos=b=r.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):_a.propHooks._default.set(this),this}},_a.prototype.init.prototype=_a.prototype,_a.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=r.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){r.fx.step[a.prop]?r.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[r.cssProps[a.prop]]&&!r.cssHooks[a.prop]?a.elem[a.prop]=a.now:r.style(a.elem,a.prop,a.now+a.unit)}}},_a.propHooks.scrollTop=_a.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},r.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},r.fx=_a.prototype.init,r.fx.step={};var ab,bb,cb=/^(?:toggle|show|hide)$/,db=/queueHooks$/;function eb(){bb&&(d.hidden===!1&&a.requestAnimationFrame?a.requestAnimationFrame(eb):a.setTimeout(eb,r.fx.interval),r.fx.tick())}function fb(){return a.setTimeout(function(){ab=void 0}),ab=r.now()}function gb(a,b){var c,d=0,e={height:a};for(b=b?1:0;d<4;d+=2-b)c=ca[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function hb(a,b,c){for(var d,e=(kb.tweeners[b]||[]).concat(kb.tweeners["*"]),f=0,g=e.length;f<g;f++)if(d=e[f].call(c,b,a))return d}function ib(a,b,c){var d,e,f,g,h,i,j,k,l="width"in b||"height"in b,m=this,n={},o=a.style,p=a.nodeType&&da(a),q=W.get(a,"fxshow");c.queue||(g=r._queueHooks(a,"fx"),null==g.unqueued&&(g.unqueued=0,h=g.empty.fire,g.empty.fire=function(){g.unqueued||h()}),g.unqueued++,m.always(function(){m.always(function(){g.unqueued--,r.queue(a,"fx").length||g.empty.fire()})}));for(d in b)if(e=b[d],cb.test(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}n[d]=q&&q[d]||r.style(a,d)}if(i=!r.isEmptyObject(b),i||!r.isEmptyObject(n)){l&&1===a.nodeType&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=q&&q.display,null==j&&(j=W.get(a,"display")),k=r.css(a,"display"),"none"===k&&(j?k=j:(ia([a],!0),j=a.style.display||j,k=r.css(a,"display"),ia([a]))),("inline"===k||"inline-block"===k&&null!=j)&&"none"===r.css(a,"float")&&(i||(m.done(function(){o.display=j}),null==j&&(k=o.display,j="none"===k?"":k)),o.display="inline-block")),c.overflow&&(o.overflow="hidden",m.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]})),i=!1;for(d in n)i||(q?"hidden"in q&&(p=q.hidden):q=W.access(a,"fxshow",{display:j}),f&&(q.hidden=!p),p&&ia([a],!0),m.done(function(){p||ia([a]),W.remove(a,"fxshow");for(d in n)r.style(a,d,n[d])})),i=hb(p?q[d]:0,d,m),d in q||(q[d]=i.start,p&&(i.end=i.start,i.start=0))}}function jb(a,b){var c,d,e,f,g;for(c in a)if(d=r.camelCase(c),e=b[d],f=a[c],Array.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=r.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kb(a,b,c){var d,e,f=0,g=kb.prefilters.length,h=r.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=ab||fb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;g<i;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),f<1&&i?c:(i||h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:r.extend({},b),opts:r.extend(!0,{specialEasing:{},easing:r.easing._default},c),originalProperties:b,originalOptions:c,startTime:ab||fb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=r.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;c<d;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jb(k,j.opts.specialEasing);f<g;f++)if(d=kb.prefilters[f].call(j,a,k,j.opts))return r.isFunction(d.stop)&&(r._queueHooks(j.elem,j.opts.queue).stop=r.proxy(d.stop,d)),d;return r.map(k,hb,j),r.isFunction(j.opts.start)&&j.opts.start.call(a,j),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always),r.fx.timer(r.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j}r.Animation=r.extend(kb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return fa(c.elem,a,ba.exec(b),c),c}]},tweener:function(a,b){r.isFunction(a)?(b=a,a=["*"]):a=a.match(L);for(var c,d=0,e=a.length;d<e;d++)c=a[d],kb.tweeners[c]=kb.tweeners[c]||[],kb.tweeners[c].unshift(b)},prefilters:[ib],prefilter:function(a,b){b?kb.prefilters.unshift(a):kb.prefilters.push(a)}}),r.speed=function(a,b,c){var d=a&&"object"==typeof a?r.extend({},a):{complete:c||!c&&b||r.isFunction(a)&&a,duration:a,easing:c&&b||b&&!r.isFunction(b)&&b};return r.fx.off?d.duration=0:"number"!=typeof d.duration&&(d.duration in r.fx.speeds?d.duration=r.fx.speeds[d.duration]:d.duration=r.fx.speeds._default),null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){r.isFunction(d.old)&&d.old.call(this),d.queue&&r.dequeue(this,d.queue)},d},r.fn.extend({fadeTo:function(a,b,c,d){return this.filter(da).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=r.isEmptyObject(a),f=r.speed(b,c,d),g=function(){var b=kb(this,r.extend({},a),f);(e||W.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=r.timers,g=W.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&db.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||r.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=W.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=r.timers,g=d?d.length:0;for(c.finish=!0,r.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;b<g;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),r.each(["toggle","show","hide"],function(a,b){var c=r.fn[b];r.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gb(b,!0),a,d,e)}}),r.each({slideDown:gb("show"),slideUp:gb("hide"),slideToggle:gb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){r.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),r.timers=[],r.fx.tick=function(){var a,b=0,c=r.timers;for(ab=r.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||r.fx.stop(),ab=void 0},r.fx.timer=function(a){r.timers.push(a),r.fx.start()},r.fx.interval=13,r.fx.start=function(){bb||(bb=!0,eb())},r.fx.stop=function(){bb=null},r.fx.speeds={slow:600,fast:200,_default:400},r.fn.delay=function(b,c){return b=r.fx?r.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",o.checkOn=""!==a.value,o.optSelected=c.selected,a=d.createElement("input"),a.value="t",a.type="radio",o.radioValue="t"===a.value}();var lb,mb=r.expr.attrHandle;r.fn.extend({attr:function(a,b){return T(this,r.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){r.removeAttr(this,a)})}}),r.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?r.prop(a,b,c):(1===f&&r.isXMLDoc(a)||(e=r.attrHooks[b.toLowerCase()]||(r.expr.match.bool.test(b)?lb:void 0)),void 0!==c?null===c?void r.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=r.find.attr(a,b),
null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!o.radioValue&&"radio"===b&&B(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d=0,e=b&&b.match(L);if(e&&1===a.nodeType)while(c=e[d++])a.removeAttribute(c)}}),lb={set:function(a,b,c){return b===!1?r.removeAttr(a,c):a.setAttribute(c,c),c}},r.each(r.expr.match.bool.source.match(/\w+/g),function(a,b){var c=mb[b]||r.find.attr;mb[b]=function(a,b,d){var e,f,g=b.toLowerCase();return d||(f=mb[g],mb[g]=e,e=null!=c(a,b,d)?g:null,mb[g]=f),e}});var nb=/^(?:input|select|textarea|button)$/i,ob=/^(?:a|area)$/i;r.fn.extend({prop:function(a,b){return T(this,r.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[r.propFix[a]||a]})}}),r.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&r.isXMLDoc(a)||(b=r.propFix[b]||b,e=r.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=r.find.attr(a,"tabindex");return b?parseInt(b,10):nb.test(a.nodeName)||ob.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),o.optSelected||(r.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),r.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){r.propFix[this.toLowerCase()]=this});function pb(a){var b=a.match(L)||[];return b.join(" ")}function qb(a){return a.getAttribute&&a.getAttribute("class")||""}r.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).addClass(a.call(this,b,qb(this)))});if("string"==typeof a&&a){b=a.match(L)||[];while(c=this[i++])if(e=qb(c),d=1===c.nodeType&&" "+pb(e)+" "){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=pb(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).removeClass(a.call(this,b,qb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(L)||[];while(c=this[i++])if(e=qb(c),d=1===c.nodeType&&" "+pb(e)+" "){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=pb(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):r.isFunction(a)?this.each(function(c){r(this).toggleClass(a.call(this,c,qb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=r(this),f=a.match(L)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=qb(this),b&&W.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":W.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+pb(qb(c))+" ").indexOf(b)>-1)return!0;return!1}});var rb=/\r/g;r.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=r.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,r(this).val()):a,null==e?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=r.map(e,function(a){return null==a?"":a+""})),b=r.valHooks[this.type]||r.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=r.valHooks[e.type]||r.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(rb,""):null==c?"":c)}}}),r.extend({valHooks:{option:{get:function(a){var b=r.find.attr(a,"value");return null!=b?b:pb(r.text(a))}},select:{get:function(a){var b,c,d,e=a.options,f=a.selectedIndex,g="select-one"===a.type,h=g?null:[],i=g?f+1:e.length;for(d=f<0?i:g?f:0;d<i;d++)if(c=e[d],(c.selected||d===f)&&!c.disabled&&(!c.parentNode.disabled||!B(c.parentNode,"optgroup"))){if(b=r(c).val(),g)return b;h.push(b)}return h},set:function(a,b){var c,d,e=a.options,f=r.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=r.inArray(r.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),r.each(["radio","checkbox"],function(){r.valHooks[this]={set:function(a,b){if(Array.isArray(b))return a.checked=r.inArray(r(a).val(),b)>-1}},o.checkOn||(r.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var sb=/^(?:focusinfocus|focusoutblur)$/;r.extend(r.event,{trigger:function(b,c,e,f){var g,h,i,j,k,m,n,o=[e||d],p=l.call(b,"type")?b.type:b,q=l.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!sb.test(p+r.event.triggered)&&(p.indexOf(".")>-1&&(q=p.split("."),p=q.shift(),q.sort()),k=p.indexOf(":")<0&&"on"+p,b=b[r.expando]?b:new r.Event(p,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=q.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:r.makeArray(c,[b]),n=r.event.special[p]||{},f||!n.trigger||n.trigger.apply(e,c)!==!1)){if(!f&&!n.noBubble&&!r.isWindow(e)){for(j=n.delegateType||p,sb.test(j+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),i=h;i===(e.ownerDocument||d)&&o.push(i.defaultView||i.parentWindow||a)}g=0;while((h=o[g++])&&!b.isPropagationStopped())b.type=g>1?j:n.bindType||p,m=(W.get(h,"events")||{})[b.type]&&W.get(h,"handle"),m&&m.apply(h,c),m=k&&h[k],m&&m.apply&&U(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=p,f||b.isDefaultPrevented()||n._default&&n._default.apply(o.pop(),c)!==!1||!U(e)||k&&r.isFunction(e[p])&&!r.isWindow(e)&&(i=e[k],i&&(e[k]=null),r.event.triggered=p,e[p](),r.event.triggered=void 0,i&&(e[k]=i)),b.result}},simulate:function(a,b,c){var d=r.extend(new r.Event,c,{type:a,isSimulated:!0});r.event.trigger(d,null,b)}}),r.fn.extend({trigger:function(a,b){return this.each(function(){r.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];if(c)return r.event.trigger(a,b,c,!0)}}),r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(a,b){r.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),r.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),o.focusin="onfocusin"in a,o.focusin||r.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){r.event.simulate(b,a.target,r.event.fix(a))};r.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=W.access(d,b);e||d.addEventListener(a,c,!0),W.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=W.access(d,b)-1;e?W.access(d,b,e):(d.removeEventListener(a,c,!0),W.remove(d,b))}}});var tb=a.location,ub=r.now(),vb=/\?/;r.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||r.error("Invalid XML: "+b),c};var wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(Array.isArray(b))r.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==r.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}r.param=function(a,b){var c,d=[],e=function(a,b){var c=r.isFunction(b)?b():b;d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(null==c?"":c)};if(Array.isArray(a)||a.jquery&&!r.isPlainObject(a))r.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&")},r.fn.extend({serialize:function(){return r.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=r.prop(this,"elements");return a?r.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!r(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!ja.test(a))}).map(function(a,b){var c=r(this).val();return null==c?null:Array.isArray(c)?r.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}});var Bb=/%20/g,Cb=/#.*$/,Db=/([?&])_=[^&]*/,Eb=/^(.*?):[ \t]*([^\r\n]*)$/gm,Fb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Gb=/^(?:GET|HEAD)$/,Hb=/^\/\//,Ib={},Jb={},Kb="*/".concat("*"),Lb=d.createElement("a");Lb.href=tb.href;function Mb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(L)||[];if(r.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Nb(a,b,c,d){var e={},f=a===Jb;function g(h){var i;return e[h]=!0,r.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Ob(a,b){var c,d,e=r.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&r.extend(!0,a,d),a}function Pb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}if(f)return f!==i[0]&&i.unshift(f),c[f]}function Qb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}r.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:tb.href,type:"GET",isLocal:Fb.test(tb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":r.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Ob(Ob(a,r.ajaxSettings),b):Ob(r.ajaxSettings,a)},ajaxPrefilter:Mb(Ib),ajaxTransport:Mb(Jb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m,n,o=r.ajaxSetup({},c),p=o.context||o,q=o.context&&(p.nodeType||p.jquery)?r(p):r.event,s=r.Deferred(),t=r.Callbacks("once memory"),u=o.statusCode||{},v={},w={},x="canceled",y={readyState:0,getResponseHeader:function(a){var b;if(k){if(!h){h={};while(b=Eb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return k?g:null},setRequestHeader:function(a,b){return null==k&&(a=w[a.toLowerCase()]=w[a.toLowerCase()]||a,v[a]=b),this},overrideMimeType:function(a){return null==k&&(o.mimeType=a),this},statusCode:function(a){var b;if(a)if(k)y.always(a[y.status]);else for(b in a)u[b]=[u[b],a[b]];return this},abort:function(a){var b=a||x;return e&&e.abort(b),A(0,b),this}};if(s.promise(y),o.url=((b||o.url||tb.href)+"").replace(Hb,tb.protocol+"//"),o.type=c.method||c.type||o.method||o.type,o.dataTypes=(o.dataType||"*").toLowerCase().match(L)||[""],null==o.crossDomain){j=d.createElement("a");try{j.href=o.url,j.href=j.href,o.crossDomain=Lb.protocol+"//"+Lb.host!=j.protocol+"//"+j.host}catch(z){o.crossDomain=!0}}if(o.data&&o.processData&&"string"!=typeof o.data&&(o.data=r.param(o.data,o.traditional)),Nb(Ib,o,c,y),k)return y;l=r.event&&o.global,l&&0===r.active++&&r.event.trigger("ajaxStart"),o.type=o.type.toUpperCase(),o.hasContent=!Gb.test(o.type),f=o.url.replace(Cb,""),o.hasContent?o.data&&o.processData&&0===(o.contentType||"").indexOf("application/x-www-form-urlencoded")&&(o.data=o.data.replace(Bb,"+")):(n=o.url.slice(f.length),o.data&&(f+=(vb.test(f)?"&":"?")+o.data,delete o.data),o.cache===!1&&(f=f.replace(Db,"$1"),n=(vb.test(f)?"&":"?")+"_="+ub++ +n),o.url=f+n),o.ifModified&&(r.lastModified[f]&&y.setRequestHeader("If-Modified-Since",r.lastModified[f]),r.etag[f]&&y.setRequestHeader("If-None-Match",r.etag[f])),(o.data&&o.hasContent&&o.contentType!==!1||c.contentType)&&y.setRequestHeader("Content-Type",o.contentType),y.setRequestHeader("Accept",o.dataTypes[0]&&o.accepts[o.dataTypes[0]]?o.accepts[o.dataTypes[0]]+("*"!==o.dataTypes[0]?", "+Kb+"; q=0.01":""):o.accepts["*"]);for(m in o.headers)y.setRequestHeader(m,o.headers[m]);if(o.beforeSend&&(o.beforeSend.call(p,y,o)===!1||k))return y.abort();if(x="abort",t.add(o.complete),y.done(o.success),y.fail(o.error),e=Nb(Jb,o,c,y)){if(y.readyState=1,l&&q.trigger("ajaxSend",[y,o]),k)return y;o.async&&o.timeout>0&&(i=a.setTimeout(function(){y.abort("timeout")},o.timeout));try{k=!1,e.send(v,A)}catch(z){if(k)throw z;A(-1,z)}}else A(-1,"No Transport");function A(b,c,d,h){var j,m,n,v,w,x=c;k||(k=!0,i&&a.clearTimeout(i),e=void 0,g=h||"",y.readyState=b>0?4:0,j=b>=200&&b<300||304===b,d&&(v=Pb(o,y,d)),v=Qb(o,v,y,j),j?(o.ifModified&&(w=y.getResponseHeader("Last-Modified"),w&&(r.lastModified[f]=w),w=y.getResponseHeader("etag"),w&&(r.etag[f]=w)),204===b||"HEAD"===o.type?x="nocontent":304===b?x="notmodified":(x=v.state,m=v.data,n=v.error,j=!n)):(n=x,!b&&x||(x="error",b<0&&(b=0))),y.status=b,y.statusText=(c||x)+"",j?s.resolveWith(p,[m,x,y]):s.rejectWith(p,[y,x,n]),y.statusCode(u),u=void 0,l&&q.trigger(j?"ajaxSuccess":"ajaxError",[y,o,j?m:n]),t.fireWith(p,[y,x]),l&&(q.trigger("ajaxComplete",[y,o]),--r.active||r.event.trigger("ajaxStop")))}return y},getJSON:function(a,b,c){return r.get(a,b,c,"json")},getScript:function(a,b){return r.get(a,void 0,b,"script")}}),r.each(["get","post"],function(a,b){r[b]=function(a,c,d,e){return r.isFunction(c)&&(e=e||d,d=c,c=void 0),r.ajax(r.extend({url:a,type:b,dataType:e,data:c,success:d},r.isPlainObject(a)&&a))}}),r._evalUrl=function(a){return r.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},r.fn.extend({wrapAll:function(a){var b;return this[0]&&(r.isFunction(a)&&(a=a.call(this[0])),b=r(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this},wrapInner:function(a){return r.isFunction(a)?this.each(function(b){r(this).wrapInner(a.call(this,b))}):this.each(function(){var b=r(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=r.isFunction(a);return this.each(function(c){r(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(a){return this.parent(a).not("body").each(function(){r(this).replaceWith(this.childNodes)}),this}}),r.expr.pseudos.hidden=function(a){return!r.expr.pseudos.visible(a)},r.expr.pseudos.visible=function(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)},r.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Rb={0:200,1223:204},Sb=r.ajaxSettings.xhr();o.cors=!!Sb&&"withCredentials"in Sb,o.ajax=Sb=!!Sb,r.ajaxTransport(function(b){var c,d;if(o.cors||Sb&&!b.crossDomain)return{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Rb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}}),r.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),r.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return r.globalEval(a),a}}}),r.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),r.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=r("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Tb=[],Ub=/(=)\?(?=&|$)|\?\?/;r.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Tb.pop()||r.expando+"_"+ub++;return this[a]=!0,a}}),r.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Ub.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ub.test(b.data)&&"data");if(h||"jsonp"===b.dataTypes[0])return e=b.jsonpCallback=r.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Ub,"$1"+e):b.jsonp!==!1&&(b.url+=(vb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||r.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?r(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Tb.push(e)),g&&r.isFunction(f)&&f(g[0]),g=f=void 0}),"script"}),o.createHTMLDocument=function(){var a=d.implementation.createHTMLDocument("").body;return a.innerHTML="<form></form><form></form>",2===a.childNodes.length}(),r.parseHTML=function(a,b,c){if("string"!=typeof a)return[];"boolean"==typeof b&&(c=b,b=!1);var e,f,g;return b||(o.createHTMLDocument?(b=d.implementation.createHTMLDocument(""),e=b.createElement("base"),e.href=d.location.href,b.head.appendChild(e)):b=d),f=C.exec(a),g=!c&&[],f?[b.createElement(f[1])]:(f=qa([a],b,g),g&&g.length&&r(g).remove(),r.merge([],f.childNodes))},r.fn.load=function(a,b,c){var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=pb(a.slice(h)),a=a.slice(0,h)),r.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&r.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?r("<div>").append(r.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},r.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){r.fn[b]=function(a){return this.on(b,a)}}),r.expr.pseudos.animated=function(a){return r.grep(r.timers,function(b){return a===b.elem}).length},r.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=r.css(a,"position"),l=r(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=r.css(a,"top"),i=r.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),r.isFunction(b)&&(b=b.call(a,c,r.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},r.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){r.offset.setOffset(this,a,b)});var b,c,d,e,f=this[0];if(f)return f.getClientRects().length?(d=f.getBoundingClientRect(),b=f.ownerDocument,c=b.documentElement,e=b.defaultView,{top:d.top+e.pageYOffset-c.clientTop,left:d.left+e.pageXOffset-c.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===r.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),B(a[0],"html")||(d=a.offset()),d={top:d.top+r.css(a[0],"borderTopWidth",!0),left:d.left+r.css(a[0],"borderLeftWidth",!0)}),{top:b.top-d.top-r.css(c,"marginTop",!0),left:b.left-d.left-r.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===r.css(a,"position"))a=a.offsetParent;return a||ra})}}),r.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;r.fn[a]=function(d){return T(this,function(a,d,e){var f;return r.isWindow(a)?f=a:9===a.nodeType&&(f=a.defaultView),void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),r.each(["top","left"],function(a,b){r.cssHooks[b]=Pa(o.pixelPosition,function(a,c){if(c)return c=Oa(a,b),Ma.test(c)?r(a).position()[b]+"px":c})}),r.each({Height:"height",Width:"width"},function(a,b){r.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){r.fn[d]=function(e,f){var g=arguments.length&&(c||"boolean"!=typeof e),h=c||(e===!0||f===!0?"margin":"border");return T(this,function(b,c,e){var f;return r.isWindow(b)?0===d.indexOf("outer")?b["inner"+a]:b.document.documentElement["client"+a]:9===b.nodeType?(f=b.documentElement,Math.max(b.body["scroll"+a],f["scroll"+a],b.body["offset"+a],f["offset"+a],f["client"+a])):void 0===e?r.css(b,c,h):r.style(b,c,e,h)},b,g?e:void 0,g)}})}),r.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),r.holdReady=function(a){a?r.readyWait++:r.ready(!0)},r.isArray=Array.isArray,r.parseJSON=JSON.parse,r.nodeName=B,"function"==typeof define&&define.amd&&define("jquery",[],function(){return r});var Vb=a.jQuery,Wb=a.$;return r.noConflict=function(b){return a.$===r&&(a.$=Wb),b&&a.jQuery===r&&(a.jQuery=Vb),r},b||(a.jQuery=a.$=r),r});

/*
 Copyright (C) Federico Zivolo 2019
 Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
 */(function(e,t){'object'==typeof exports&&'undefined'!=typeof module?module.exports=t():'function'==typeof define&&define.amd?define(t):e.Popper=t()})(this,function(){'use strict';function e(e){return e&&'[object Function]'==={}.toString.call(e)}function t(e,t){if(1!==e.nodeType)return[];var o=e.ownerDocument.defaultView,n=o.getComputedStyle(e,null);return t?n[t]:n}function o(e){return'HTML'===e.nodeName?e:e.parentNode||e.host}function n(e){if(!e)return document.body;switch(e.nodeName){case'HTML':case'BODY':return e.ownerDocument.body;case'#document':return e.body;}var i=t(e),r=i.overflow,p=i.overflowX,s=i.overflowY;return /(auto|scroll|overlay)/.test(r+s+p)?e:n(o(e))}function r(e){return 11===e?pe:10===e?se:pe||se}function p(e){if(!e)return document.documentElement;for(var o=r(10)?document.body:null,n=e.offsetParent||null;n===o&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&'BODY'!==i&&'HTML'!==i?-1!==['TH','TD','TABLE'].indexOf(n.nodeName)&&'static'===t(n,'position')?p(n):n:e?e.ownerDocument.documentElement:document.documentElement}function s(e){var t=e.nodeName;return'BODY'!==t&&('HTML'===t||p(e.firstElementChild)===e)}function d(e){return null===e.parentNode?e:d(e.parentNode)}function a(e,t){if(!e||!e.nodeType||!t||!t.nodeType)return document.documentElement;var o=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,n=o?e:t,i=o?t:e,r=document.createRange();r.setStart(n,0),r.setEnd(i,0);var l=r.commonAncestorContainer;if(e!==l&&t!==l||n.contains(i))return s(l)?l:p(l);var f=d(e);return f.host?a(f.host,t):a(e,d(t).host)}function l(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:'top',o='top'===t?'scrollTop':'scrollLeft',n=e.nodeName;if('BODY'===n||'HTML'===n){var i=e.ownerDocument.documentElement,r=e.ownerDocument.scrollingElement||i;return r[o]}return e[o]}function f(e,t){var o=2<arguments.length&&void 0!==arguments[2]&&arguments[2],n=l(t,'top'),i=l(t,'left'),r=o?-1:1;return e.top+=n*r,e.bottom+=n*r,e.left+=i*r,e.right+=i*r,e}function m(e,t){var o='x'===t?'Left':'Top',n='Left'==o?'Right':'Bottom';return parseFloat(e['border'+o+'Width'],10)+parseFloat(e['border'+n+'Width'],10)}function h(e,t,o,n){return ee(t['offset'+e],t['scroll'+e],o['client'+e],o['offset'+e],o['scroll'+e],r(10)?parseInt(o['offset'+e])+parseInt(n['margin'+('Height'===e?'Top':'Left')])+parseInt(n['margin'+('Height'===e?'Bottom':'Right')]):0)}function c(e){var t=e.body,o=e.documentElement,n=r(10)&&getComputedStyle(o);return{height:h('Height',t,o,n),width:h('Width',t,o,n)}}function g(e){return fe({},e,{right:e.left+e.width,bottom:e.top+e.height})}function u(e){var o={};try{if(r(10)){o=e.getBoundingClientRect();var n=l(e,'top'),i=l(e,'left');o.top+=n,o.left+=i,o.bottom+=n,o.right+=i}else o=e.getBoundingClientRect()}catch(t){}var p={left:o.left,top:o.top,width:o.right-o.left,height:o.bottom-o.top},s='HTML'===e.nodeName?c(e.ownerDocument):{},d=s.width||e.clientWidth||p.right-p.left,a=s.height||e.clientHeight||p.bottom-p.top,f=e.offsetWidth-d,h=e.offsetHeight-a;if(f||h){var u=t(e);f-=m(u,'x'),h-=m(u,'y'),p.width-=f,p.height-=h}return g(p)}function b(e,o){var i=2<arguments.length&&void 0!==arguments[2]&&arguments[2],p=r(10),s='HTML'===o.nodeName,d=u(e),a=u(o),l=n(e),m=t(o),h=parseFloat(m.borderTopWidth,10),c=parseFloat(m.borderLeftWidth,10);i&&s&&(a.top=ee(a.top,0),a.left=ee(a.left,0));var b=g({top:d.top-a.top-h,left:d.left-a.left-c,width:d.width,height:d.height});if(b.marginTop=0,b.marginLeft=0,!p&&s){var w=parseFloat(m.marginTop,10),y=parseFloat(m.marginLeft,10);b.top-=h-w,b.bottom-=h-w,b.left-=c-y,b.right-=c-y,b.marginTop=w,b.marginLeft=y}return(p&&!i?o.contains(l):o===l&&'BODY'!==l.nodeName)&&(b=f(b,o)),b}function w(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],o=e.ownerDocument.documentElement,n=b(e,o),i=ee(o.clientWidth,window.innerWidth||0),r=ee(o.clientHeight,window.innerHeight||0),p=t?0:l(o),s=t?0:l(o,'left'),d={top:p-n.top+n.marginTop,left:s-n.left+n.marginLeft,width:i,height:r};return g(d)}function y(e){var n=e.nodeName;if('BODY'===n||'HTML'===n)return!1;if('fixed'===t(e,'position'))return!0;var i=o(e);return!!i&&y(i)}function E(e){if(!e||!e.parentElement||r())return document.documentElement;for(var o=e.parentElement;o&&'none'===t(o,'transform');)o=o.parentElement;return o||document.documentElement}function v(e,t,i,r){var p=4<arguments.length&&void 0!==arguments[4]&&arguments[4],s={top:0,left:0},d=p?E(e):a(e,t);if('viewport'===r)s=w(d,p);else{var l;'scrollParent'===r?(l=n(o(t)),'BODY'===l.nodeName&&(l=e.ownerDocument.documentElement)):'window'===r?l=e.ownerDocument.documentElement:l=r;var f=b(l,d,p);if('HTML'===l.nodeName&&!y(d)){var m=c(e.ownerDocument),h=m.height,g=m.width;s.top+=f.top-f.marginTop,s.bottom=h+f.top,s.left+=f.left-f.marginLeft,s.right=g+f.left}else s=f}i=i||0;var u='number'==typeof i;return s.left+=u?i:i.left||0,s.top+=u?i:i.top||0,s.right-=u?i:i.right||0,s.bottom-=u?i:i.bottom||0,s}function x(e){var t=e.width,o=e.height;return t*o}function O(e,t,o,n,i){var r=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf('auto'))return e;var p=v(o,n,r,i),s={top:{width:p.width,height:t.top-p.top},right:{width:p.right-t.right,height:p.height},bottom:{width:p.width,height:p.bottom-t.bottom},left:{width:t.left-p.left,height:p.height}},d=Object.keys(s).map(function(e){return fe({key:e},s[e],{area:x(s[e])})}).sort(function(e,t){return t.area-e.area}),a=d.filter(function(e){var t=e.width,n=e.height;return t>=o.clientWidth&&n>=o.clientHeight}),l=0<a.length?a[0].key:d[0].key,f=e.split('-')[1];return l+(f?'-'+f:'')}function L(e,t,o){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,i=n?E(t):a(t,o);return b(o,i,n)}function S(e){var t=e.ownerDocument.defaultView,o=t.getComputedStyle(e),n=parseFloat(o.marginTop||0)+parseFloat(o.marginBottom||0),i=parseFloat(o.marginLeft||0)+parseFloat(o.marginRight||0),r={width:e.offsetWidth+i,height:e.offsetHeight+n};return r}function T(e){var t={left:'right',right:'left',bottom:'top',top:'bottom'};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function C(e,t,o){o=o.split('-')[0];var n=S(e),i={width:n.width,height:n.height},r=-1!==['right','left'].indexOf(o),p=r?'top':'left',s=r?'left':'top',d=r?'height':'width',a=r?'width':'height';return i[p]=t[p]+t[d]/2-n[d]/2,i[s]=o===s?t[s]-n[a]:t[T(s)],i}function D(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function N(e,t,o){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===o});var n=D(e,function(e){return e[t]===o});return e.indexOf(n)}function P(t,o,n){var i=void 0===n?t:t.slice(0,N(t,'name',n));return i.forEach(function(t){t['function']&&console.warn('`modifier.function` is deprecated, use `modifier.fn`!');var n=t['function']||t.fn;t.enabled&&e(n)&&(o.offsets.popper=g(o.offsets.popper),o.offsets.reference=g(o.offsets.reference),o=n(o,t))}),o}function k(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=L(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=O(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=C(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?'fixed':'absolute',e=P(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function W(e,t){return e.some(function(e){var o=e.name,n=e.enabled;return n&&o===t})}function B(e){for(var t=[!1,'ms','Webkit','Moz','O'],o=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<t.length;n++){var i=t[n],r=i?''+i+o:e;if('undefined'!=typeof document.body.style[r])return r}return null}function H(){return this.state.isDestroyed=!0,W(this.modifiers,'applyStyle')&&(this.popper.removeAttribute('x-placement'),this.popper.style.position='',this.popper.style.top='',this.popper.style.left='',this.popper.style.right='',this.popper.style.bottom='',this.popper.style.willChange='',this.popper.style[B('transform')]=''),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function A(e){var t=e.ownerDocument;return t?t.defaultView:window}function M(e,t,o,i){var r='BODY'===e.nodeName,p=r?e.ownerDocument.defaultView:e;p.addEventListener(t,o,{passive:!0}),r||M(n(p.parentNode),t,o,i),i.push(p)}function F(e,t,o,i){o.updateBound=i,A(e).addEventListener('resize',o.updateBound,{passive:!0});var r=n(e);return M(r,'scroll',o.updateBound,o.scrollParents),o.scrollElement=r,o.eventsEnabled=!0,o}function I(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}function R(e,t){return A(e).removeEventListener('resize',t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener('scroll',t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function U(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=R(this.reference,this.state))}function Y(e){return''!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function V(e,t){Object.keys(t).forEach(function(o){var n='';-1!==['width','height','top','right','bottom','left'].indexOf(o)&&Y(t[o])&&(n='px'),e.style[o]=t[o]+n})}function j(e,t){Object.keys(t).forEach(function(o){var n=t[o];!1===n?e.removeAttribute(o):e.setAttribute(o,t[o])})}function q(e,t){var o=e.offsets,n=o.popper,i=o.reference,r=$,p=function(e){return e},s=r(i.width),d=r(n.width),a=-1!==['left','right'].indexOf(e.placement),l=-1!==e.placement.indexOf('-'),f=t?a||l||s%2==d%2?r:Z:p,m=t?r:p;return{left:f(1==s%2&&1==d%2&&!l&&t?n.left-1:n.left),top:m(n.top),bottom:m(n.bottom),right:f(n.right)}}function K(e,t,o){var n=D(e,function(e){var o=e.name;return o===t}),i=!!n&&e.some(function(e){return e.name===o&&e.enabled&&e.order<n.order});if(!i){var r='`'+t+'`';console.warn('`'+o+'`'+' modifier is required by '+r+' modifier in order to work, be sure to include it before '+r+'!')}return i}function z(e){return'end'===e?'start':'start'===e?'end':e}function G(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],o=ce.indexOf(e),n=ce.slice(o+1).concat(ce.slice(0,o));return t?n.reverse():n}function _(e,t,o,n){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+i[1],p=i[2];if(!r)return e;if(0===p.indexOf('%')){var s;switch(p){case'%p':s=o;break;case'%':case'%r':default:s=n;}var d=g(s);return d[t]/100*r}if('vh'===p||'vw'===p){var a;return a='vh'===p?ee(document.documentElement.clientHeight,window.innerHeight||0):ee(document.documentElement.clientWidth,window.innerWidth||0),a/100*r}return r}function X(e,t,o,n){var i=[0,0],r=-1!==['right','left'].indexOf(n),p=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=p.indexOf(D(p,function(e){return-1!==e.search(/,|\s/)}));p[s]&&-1===p[s].indexOf(',')&&console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');var d=/\s*,\s*|\s+/,a=-1===s?[p]:[p.slice(0,s).concat([p[s].split(d)[0]]),[p[s].split(d)[1]].concat(p.slice(s+1))];return a=a.map(function(e,n){var i=(1===n?!r:r)?'height':'width',p=!1;return e.reduce(function(e,t){return''===e[e.length-1]&&-1!==['+','-'].indexOf(t)?(e[e.length-1]=t,p=!0,e):p?(e[e.length-1]+=t,p=!1,e):e.concat(t)},[]).map(function(e){return _(e,i,t,o)})}),a.forEach(function(e,t){e.forEach(function(o,n){Y(o)&&(i[t]+=o*('-'===e[n-1]?-1:1))})}),i}function J(e,t){var o,n=t.offset,i=e.placement,r=e.offsets,p=r.popper,s=r.reference,d=i.split('-')[0];return o=Y(+n)?[+n,0]:X(n,p,s,d),'left'===d?(p.top+=o[0],p.left-=o[1]):'right'===d?(p.top+=o[0],p.left+=o[1]):'top'===d?(p.left+=o[0],p.top-=o[1]):'bottom'===d&&(p.left+=o[0],p.top+=o[1]),e.popper=p,e}for(var Q=Math.min,Z=Math.floor,$=Math.round,ee=Math.max,te='undefined'!=typeof window&&'undefined'!=typeof document,oe=['Edge','Trident','Firefox'],ne=0,ie=0;ie<oe.length;ie+=1)if(te&&0<=navigator.userAgent.indexOf(oe[ie])){ne=1;break}var i=te&&window.Promise,re=i?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},ne))}},pe=te&&!!(window.MSInputMethodContext&&document.documentMode),se=te&&/MSIE 10/.test(navigator.userAgent),de=function(e,t){if(!(e instanceof t))throw new TypeError('Cannot call a class as a function')},ae=function(){function e(e,t){for(var o,n=0;n<t.length;n++)o=t[n],o.enumerable=o.enumerable||!1,o.configurable=!0,'value'in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),le=function(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e},fe=Object.assign||function(e){for(var t,o=1;o<arguments.length;o++)for(var n in t=arguments[o],t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},me=te&&/Firefox/i.test(navigator.userAgent),he=['auto-start','auto','auto-end','top-start','top','top-end','right-start','right','right-end','bottom-end','bottom','bottom-start','left-end','left','left-start'],ce=he.slice(3),ge={FLIP:'flip',CLOCKWISE:'clockwise',COUNTERCLOCKWISE:'counterclockwise'},ue=function(){function t(o,n){var i=this,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};de(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=re(this.update.bind(this)),this.options=fe({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=o&&o.jquery?o[0]:o,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(fe({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){i.options.modifiers[e]=fe({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return fe({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(t){t.enabled&&e(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)}),this.update();var p=this.options.eventsEnabled;p&&this.enableEventListeners(),this.state.eventsEnabled=p}return ae(t,[{key:'update',value:function(){return k.call(this)}},{key:'destroy',value:function(){return H.call(this)}},{key:'enableEventListeners',value:function(){return I.call(this)}},{key:'disableEventListeners',value:function(){return U.call(this)}}]),t}();return ue.Utils=('undefined'==typeof window?global:window).PopperUtils,ue.placements=he,ue.Defaults={placement:'bottom',positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,o=t.split('-')[0],n=t.split('-')[1];if(n){var i=e.offsets,r=i.reference,p=i.popper,s=-1!==['bottom','top'].indexOf(o),d=s?'left':'top',a=s?'width':'height',l={start:le({},d,r[d]),end:le({},d,r[d]+r[a]-p[a])};e.offsets.popper=fe({},p,l[n])}return e}},offset:{order:200,enabled:!0,fn:J,offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var o=t.boundariesElement||p(e.instance.popper);e.instance.reference===o&&(o=p(o));var n=B('transform'),i=e.instance.popper.style,r=i.top,s=i.left,d=i[n];i.top='',i.left='',i[n]='';var a=v(e.instance.popper,e.instance.reference,t.padding,o,e.positionFixed);i.top=r,i.left=s,i[n]=d,t.boundaries=a;var l=t.priority,f=e.offsets.popper,m={primary:function(e){var o=f[e];return f[e]<a[e]&&!t.escapeWithReference&&(o=ee(f[e],a[e])),le({},e,o)},secondary:function(e){var o='right'===e?'left':'top',n=f[o];return f[e]>a[e]&&!t.escapeWithReference&&(n=Q(f[o],a[e]-('right'===e?f.width:f.height))),le({},o,n)}};return l.forEach(function(e){var t=-1===['left','top'].indexOf(e)?'secondary':'primary';f=fe({},f,m[t](e))}),e.offsets.popper=f,e},priority:['left','right','top','bottom'],padding:5,boundariesElement:'scrollParent'},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,o=t.popper,n=t.reference,i=e.placement.split('-')[0],r=Z,p=-1!==['top','bottom'].indexOf(i),s=p?'right':'bottom',d=p?'left':'top',a=p?'width':'height';return o[s]<r(n[d])&&(e.offsets.popper[d]=r(n[d])-o[a]),o[d]>r(n[s])&&(e.offsets.popper[d]=r(n[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,o){var n;if(!K(e.instance.modifiers,'arrow','keepTogether'))return e;var i=o.element;if('string'==typeof i){if(i=e.instance.popper.querySelector(i),!i)return e;}else if(!e.instance.popper.contains(i))return console.warn('WARNING: `arrow.element` must be child of its popper element!'),e;var r=e.placement.split('-')[0],p=e.offsets,s=p.popper,d=p.reference,a=-1!==['left','right'].indexOf(r),l=a?'height':'width',f=a?'Top':'Left',m=f.toLowerCase(),h=a?'left':'top',c=a?'bottom':'right',u=S(i)[l];d[c]-u<s[m]&&(e.offsets.popper[m]-=s[m]-(d[c]-u)),d[m]+u>s[c]&&(e.offsets.popper[m]+=d[m]+u-s[c]),e.offsets.popper=g(e.offsets.popper);var b=d[m]+d[l]/2-u/2,w=t(e.instance.popper),y=parseFloat(w['margin'+f],10),E=parseFloat(w['border'+f+'Width'],10),v=b-e.offsets.popper[m]-y-E;return v=ee(Q(s[l]-u,v),0),e.arrowElement=i,e.offsets.arrow=(n={},le(n,m,$(v)),le(n,h,''),n),e},element:'[x-arrow]'},flip:{order:600,enabled:!0,fn:function(e,t){if(W(e.instance.modifiers,'inner'))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var o=v(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),n=e.placement.split('-')[0],i=T(n),r=e.placement.split('-')[1]||'',p=[];switch(t.behavior){case ge.FLIP:p=[n,i];break;case ge.CLOCKWISE:p=G(n);break;case ge.COUNTERCLOCKWISE:p=G(n,!0);break;default:p=t.behavior;}return p.forEach(function(s,d){if(n!==s||p.length===d+1)return e;n=e.placement.split('-')[0],i=T(n);var a=e.offsets.popper,l=e.offsets.reference,f=Z,m='left'===n&&f(a.right)>f(l.left)||'right'===n&&f(a.left)<f(l.right)||'top'===n&&f(a.bottom)>f(l.top)||'bottom'===n&&f(a.top)<f(l.bottom),h=f(a.left)<f(o.left),c=f(a.right)>f(o.right),g=f(a.top)<f(o.top),u=f(a.bottom)>f(o.bottom),b='left'===n&&h||'right'===n&&c||'top'===n&&g||'bottom'===n&&u,w=-1!==['top','bottom'].indexOf(n),y=!!t.flipVariations&&(w&&'start'===r&&h||w&&'end'===r&&c||!w&&'start'===r&&g||!w&&'end'===r&&u),E=!!t.flipVariationsByContent&&(w&&'start'===r&&c||w&&'end'===r&&h||!w&&'start'===r&&u||!w&&'end'===r&&g),v=y||E;(m||b||v)&&(e.flipped=!0,(m||b)&&(n=p[d+1]),v&&(r=z(r)),e.placement=n+(r?'-'+r:''),e.offsets.popper=fe({},e.offsets.popper,C(e.instance.popper,e.offsets.reference,e.placement)),e=P(e.instance.modifiers,e,'flip'))}),e},behavior:'flip',padding:5,boundariesElement:'viewport',flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,o=t.split('-')[0],n=e.offsets,i=n.popper,r=n.reference,p=-1!==['left','right'].indexOf(o),s=-1===['top','left'].indexOf(o);return i[p?'left':'top']=r[o]-(s?i[p?'width':'height']:0),e.placement=T(t),e.offsets.popper=g(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!K(e.instance.modifiers,'hide','preventOverflow'))return e;var t=e.offsets.reference,o=D(e.instance.modifiers,function(e){return'preventOverflow'===e.name}).boundaries;if(t.bottom<o.top||t.left>o.right||t.top>o.bottom||t.right<o.left){if(!0===e.hide)return e;e.hide=!0,e.attributes['x-out-of-boundaries']=''}else{if(!1===e.hide)return e;e.hide=!1,e.attributes['x-out-of-boundaries']=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var o=t.x,n=t.y,i=e.offsets.popper,r=D(e.instance.modifiers,function(e){return'applyStyle'===e.name}).gpuAcceleration;void 0!==r&&console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');var s,d,a=void 0===r?t.gpuAcceleration:r,l=p(e.instance.popper),f=u(l),m={position:i.position},h=q(e,2>window.devicePixelRatio||!me),c='bottom'===o?'top':'bottom',g='right'===n?'left':'right',b=B('transform');if(d='bottom'==c?'HTML'===l.nodeName?-l.clientHeight+h.bottom:-f.height+h.bottom:h.top,s='right'==g?'HTML'===l.nodeName?-l.clientWidth+h.right:-f.width+h.right:h.left,a&&b)m[b]='translate3d('+s+'px, '+d+'px, 0)',m[c]=0,m[g]=0,m.willChange='transform';else{var w='bottom'==c?-1:1,y='right'==g?-1:1;m[c]=d*w,m[g]=s*y,m.willChange=c+', '+g}var E={"x-placement":e.placement};return e.attributes=fe({},E,e.attributes),e.styles=fe({},m,e.styles),e.arrowStyles=fe({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:'bottom',y:'right'},applyStyle:{order:900,enabled:!0,fn:function(e){return V(e.instance.popper,e.styles),j(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&V(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,o,n,i){var r=L(i,t,e,o.positionFixed),p=O(o.placement,r,t,e,o.modifiers.flip.boundariesElement,o.modifiers.flip.padding);return t.setAttribute('x-placement',p),V(t,{position:o.positionFixed?'fixed':'absolute'}),o},gpuAcceleration:void 0}}},ue});
//# sourceMappingURL=popper.min.js.map

!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("popper.js")):"function"==typeof define&&define.amd?define(["popper.js"],e):(t=t||self).tippy=e(t.Popper)}(this,function(t){"use strict";t=t&&t.hasOwnProperty("default")?t.default:t;function e(){return(e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t}).apply(this,arguments)}var a="undefined"!=typeof window&&"undefined"!=typeof document,r=a?navigator.userAgent:"",n=/MSIE |Trident\//.test(r),i=/UCBrowser\//.test(r),o=a&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,p={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:0,distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",triggerTarget:null,updateDuration:0,wait:null,zIndex:9999},s=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],c=a?Element.prototype:{},l=c.matches||c.matchesSelector||c.webkitMatchesSelector||c.mozMatchesSelector||c.msMatchesSelector;function d(t){return[].slice.call(t)}function f(t,e){return m(t,function(t){return l.call(t,e)})}function m(t,e){for(;t;){if(e(t))return t;t=t.parentElement}return null}var u={passive:!0},b=4,y="x-placement",v="x-out-of-boundaries",h="tippy-iOS",x="tippy-active",g="tippy-popper",w="tippy-tooltip",k="tippy-content",A="tippy-backdrop",E="tippy-arrow",C="tippy-roundarrow",L=".".concat(g),X=".".concat(w),Y=".".concat(k),T=".".concat(A),I=".".concat(E),S=".".concat(C),O=!1;function z(){O||(O=!0,o&&document.body.classList.add(h),window.performance&&document.addEventListener("mousemove",H))}var M=0;function H(){var t=performance.now();t-M<20&&(O=!1,document.removeEventListener("mousemove",H),o||document.body.classList.remove(h)),M=t}function V(){var t=document.activeElement;t&&t.blur&&t._tippy&&t.blur()}var _=Object.keys(p);function N(t,e){return{}.hasOwnProperty.call(t,e)}function P(t,e,a){if(Array.isArray(t)){var r=t[e];return null==r?a:r}return t}function D(t,e){return 0===e?t:function(r){clearTimeout(a),a=setTimeout(function(){t(r)},e)};var a}function q(t,e){return t&&t.modifiers&&t.modifiers[e]}function B(t,e){return t.indexOf(e)>-1}function F(t){return t instanceof Element}function j(t){return!(!t||!N(t,"isVirtual"))||F(t)}function U(t,e){return"function"==typeof t?t.apply(null,e):t}function W(t,e){t.filter(function(t){return"flip"===t.name})[0].enabled=e}function R(){return document.createElement("div")}function J(t,e){t.forEach(function(t){t&&(t.style.transitionDuration="".concat(e,"ms"))})}function G(t,e){t.forEach(function(t){t&&t.setAttribute("data-state",e)})}function K(t,a){var r=e({},a,{content:U(a.content,[t])},a.ignoreAttributes?{}:function(t){return _.reduce(function(e,a){var r=(t.getAttribute("data-tippy-".concat(a))||"").trim();if(!r)return e;if("content"===a)e[a]=r;else try{e[a]=JSON.parse(r)}catch(t){e[a]=r}return e},{})}(t));return(r.arrow||i)&&(r.animateFill=!1),r}function Q(t,e){Object.keys(t).forEach(function(t){if(!N(e,t))throw new Error("[tippy]: `".concat(t,"` is not a valid option"))})}function Z(t,e){t.innerHTML=F(e)?e.innerHTML:e}function $(t,e){if(F(e.content))Z(t,""),t.appendChild(e.content);else if("function"!=typeof e.content){t[e.allowHTML?"innerHTML":"textContent"]=e.content}}function tt(t){return{tooltip:t.querySelector(X),backdrop:t.querySelector(T),content:t.querySelector(Y),arrow:t.querySelector(I)||t.querySelector(S)}}function et(t){t.setAttribute("data-inertia","")}function at(t){var e=R();return"round"===t?(e.className=C,Z(e,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):e.className=E,e}function rt(){var t=R();return t.className=A,t.setAttribute("data-state","hidden"),t}function nt(t,e){t.setAttribute("tabindex","-1"),e.setAttribute("data-interactive","")}function it(t,e,a){var r=i&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";t[e+"EventListener"](r,a)}function ot(t){var e=t.getAttribute(y);return e?e.split("-")[0]:""}function pt(t,e,a){a.split(" ").forEach(function(a){t.classList[e](a+"-theme")})}function st(t,e){var a=R();a.className=g,a.id="tippy-".concat(t),a.style.zIndex=""+e.zIndex,a.style.position="absolute",a.style.top="0",a.style.left="0",e.role&&a.setAttribute("role",e.role);var r=R();r.className=w,r.style.maxWidth=e.maxWidth+("number"==typeof e.maxWidth?"px":""),r.setAttribute("data-size",e.size),r.setAttribute("data-animation",e.animation),r.setAttribute("data-state","hidden"),pt(r,"add",e.theme);var n=R();return n.className=k,n.setAttribute("data-state","hidden"),e.interactive&&nt(a,r),e.arrow&&r.appendChild(at(e.arrowType)),e.animateFill&&(r.appendChild(rt()),r.setAttribute("data-animatefill","")),e.inertia&&et(r),$(n,e),r.appendChild(n),a.appendChild(r),a}function ct(t,e,a){var r=tt(t),n=r.tooltip,i=r.content,o=r.backdrop,p=r.arrow;t.style.zIndex=""+a.zIndex,n.setAttribute("data-size",a.size),n.setAttribute("data-animation",a.animation),n.style.maxWidth=a.maxWidth+("number"==typeof a.maxWidth?"px":""),a.role?t.setAttribute("role",a.role):t.removeAttribute("role"),e.content!==a.content&&$(i,a),!e.animateFill&&a.animateFill?(n.appendChild(rt()),n.setAttribute("data-animatefill","")):e.animateFill&&!a.animateFill&&(n.removeChild(o),n.removeAttribute("data-animatefill")),!e.arrow&&a.arrow?n.appendChild(at(a.arrowType)):e.arrow&&!a.arrow&&n.removeChild(p),e.arrow&&a.arrow&&e.arrowType!==a.arrowType&&n.replaceChild(at(a.arrowType),p),!e.interactive&&a.interactive?nt(t,n):e.interactive&&!a.interactive&&function(t,e){t.removeAttribute("tabindex"),e.removeAttribute("data-interactive")}(t,n),!e.inertia&&a.inertia?et(n):e.inertia&&!a.inertia&&function(t){t.removeAttribute("data-inertia")}(n),e.theme!==a.theme&&(pt(n,"remove",e.theme),pt(n,"add",a.theme))}var lt=1,dt=[];function ft(a,r){var i,o,c,h,g,w=K(a,r);if(!w.multiple&&a._tippy)return null;var k,A,E,C,X,Y=!1,T=!1,I=!1,S=!1,z=[],M=D(ht,w.interactiveDebounce),H=lt++,V=st(H,w),_=tt(V),j={id:H,reference:a,popper:V,popperChildren:_,popperInstance:null,props:w,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:Tt,set:It,setContent:function(t){It({content:t})},show:St,hide:Ot,enable:function(){j.state.isEnabled=!0},disable:function(){j.state.isEnabled=!1},destroy:function(t){if(j.state.isDestroyed)return;T=!0,j.state.isMounted&&Ot(0);bt(),delete a._tippy;var e=j.props.target;e&&t&&F(a)&&d(a.querySelectorAll(e)).forEach(function(t){t._tippy&&t._tippy.destroy()});j.popperInstance&&j.popperInstance.destroy();T=!1,j.state.isDestroyed=!0}};return a._tippy=j,V._tippy=j,ut(),w.lazy||Ct(),w.showOnInit&&Lt(),!w.a11y||w.target||(!F(X=$())||l.call(X,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")&&!X.hasAttribute("disabled"))||$().setAttribute("tabindex","0"),V.addEventListener("mouseenter",function(t){j.props.interactive&&j.state.isVisible&&"mouseenter"===i&&Lt(t,!0)}),V.addEventListener("mouseleave",function(){j.props.interactive&&"mouseenter"===i&&document.addEventListener("mousemove",M)}),j;function R(){document.removeEventListener("mousemove",yt)}function Z(){document.body.removeEventListener("mouseleave",Xt),document.removeEventListener("mousemove",M),dt=dt.filter(function(t){return t!==M})}function $(){return j.props.triggerTarget||a}function et(){document.addEventListener("click",Yt,!0)}function at(){document.removeEventListener("click",Yt,!0)}function rt(){return[j.popperChildren.tooltip,j.popperChildren.backdrop,j.popperChildren.content]}function nt(){var t=j.props.followCursor;return t&&"focus"!==i||O&&"initial"===t}function pt(t,e){var a=j.popperChildren.tooltip;function r(t){t.target===a&&(it(a,"remove",r),e())}if(0===t)return e();it(a,"remove",E),it(a,"add",r),E=r}function mt(t,e){var a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];$().addEventListener(t,e,a),z.push({eventType:t,handler:e,options:a})}function ut(){j.props.touchHold&&!j.props.target&&(mt("touchstart",vt,u),mt("touchend",xt,u)),j.props.trigger.trim().split(" ").forEach(function(t){if("manual"!==t)if(j.props.target)switch(t){case"mouseenter":mt("mouseover",wt),mt("mouseout",kt);break;case"focus":mt("focusin",wt),mt("focusout",kt);break;case"click":mt(t,wt)}else switch(mt(t,vt),t){case"mouseenter":mt("mouseleave",xt);break;case"focus":mt(n?"focusout":"blur",gt)}})}function bt(){z.forEach(function(t){var e=t.eventType,a=t.handler,r=t.options;$().removeEventListener(e,a,r)}),z=[]}function yt(t){var r=o=t,n=r.clientX,i=r.clientY;if(C){var p=m(t.target,function(t){return t===a}),s=a.getBoundingClientRect(),c=j.props.followCursor,l="horizontal"===c,d="vertical"===c,f=B(["top","bottom"],ot(V)),u=V.getAttribute(y),b=!!u&&!!u.split("-")[1],v=f?V.offsetWidth:V.offsetHeight,h=v/2,x=f?0:b?v:h,g=f?b?v:h:0;!p&&j.props.interactive||(j.popperInstance.reference=e({},j.popperInstance.reference,{referenceNode:a,clientWidth:0,clientHeight:0,getBoundingClientRect:function(){return{width:f?v:0,height:f?0:v,top:(l?s.top:i)-x,bottom:(l?s.bottom:i)+x,left:(d?s.left:n)-g,right:(d?s.right:n)+g}}}),j.popperInstance.update()),"initial"===c&&j.state.isVisible&&R()}}function vt(t){j.state.isEnabled&&!At(t)&&(j.state.isVisible||(i=t.type,t instanceof MouseEvent&&(o=t,dt.forEach(function(e){return e(t)}))),"click"===t.type&&!1!==j.props.hideOnClick&&j.state.isVisible?Xt():Lt(t))}function ht(t){var e=f(t.target,L)===V,r=m(t.target,function(t){return t===a});e||r||function(t,e,a,r){if(!t)return!0;var n=a.clientX,i=a.clientY,o=r.interactiveBorder,p=r.distance,s=e.top-i>("top"===t?o+p:o),c=i-e.bottom>("bottom"===t?o+p:o),l=e.left-n>("left"===t?o+p:o),d=n-e.right>("right"===t?o+p:o);return s||c||l||d}(ot(V),V.getBoundingClientRect(),t,j.props)&&(Z(),Xt())}function xt(t){if(!At(t))return j.props.interactive?(document.body.addEventListener("mouseleave",Xt),document.addEventListener("mousemove",M),void dt.push(M)):void Xt()}function gt(t){t.target===$()&&(j.props.interactive&&t.relatedTarget&&V.contains(t.relatedTarget)||Xt())}function wt(t){f(t.target,j.props.target)&&Lt(t)}function kt(t){f(t.target,j.props.target)&&Xt()}function At(t){var e="ontouchstart"in window,a=B(t.type,"touch"),r=j.props.touchHold;return e&&O&&r&&!a||O&&!r&&a}function Et(){!S&&A&&(S=!0,function(t){t.offsetHeight}(V),A())}function Ct(){var r=j.props.popperOptions,n=j.popperChildren,i=n.tooltip,o=n.arrow,p=q(r,"preventOverflow");function s(t){j.props.flip&&!j.props.flipOnUpdate&&(t.flipped&&(j.popperInstance.options.placement=t.placement),W(j.popperInstance.modifiers,!1)),i.setAttribute(y,t.placement),!1!==t.attributes[v]?i.setAttribute(v,""):i.removeAttribute(v),k&&k!==t.placement&&I&&(i.style.transition="none",requestAnimationFrame(function(){i.style.transition=""})),k=t.placement,I=j.state.isVisible;var a=ot(V),r=i.style;r.top=r.bottom=r.left=r.right="",r[a]=-(j.props.distance-10)+"px";var n=p&&void 0!==p.padding?p.padding:b,o="number"==typeof n,s=e({top:o?n:n.top,bottom:o?n:n.bottom,left:o?n:n.left,right:o?n:n.right},!o&&n);s[a]=o?n+j.props.distance:(n[a]||0)+j.props.distance,j.popperInstance.modifiers.filter(function(t){return"preventOverflow"===t.name})[0].padding=s,C=s}var c=e({eventsEnabled:!1,placement:j.props.placement},r,{modifiers:e({},r?r.modifiers:{},{preventOverflow:e({boundariesElement:j.props.boundary,padding:b},p),arrow:e({element:o,enabled:!!o},q(r,"arrow")),flip:e({enabled:j.props.flip,padding:j.props.distance+b,behavior:j.props.flipBehavior},q(r,"flip")),offset:e({offset:j.props.offset},q(r,"offset"))}),onCreate:function(t){s(t),Et(),r&&r.onCreate&&r.onCreate(t)},onUpdate:function(t){s(t),Et(),r&&r.onUpdate&&r.onUpdate(t)}});j.popperInstance=new t(a,V,c)}function Lt(t,a){if(Tt(),!j.state.isVisible){if(j.props.target)return function(t){if(t){var a=f(t.target,j.props.target);a&&!a._tippy&&ft(a,e({},j.props,{content:U(r.content,[a]),appendTo:r.appendTo,target:"",showOnInit:!0}))}}(t);if(Y=!0,t&&!a&&j.props.onTrigger(j,t),j.props.wait)return j.props.wait(j,t);nt()&&!j.state.isMounted&&(j.popperInstance||Ct(),document.addEventListener("mousemove",yt)),et();var n=P(j.props.delay,0,p.delay);n?c=setTimeout(function(){St()},n):St()}}function Xt(){if(Tt(),!j.state.isVisible)return R(),void at();Y=!1;var t=P(j.props.delay,1,p.delay);t?h=setTimeout(function(){j.state.isVisible&&Ot()},t):g=requestAnimationFrame(function(){Ot()})}function Yt(t){if(!j.props.interactive||!V.contains(t.target)){if($().contains(t.target)){if(O)return;if(j.state.isVisible&&B(j.props.trigger,"click"))return}!0===j.props.hideOnClick&&(Tt(),Ot())}}function Tt(){clearTimeout(c),clearTimeout(h),cancelAnimationFrame(g)}function It(t){Q(t=t||{},p),bt();var r=j.props,n=K(a,e({},j.props,{},t,{ignoreAttributes:!0}));n.ignoreAttributes=N(t,"ignoreAttributes")?t.ignoreAttributes||!1:r.ignoreAttributes,j.props=n,ut(),Z(),M=D(ht,n.interactiveDebounce),ct(V,r,n),j.popperChildren=tt(V),j.popperInstance&&(s.some(function(e){return N(t,e)&&t[e]!==r[e]})?(j.popperInstance.destroy(),Ct(),j.state.isVisible&&j.popperInstance.enableEventListeners(),j.props.followCursor&&o&&yt(o)):j.popperInstance.update())}function St(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:P(j.props.duration,0,p.duration[1]);if(!j.state.isDestroyed&&j.state.isEnabled&&(!O||j.props.touch)&&!$().hasAttribute("disabled")&&!1!==j.props.onShow(j)){et(),V.style.visibility="visible",j.state.isVisible=!0,j.props.interactive&&$().classList.add(x);var e=rt();J(e.concat(V),0),A=function(){if(j.state.isVisible){var r=nt();r&&o?yt(o):r||j.popperInstance.update(),j.popperChildren.backdrop&&(j.popperChildren.content.style.transitionDelay=Math.round(t/12)+"ms"),j.props.sticky&&function(){J([V],n?0:j.props.updateDuration);var t=a.getBoundingClientRect();!function e(){var r=a.getBoundingClientRect();t.top===r.top&&t.right===r.right&&t.bottom===r.bottom&&t.left===r.left||j.popperInstance.scheduleUpdate(),t=r,j.state.isMounted&&requestAnimationFrame(e)}()}(),J([V],j.props.updateDuration),J(e,t),G(e,"visible"),function(t,e){pt(t,e)}(t,function(){j.props.aria&&$().setAttribute("aria-".concat(j.props.aria),V.id),j.props.onShown(j),j.state.isShown=!0})}},function(){S=!1;var t=nt();j.popperInstance?(W(j.popperInstance.modifiers,j.props.flip),t||(j.popperInstance.reference=a,j.popperInstance.enableEventListeners()),j.popperInstance.scheduleUpdate()):(Ct(),t||j.popperInstance.enableEventListeners());var e=j.props.appendTo,r="parent"===e?a.parentNode:U(e,[a]);r.contains(V)||(r.appendChild(V),j.props.onMount(j),j.state.isMounted=!0)}()}}function Ot(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:P(j.props.duration,1,p.duration[1]);if(!j.state.isDestroyed&&(j.state.isEnabled||T)&&(!1!==j.props.onHide(j)||T)){at(),V.style.visibility="hidden",j.state.isVisible=!1,j.state.isShown=!1,I=!1,j.props.interactive&&$().classList.remove(x);var e=rt();J(e,t),G(e,"hidden"),function(t,e){pt(t,function(){!j.state.isVisible&&V.parentNode&&V.parentNode.contains(V)&&e()})}(t,function(){Y||R(),j.props.aria&&$().removeAttribute("aria-".concat(j.props.aria)),j.popperInstance.disableEventListeners(),j.popperInstance.options.placement=j.props.placement,V.parentNode.removeChild(V),j.props.onHidden(j),j.state.isMounted=!1})}}}var mt=!1;function ut(t,a){Q(a||{},p),mt||(document.addEventListener("touchstart",z,u),window.addEventListener("blur",V),mt=!0);var r,n=e({},p,{},a);r=t,"[object Object]"!=={}.toString.call(r)||r.addEventListener||function(t){var e={isVirtual:!0,attributes:t.attributes||{},contains:function(){},setAttribute:function(e,a){t.attributes[e]=a},getAttribute:function(e){return t.attributes[e]},removeAttribute:function(e){delete t.attributes[e]},hasAttribute:function(e){return e in t.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(e){t.classList.classNames[e]=!0},remove:function(e){delete t.classList.classNames[e]},contains:function(e){return e in t.classList.classNames}}};for(var a in e)t[a]=e[a]}(t);var i=function(t){if(j(t))return[t];if(t instanceof NodeList)return d(t);if(Array.isArray(t))return t;try{return d(document.querySelectorAll(t))}catch(t){return[]}}(t).reduce(function(t,e){var a=e&&ft(e,n);return a&&t.push(a),t},[]);return j(t)?i[0]:i}return ut.version="4.3.5",ut.defaults=p,ut.setDefaults=function(t){Object.keys(t).forEach(function(e){p[e]=t[e]})},ut.hideAll=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.exclude,a=t.duration;d(document.querySelectorAll(L)).forEach(function(t){var r,n=t._tippy;if(n){var i=!1;e&&(i=(r=e)._tippy&&!l.call(r,L)?n.reference===e:t===e.popper),i||n.hide(a)}})},ut.group=function(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=a.delay,n=void 0===r?t[0].props.delay:r,i=a.duration,o=void 0===i?0:i,p=!1;function s(t){p=t,f()}function c(e){e._originalProps.onShow(e),t.forEach(function(t){t.set({duration:o}),t.state.isVisible&&t.hide()}),s(!0)}function l(t){t._originalProps.onHide(t),s(!1)}function d(t){t._originalProps.onShown(t),t.set({duration:t._originalProps.duration})}function f(){t.forEach(function(t){t.set({onShow:c,onShown:d,onHide:l,delay:p?[0,Array.isArray(n)?n[1]:n]:n,duration:p?o:t._originalProps.duration})})}t.forEach(function(t){t._originalProps?t.set(t._originalProps):t._originalProps=e({},t.props)}),f()},a&&setTimeout(function(){d(document.querySelectorAll("[data-tippy]")).forEach(function(t){var e=t.getAttribute("data-tippy");e&&ut(t,{content:e})})}),function(t){if(a){var e=document.createElement("style");e.type="text/css",e.textContent=t,e.setAttribute("data-tippy-stylesheet","");var r=document.head,n=r.querySelector("style,link");n?r.insertBefore(e,n):r.appendChild(e)}}('.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px);transform:perspective(700px) translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(60deg);transform:perspective(700px) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px);transform:perspective(700px) translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(-60deg);transform:perspective(700px) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px);transform:perspective(700px) translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(-60deg);transform:perspective(700px) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px);transform:perspective(700px) translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(60deg);transform:perspective(700px) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:initial}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] .tippy-roundarrow path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),ut});
//# sourceMappingURL=index.all.min.js.map

////////// start of closureStart.js
////////// Wraps all the Netflix code

(function(){

	if (window == top) { // Netflix Window


////////// end of closureStart.js


window.__IS_YOUTUBE = true;
/*
 * JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 * MODDED BY MEGADAVE AND TURBOG
 */

/* global define */

/* eslint-disable strict */

let md5 = function() {

    'use strict'
  
    /**
     * Add integers, wrapping at 2^32.
     * This uses 16-bit operations internally to work around bugs in interpreters.
     *
     * @param {number} x First integer
     * @param {number} y Second integer
     * @returns {number} Sum
     */
    function safeAdd(x, y) {
      var lsw = (x & 0xffff) + (y & 0xffff)
      var msw = (x >> 16) + (y >> 16) + (lsw >> 16)
      return (msw << 16) | (lsw & 0xffff)
    }
  
    /**
     * Bitwise rotate a 32-bit number to the left.
     *
     * @param {number} num 32-bit number
     * @param {number} cnt Rotation count
     * @returns {number} Rotated number
     */
    function bitRotateLeft(num, cnt) {
      return (num << cnt) | (num >>> (32 - cnt))
    }
  
    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} q q
     * @param {number} a a
     * @param {number} b b
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)
    }
    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} a a
     * @param {number} b b
     * @param {number} c c
     * @param {number} d d
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn((b & c) | (~b & d), a, b, x, s, t)
    }
    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} a a
     * @param {number} b b
     * @param {number} c c
     * @param {number} d d
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn((b & d) | (c & ~d), a, b, x, s, t)
    }
    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} a a
     * @param {number} b b
     * @param {number} c c
     * @param {number} d d
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t)
    }
    /**
     * Basic operation the algorithm uses.
     *
     * @param {number} a a
     * @param {number} b b
     * @param {number} c c
     * @param {number} d d
     * @param {number} x x
     * @param {number} s s
     * @param {number} t t
     * @returns {number} Result
     */
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t)
    }
  
    /**
     * Calculate the MD5 of an array of little-endian words, and a bit length.
     *
     * @param {Array} x Array of little-endian words
     * @param {number} len Bit length
     * @returns {Array<number>} MD5 Array
     */
    function binlMD5(x, len) {
      /* append padding */
      x[len >> 5] |= 0x80 << len % 32
      x[(((len + 64) >>> 9) << 4) + 14] = len
  
      var i
      var olda
      var oldb
      var oldc
      var oldd
      var a = 1732584193
      var b = -271733879
      var c = -1732584194
      var d = 271733878
  
      for (i = 0; i < x.length; i += 16) {
        olda = a
        oldb = b
        oldc = c
        oldd = d
  
        a = md5ff(a, b, c, d, x[i], 7, -680876936)
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586)
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819)
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330)
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897)
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426)
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341)
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983)
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416)
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417)
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063)
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162)
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682)
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101)
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290)
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329)
  
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510)
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632)
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713)
        b = md5gg(b, c, d, a, x[i], 20, -373897302)
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691)
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083)
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335)
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848)
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438)
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690)
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961)
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501)
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467)
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784)
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473)
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734)
  
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558)
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463)
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562)
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556)
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060)
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353)
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632)
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640)
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174)
        d = md5hh(d, a, b, c, x[i], 11, -358537222)
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979)
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189)
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487)
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835)
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520)
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651)
  
        a = md5ii(a, b, c, d, x[i], 6, -198630844)
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415)
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905)
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055)
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571)
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606)
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523)
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799)
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359)
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744)
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380)
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649)
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070)
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379)
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259)
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551)
  
        a = safeAdd(a, olda)
        b = safeAdd(b, oldb)
        c = safeAdd(c, oldc)
        d = safeAdd(d, oldd)
      }
      return [a, b, c, d]
    }
  
    /**
     * Convert an array of little-endian words to a string
     *
     * @param {Array<number>} input MD5 Array
     * @returns {string} MD5 string
     */
    function binl2rstr(input) {
      var i
      var output = ''
      var length32 = input.length * 32
      for (i = 0; i < length32; i += 8) {
        output += String.fromCharCode((input[i >> 5] >>> i % 32) & 0xff)
      }
      return output
    }
  
    /**
     * Convert a raw string to an array of little-endian words
     * Characters >255 have their high-byte silently ignored.
     *
     * @param {string} input Raw input string
     * @returns {Array<number>} Array of little-endian words
     */
    function rstr2binl(input) {
      var i
      var output = []
      output[(input.length >> 2) - 1] = undefined
      for (i = 0; i < output.length; i += 1) {
        output[i] = 0
      }
      var length8 = input.length * 8
      for (i = 0; i < length8; i += 8) {
        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << i % 32
      }
      return output
    }
  
    /**
     * Calculate the MD5 of a raw string
     *
     * @param {string} s Input string
     * @returns {string} Raw MD5 string
     */
    function rstrMD5(s) {
      return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))
    }
  
    /**
     * Calculates the HMAC-MD5 of a key and some data (raw strings)
     *
     * @param {string} key HMAC key
     * @param {string} data Raw input string
     * @returns {string} Raw MD5 string
     */
    function rstrHMACMD5(key, data) {
      var i
      var bkey = rstr2binl(key)
      var ipad = []
      var opad = []
      var hash
      ipad[15] = opad[15] = undefined
      if (bkey.length > 16) {
        bkey = binlMD5(bkey, key.length * 8)
      }
      for (i = 0; i < 16; i += 1) {
        ipad[i] = bkey[i] ^ 0x36363636
        opad[i] = bkey[i] ^ 0x5c5c5c5c
      }
      hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)
      return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))
    }
  
    /**
     * Convert a raw string to a hex string
     *
     * @param {string} input Raw input string
     * @returns {string} Hex encoded string
     */
    function rstr2hex(input) {
      var hexTab = '0123456789abcdef'
      var output = ''
      var x
      var i
      for (i = 0; i < input.length; i += 1) {
        x = input.charCodeAt(i)
        output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f)
      }
      return output
    }
  
    /**
     * Encode a string as UTF-8
     *
     * @param {string} input Input string
     * @returns {string} UTF8 string
     */
    function str2rstrUTF8(input) {
      return unescape(encodeURIComponent(input))
    }
  
    /**
     * Encodes input string as raw MD5 string
     *
     * @param {string} s Input string
     * @returns {string} Raw MD5 string
     */
    function rawMD5(s) {
      return rstrMD5(str2rstrUTF8(s))
    }
    /**
     * Encodes input string as Hex encoded string
     *
     * @param {string} s Input string
     * @returns {string} Hex encoded string
     */
    function hexMD5(s) {
      return rstr2hex(rawMD5(s))
    }
    /**
     * Calculates the raw HMAC-MD5 for the given key and data
     *
     * @param {string} k HMAC key
     * @param {string} d Input string
     * @returns {string} Raw MD5 string
     */
    function rawHMACMD5(k, d) {
      return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))
    }
    /**
     * Calculates the Hex encoded HMAC-MD5 for the given key and data
     *
     * @param {string} k HMAC key
     * @param {string} d Input string
     * @returns {string} Raw MD5 string
     */
    function hexHMACMD5(k, d) {
      return rstr2hex(rawHMACMD5(k, d))
    }
  
    /**
     * Calculates MD5 value for a given string.
     * If a key is provided, calculates the HMAC-MD5 value.
     * Returns a Hex encoded string unless the raw argument is given.
     *
     * @param {string} string Input string
     * @param {string} [key] HMAC key
     * @param {boolean} [raw] Raw output switch
     * @returns {string} MD5 output
     */
    function md5(string, key, raw) {
      if (!key) {
        if (!raw) {
          return hexMD5(string)
        }
        return rawMD5(string)
      }
      if (!raw) {
        return hexHMACMD5(key, string)
      }
      return rawHMACMD5(key, string)
    }

    return md5;
  
}();
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Subtitle"] = factory();
	else
		root["Subtitle"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toMS;
/**
 * Return the given SRT timestamp as milleseconds.
 * @param {string|number} timestamp
 * @returns {number} milliseconds
 */

function toMS(timestamp) {
  if (!isNaN(timestamp)) {
    return timestamp;
  }

  var match = timestamp.match(/^(?:(\d{2,}):)?(\d{2}):(\d{2})[,.](\d{3})$/);

  if (!match) {
    throw new Error('Invalid SRT or VTT time format: "' + timestamp + '"');
  }

  var hours = match[1] ? parseInt(match[1], 10) * 3600000 : 0;
  var minutes = parseInt(match[2], 10) * 60000;
  var seconds = parseInt(match[3], 10) * 1000;
  var milliseconds = parseInt(match[4], 10);

  return hours + minutes + seconds + milliseconds;
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toSrtTime;

var _zeroFill = __webpack_require__(2);

var _zeroFill2 = _interopRequireDefault(_zeroFill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Return the given milliseconds as SRT timestamp.
 * @param timestamp
 * @returns {string}
 */

function toSrtTime(timestamp) {
  if (isNaN(timestamp)) {
    return timestamp;
  }

  var date = new Date(0, 0, 0, 0, 0, 0, timestamp);

  var hours = (0, _zeroFill2.default)(2, date.getHours());
  var minutes = (0, _zeroFill2.default)(2, date.getMinutes());
  var seconds = (0, _zeroFill2.default)(2, date.getSeconds());
  var ms = timestamp - (hours * 3600000 + minutes * 60000 + seconds * 1000);

  return hours + ':' + minutes + ':' + seconds + ',' + (0, _zeroFill2.default)(3, ms);
} /**
   * Module dependencies.
   */

/***/ }),
/* 2 */
/***/ (function(module, exports) {

/**
 * Given a number, return a zero-filled string.
 * From http://stackoverflow.com/questions/1267283/
 * @param  {number} width
 * @param  {number} number
 * @return {string}
 */
module.exports = function zeroFill (width, number, pad) {
  if (number === undefined) {
    return function (number, pad) {
      return zeroFill(width, number, pad)
    }
  }
  if (pad === undefined) pad = '0'
  width -= number.toString().length
  if (width > 0) return new Array(width + (/\./.test(number) ? 2 : 1)).join(pad) + number
  return number + ''
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = toVttTime;

var _zeroFill = __webpack_require__(2);

var _zeroFill2 = _interopRequireDefault(_zeroFill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Return the given milliseconds as WebVTT timestamp.
 * @param timestamp
 * @returns {string}
 */

function toVttTime(timestamp) {
  if (isNaN(timestamp)) {
    return timestamp;
  }

  var date = new Date(0, 0, 0, 0, 0, 0, timestamp);

  var hours = (0, _zeroFill2.default)(2, date.getHours());
  var minutes = (0, _zeroFill2.default)(2, date.getMinutes());
  var seconds = (0, _zeroFill2.default)(2, date.getSeconds());
  var ms = timestamp - (hours * 3600000 + minutes * 60000 + seconds * 1000);

  return hours + ':' + minutes + ':' + seconds + '.' + (0, _zeroFill2.default)(3, ms);
} /**
   * Module dependencies.
   */

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseTimestamps;

var _toMS = __webpack_require__(0);

var _toMS2 = _interopRequireDefault(_toMS);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Timestamp regex
 * @type {RegExp}
 */

var RE = /^((?:\d{2,}:)?\d{2}:\d{2}[,.]\d{3}) --> ((?:\d{2,}:)?\d{2}:\d{2}[,.]\d{3})(?: (.*))?$/;

/**
 * parseTimestamps
 * @param value
 * @returns {{start: Number, end: Number}}
 */

/**
 * Module dependencies.
 */

function parseTimestamps(value) {
  var match = RE.exec(value);
  var cue = {
    start: (0, _toMS2.default)(match[1]),
    end: (0, _toMS2.default)(match[2])
  };
  if (match[3]) {
    cue.settings = match[3];
  }
  return cue;
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toMS = __webpack_require__(0);

Object.defineProperty(exports, 'toMS', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_toMS).default;
  }
});

var _toSrtTime = __webpack_require__(1);

Object.defineProperty(exports, 'toSrtTime', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_toSrtTime).default;
  }
});

var _toVttTime = __webpack_require__(3);

Object.defineProperty(exports, 'toVttTime', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_toVttTime).default;
  }
});

var _parse = __webpack_require__(6);

Object.defineProperty(exports, 'parse', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_parse).default;
  }
});

var _stringify = __webpack_require__(7);

Object.defineProperty(exports, 'stringify', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_stringify).default;
  }
});

var _stringifyVtt = __webpack_require__(8);

Object.defineProperty(exports, 'stringifyVtt', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_stringifyVtt).default;
  }
});

var _resync = __webpack_require__(9);

Object.defineProperty(exports, 'resync', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_resync).default;
  }
});

var _parseTimestamps = __webpack_require__(4);

Object.defineProperty(exports, 'parseTimestamps', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_parseTimestamps).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parse;

var _parseTimestamps = __webpack_require__(4);

var _parseTimestamps2 = _interopRequireDefault(_parseTimestamps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parse a SRT or WebVTT string.
 * @param {String} srtOrVtt
 * @return {Array} subtitles
 */

function parse(srtOrVtt, options) {
  if (!srtOrVtt) return [];
  options = options || {
    skipInvalidCaptions: false,
    errorHandler: null,
    skipContiguousErrors: true
  };

  var source = srtOrVtt.trim().concat('\n').replace(/\r\n/g, '\n').replace(/\n{3,}/g, '\n\n').replace(/^WEBVTT.*\n{2}/, '').split('\n');

  var lastWasSuccessful = true;

  return source.reduce(function (captions, row, index) {
    var caption = captions[captions.length - 1];

    try {
      if (!caption.index) {
        if (/^\d+$/.test(row)) {
          caption.index = parseInt(row, 10);
          return captions;
        }
      }

      if (!caption.hasOwnProperty('start')) {
        Object.assign(caption, (0, _parseTimestamps2.default)(row));
        return captions;
      }

      if (row === '') {
        delete caption.index;
        if (index !== source.length - 1) {
          captions.push({});
        }
      } else {
        caption.text = caption.text ? caption.text + '\n' + row : row;
      }

      lastWasSuccessful = true;
    } catch (error) {
      if (!options.skipInvalidCaptions) {
        throw error;
      }

      if (lastWasSuccessful || !options.skipContiguousErrors) {
        if (typeof options.errorHandler === 'function') {
          options.errorHandler({ index: index, row: row, error: error });
        }
      }

      lastWasSuccessful = false;

      captions[captions.length - 1] = {};
    }

    return captions;
  }, [{}]);
} /**
   * Module dependencies.
   */

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = stringify;

var _toSrtTime = __webpack_require__(1);

var _toSrtTime2 = _interopRequireDefault(_toSrtTime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Stringify the given array of captions.
 * @param {Array} captions
 * @return {String} srt
 */

function stringify(captions) {
  return captions.map(function (caption, index) {
    return (index > 0 ? '\n' : '') + [index + 1, (0, _toSrtTime2.default)(caption.start) + ' --> ' + (0, _toSrtTime2.default)(caption.end), caption.text].join('\n');
  }).join('\n') + '\n';
} /**
   * Module dependencies.
   */

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = stringifyVtt;

var _toVttTime = __webpack_require__(3);

var _toVttTime2 = _interopRequireDefault(_toVttTime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Stringify the given array of captions to WebVTT format.
 * @param {Array} captions
 * @return {String} webVtt
 */

function stringifyVtt(captions) {
  return 'WEBVTT\n\n' + captions.map(function (caption, index) {
    return (index > 0 ? '\n' : '') + [index + 1, (0, _toVttTime2.default)(caption.start) + ' --> ' + (0, _toVttTime2.default)(caption.end) + (caption.settings ? ' ' + caption.settings : ''), caption.text].join('\n');
  }).join('\n') + '\n';
} /**
   * Module dependencies.
   */

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resync;

var _toMS = __webpack_require__(0);

var _toMS2 = _interopRequireDefault(_toMS);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Resync the given subtitles.
 * @param captions
 * @param time
 * @returns {Array|*}
 */

function resync(captions, time) {
  return captions.map(function (caption) {
    var start = (0, _toMS2.default)(caption.start) + time;
    var end = (0, _toMS2.default)(caption.end) + time;

    return Object.assign({}, caption, {
      start: start,
      end: end
    });
  });
} /**
   * Module dependencies.
   */

/***/ })
/******/ ]);
});
// public

var util = {
    dev: true, // development
    log: function(message) {
        if (util.dev) {
            console.log(...arguments);
        }
    },
    
    error: function(messageString, showUser, additionalTip) {
    	if (util.dev) {
            console.error(messageString);
        }

        CF_RPC("log_error", messageString, function(){});

        if(showUser) {
            messageString = messageString + " " + additionalTip;

            var userMessage =lln_i18n.errorApology.replace('<text>', messageString);

            // Alert the user
            alert(userMessage);

            // // same but with <br> instead of \n
            // var htmlMessage = '<p>' + lln_i18n.errorApology.replace('<text>', messageString) + '</p>';

            // $( "#errorList" ).append(`<li>${htmlMessage}</li>`);
            // setMan.setError("util.log error", true);
        }
    },

    userError: function(userMessage) {

        alert(lln_i18n.errorApology.replace('<text>', userMessage) + '\n');
    },

    fuck: function(developerMessage) {
        if (util.dev) {
            console.error(developerMessage);
            alert("FUCK: " + developerMessage);
        }

        CF_RPC("log_error", developerMessage, function(){});
    },

    miniFuck: function(message) {
        // 200k erros are two much.
        // 20 would be ok.
        // 200,000 / 20 = 10,000
        if(Math.random()*10000 > 9999) { this.fuck(message); }
    }
};

// window.util = util;

function checkTypes(arrayOfValues, typeString) {

    if(util.dev !== true) { return; }
    
    // Note: if 'arguments' are passed to this function, it's an array-like object, not an actual array.

    var typeList = typeString.split(",");

    if(arrayOfValues.length !== typeList.length) {
        throw `CHECKTYPES: number of elements in arrayOfValues does not match up with number of elements in typeString.`;
    }

    // for each value to be checked
    for(value of arrayOfValues) {

        if(value === undefined) {
            throw `CHECKTYPES: One of the arrayOfValues is undefined: ${JSON.stringify(arrayOfValues)}`;
        }

        let allowedTypes = typeList.shift();
        let allowedTypesList = allowedTypes.split('|');

        let valueValid = false;

        for(let typeToTry of allowedTypesList) {

            if(!["string", "boolean", "number", "function", "object", "array", "false", "null", "any"].includes(typeToTry)) {
                throw `CHECKTYPES: Bad typeString element (${typeToTry}) in the typeString (${typeString}).`;
            }

            if(    typeToTry === "any"
                || typeToTry === "string" && typeof value === "string"
                || typeToTry === "boolean" && typeof value === "boolean"
                || typeToTry === "number" && typeof value === "number"
                || typeToTry === "function" && typeof value === "function"
                || typeToTry === "object" && value && typeof value === 'object' && value.constructor === Object
                || typeToTry === "array" && Array.isArray(value)
                || typeToTry === "false" && value === false
                || typeToTry === "null" && value === null
              )
            {
                valueValid = true;
                break;
            }
        }
        
        if(!valueValid) {
            throw `CHECKTYPES: expected '${allowedTypes}', got a ${typeof value}: ${value}`;
        }
    }

    if(typeList.length > 0) {
        throw `CHECKTYPES: Too many elements in typeString.`;
    }
}

// Cloud Function RPC
// fixme: make this stuff private, don't want sticky fingers all over this.
var CF_RPC_References = {};

var CF_RPC_LastIndex = 0;

var CF_RPC_RandString = Math.random().toString(36).substring(2, 15);

function CF_RPC(functionName, data, callback) {

    checkTypes(arguments, "string,any,function");

  CF_RPC_LastIndex += 1;

  var callIdentifier = CF_RPC_RandString + '_' + CF_RPC_LastIndex;

  CF_RPC_References[callIdentifier] = { functionName: functionName, callback: callback, sendTime: Date.now() };

  parent.postMessage({topic:"bg_cloudFunctionRPC_request", functionName: functionName, data: data, callIdentifier: callIdentifier}, '*');

  util.log(`CF_RPC: Message sent:`, functionName, data);

}

// Same as above, with a passthrough
function CF_RPC_PT(functionName, data, passthrough, callback) {

  checkTypes(arguments, "string,any,string,function");

  CF_RPC_LastIndex += 1;

  var callIdentifier = CF_RPC_RandString + '_' + CF_RPC_LastIndex;

  CF_RPC_References[callIdentifier] = { functionName: functionName, callback: callback, passthrough: passthrough, sendTime: Date.now() };

  parent.postMessage({topic:"bg_cloudFunctionRPC_request", functionName: functionName, data: data, callIdentifier: callIdentifier}, '*');

  util.log(`CF_RPC: Message sent:`, functionName, data);

}

window.addEventListener('message', function(event) {

  if(!event.data) { return; }

  if(!event.data.topic) { return; }
  
  if(event.data.topic !== "ps_cloudFunctionRPC_response") { return; }

  if(! (event.data.callIdentifier in CF_RPC_References)) { util.log("CF_RPC: MAJOR Problem here Doc."); return; }

  util.log(`CF_RPC: Message recieved, ${CF_RPC_References[event.data.callIdentifier].functionName} (${Date.now() - CF_RPC_References[event.data.callIdentifier].sendTime}ms):`, event.data.result);

  CF_RPC_References[event.data.callIdentifier].callback(event.data.result, CF_RPC_References[event.data.callIdentifier].passthrough );

  delete CF_RPC_References[event.data.callIdentifier];

});
/*
      'success': result => { 
        sendToContent({ topic: "ps_cloudFunctionRPC_response", 
                        result: { status: "success", result: result}, 
                        callIdentifier: request.callIdentifier });
*/

if(util.dev) {
    window.CF_RPC = CF_RPC;
    window.CF_RPC_PT = CF_RPC_PT;
}

 function david_mutex() {

    var obj = {};

    var _locked = false;

    var queue = [];

    obj.acquire = function(callback) {

        if(!_locked) {
            _locked = true;
            callback();
        }
        else {
            queue.push(callback);
        }
    }

    obj.release = function() {

        if(queue.length > 0) {
            // console.log("MUTEX: unshifting.")
            // Do not run immeadiatly
            setTimeout(queue.shift(), 0);
        }
        else if(queue.length === 0) {
            _locked = false;
        }
        
    }

    return obj;
};

/*
function david_mutex_test() {

    var mm = david_mutex();

    var test_i = 0;

    function test() { 
        test_i +=1;
        var this_test_i = test_i;
        console.log(`TEST ${this_test_i} START`); 
        setTimeout(function(){ console.log(`TEST ${this_test_i} END`); mm.release(); }, 200);
    }

    mm.acquire(test);
    mm.acquire(test);
    mm.acquire(test);
    mm.acquire(test);
    mm.acquire(test);
    mm.acquire(test);
    mm.acquire(test);
    mm.acquire(test);
    mm.acquire(test);
    mm.acquire(test);
    setTimeout(function(){ mm.acquire(test); }, 50);
    setTimeout(function(){ mm.acquire(test); }, 100);
    setTimeout(function(){ mm.acquire(test); }, 300);
    setTimeout(function(){ mm.acquire(test); }, 700);
    setTimeout(function(){ mm.acquire(test); }, 1000);
}
*/

var chromeStorageFuckedMessageShown = false;

function chromeStorageGet(data, callback) {

    CF_RPC("chromeStorageGet", data, function(result) {

        if(result.status === "failure")
        {
            if(!chromeStorageFuckedMessageShown) {
                util.userError(`Settings data (stored by Chrome) has been corrupted. Maybe your harddrive is too full. LLN has attempted to reset all settings data. Please reload this browser window. If you see this message more than once, you may need to reinstall Chrome Browser. Error from Chrome: ${result.data}`);
                util.fuck(`chromeStorageGet: ${result.data}`);
                chromeStorageFuckedMessageShown = true;
                CF_RPC("nukeStorage", {}, function(result) {} );
            }
            return;
        }
        else {
            callback(result.data);
        }
    });
}

function chromeStorageSet(data, callback) {

    CF_RPC("chromeStorageSet", data, function(result) {

        if(result.status === "failure") {
            if(!chromeStorageFuckedMessageShown) {
                util.userError(`Settings data (stored by Chrome) has been corrupted. Maybe your harddrive is too full. LLN has attempted to reset all settings data. Please reload this browser window. If you see this message more than once, you may need to reinstall Chrome Browser. Error from Chrome: ${result.data}`);
                util.fuck(`chromeStorageGet: ${result.data}`);
                chromeStorageFuckedMessageShown = true;
                CF_RPC("nukeStorage", {}, function(result) {} );
            }
            return;
        }
        else {
            callback(result.data);
        }
    });
}

/*
var subMan;
var vidMan;
var playMan;
var ui;
var setMan;
var pure;
*/

__LLN_ACTIVE = false;

$(document).ready(function () {

    var handler = {
        get: function(obj, prop) {
            if(prop in obj) { return obj[prop]; }
            else { 
                util.error('ACCESSING MISSING PROPERTY!'); 
                alert('ACCESSING MISSING PROPERTY!');
                return undefined; 
            }
        },
        set: function(obj, prop, value) {
            if(prop in obj) {
                obj[prop] = value;
                return obj[prop]; 
            }
            else {
                util.error('ACCESSING MISSING PROPERTY!'); 
                alert('ACCESSING MISSING PROPERTY!');
                return undefined;
            }
        }
    };

    function unshitifyJS(object) {
        return (util.dev ? new Proxy(object, handler) : object);
    }

    let lln = {};

    lln.align = unshitifyJS(Align(lln));

    lln.subMan = unshitifyJS(SubManager(lln));

    lln.savedItems = unshitifyJS(SavedItems(lln));

    // Can be code for either YT or NF code, depending on which pageScript.
    lln.vidMan = unshitifyJS(VidMan(lln));
    
    lln.playMan = unshitifyJS(PlaybackManager(lln));

    lln.verticalView = unshitifyJS(VerticalView(lln)); // needs subMan, playMan

    lln.dict = unshitifyJS(Dict(lln));

    lln.ui = unshitifyJS(UI(lln)); // needs playMan

    lln.setMan = unshitifyJS(SettingsManager(lln)); // needs ui

    lln.pure = unshitifyJS(PureFunctions(lln)); // No need for app, \\**PURE**//

    lln.pureText = unshitifyJS(PureText(lln)); // No need for app, \\**PURE**//

    lln.pureTemplates = unshitifyJS(PureTemplates(lln));

    lln.liMan = unshitifyJS(License(lln)); // needs setMan.. and..

    lln.naudio = unshitifyJS(Naudio(lln));

    lln.test = unshitifyJS(Test(lln));

    lln.bottomPanel = unshitifyJS(BottomPanel(lln));

    if(util.dev === true) {
        window.lln = lln;
    }

    ///////////////////////////

    function checkExtensionActive() {
        var newValue = $('body').hasClass('lln-active');
        if(!__LLN_ACTIVE && newValue) {
            // Wasn't active but is now.. transition.
            // Emit event.
            $(document).trigger('lln_setActive');
        }
        __LLN_ACTIVE = newValue;
        setTimeout(checkExtensionActive, 100);
    }
    checkExtensionActive();

    console.log(`Hello, from Language Learning with (Netflix)(${window.__IS_NETFLIX ? 'X' : ' '}) (Youtube)(${window.__IS_YOUTUBE ? 'X' : ' '}) Extension.`);

    lln.setMan.restore_options();

    $(document).trigger('lln_startupComplete');

}); // $(document).ready

// import { ENGINE_METHOD_ALL } from "constants";

UI = function(lln) {

    var obj = {};

    ////////////////// UI Public API: ////////////////


    ////////////////// End of Public API ////////////


    //////////////////////////// UI event callbacks ////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////

    // init tooltips
    tippy('body', {
        target: '.tippy',
        arrow: true,
        duration: 0,
        theme: 'llntooltip',
        onMount(instance) {
            // fix for tooltip not being updated on 'data-tippy-content' attribute update
            setTimeout(function(){
                instance.setContent($(instance.reference).attr('data-tippy-content'));
                instance.popperInstance.update();
                }, 0);
        },
        popperOptions: {
            modifiers: {
                computeStyle: {
                    gpuAcceleration: false
                }
            }
        }
    });

    tippy('.tippy-dropdown', {
        arrow: true,
        duration: 0,
        trigger: 'click',
        content(reference) {
            return $(reference).find('.tippy-dropdown-content').html()
        },
        interactive: true,
        theme: 'llnpopover',
        popperOptions: {
            modifiers: {
                computeStyle: {
                    gpuAcceleration: false
                }
            }
        }
    });

    tippy('.tippy-popover', {
        arrow: true,
        duration: 0,
        trigger: 'click',
        content(reference) {
            return $(reference).find('.tippy-popover-content').html()
        },
        interactive: true,
        theme: 'llnpopover',
        popperOptions: {
            modifiers: {
                computeStyle: {
                    gpuAcceleration: false
                }
            }
        }
    });

    $(document).on('click', '.lln-popover-menu a', function(e){
        e.preventDefault();
        tippy.hideAll();
    });

    function doSetFocusPanel() {
        setFocusPanel();
        setTimeout(doSetFocusPanel, 500);
    }
    doSetFocusPanel();

    function setFocusPanel() {

        if(!__LLN_ACTIVE) { return; }

        // Don't do this if paddle is open
        // fixme: make more robust
        if($(".paddle-frame").length > 0) {
            return;
        }

        // Hack to stop keypresses going to netflix timeline :-/
        if (["DIV", "SPAN", "IFRAME"].indexOf(document.activeElement.tagName) > -1 ||
            (document.activeElement.tagName === "INPUT" && document.activeElement.getAttribute('type') === "checkbox")) {
            $('#lln-focus-trap').focus();
        }
    };

    // todo: needed?
    // function doUpdatePlayButton() {
    //     updatePlayButton();
    //     setTimeout(doUpdatePlayButton, 50);
    // }
    // doUpdatePlayButton();
    //
    // function updatePlayButton() {
    //
    //     if(!__LLN_ACTIVE) { return; }
    //
    //     // Update the play button state:
    //     // Fixme: Change to # selector and use native function for performance?
    //     if ($('.PlayerControls--button-control-row').children().eq(0).hasClass('button-nfplayerPause')) { // playing
    //         $('#lln-bottom-panel').addClass('playing').removeClass('paused');
    //     } else {
    //         $('#lln-bottom-panel').addClass('paused').removeClass('playing');
    //     }
    // };


    // function redrawBottomPanel(index)

    // This is called:
    // > On entering a new subtitle - OK
    // > On original language change - OK
    // > On translation language change - OK
    // > On vocab size change - OK
    // > New traslations available (EventListener below) - OK

    // window.addEventListener('updateSubs', () => { util.log("New subs available, calling redrawBottomPanel"); redrawBottomPanel(subStepIndex); });


    obj.triggerWindowResize = function(){
        let resizeEvent = window.document.createEvent('UIEvents');
        resizeEvent.initUIEvent('resize', true, false, window, 0);
        window.dispatchEvent(resizeEvent);
    };

    setInterval(function(){
        if(!__LLN_ACTIVE) { return; }
        // updateYoutubeFont();
        updateVVPosition();
        updateYoutubeSearchUI();
        updateYoutubeProgressbar();
    }, 500);

    /*BIG FULLSCREEN HACK*/
    function updateYoutubeProgressbar(){
        // youtube progressbar is buggy at full-screen with VV due to miscalculated widths
        // so, we create our own complete progressbar replacement

        // const video = document.querySelector('video.html5-main-video');

        if (!$('.html5-video-player').hasClass('ytp-fullscreen') || !$('body').hasClass('lln-active') || !$('body').hasClass('lln-vertical-view-active')) {
            return;
        }

        const $prog = $('.ytp-progress-bar');
        if (!$prog.hasClass('lln-hacked')) {
            $prog.addClass('lln-hacked');
            let html = `
                <div class="lln-ytp-progress-bar">
                    <div class="lln-ytp-progress-bar-padding"></div>
                    <div class="lln-ytp-progress-list">
                        <div class="lln-ytp-play-progress"></div>
                        <div class="lln-ytp-load-progress"></div>
                        <div class="lln-ytp-hover-progress"></div>
                    </div>
                    <div class="lln-ytp-scrubber-container">
                        <div class="lln-ytp-scrubber-button">
                            <!-- <div class="ytp-scrubber-pull-indicator"></div> -->
                        </div>
                    </div>
                    <div class="lln-ytp-tooltip lln-ytp-bottom lln-ytp-preview">
                        <div class="lln-ytp-tooltip-text-wrapper">
                            <div class="lln-ytp-tooltip-image"></div>
                            <div class="lln-ytp-tooltip-title"></div>
                            <span class="lln-ytp-tooltip-text">37:06</span>
                        </div>
                        <div class="lln-ytp-tooltip-bg">
                            <div class="lln-ytp-tooltip-duration"></div>
                        </div>
                    </div>
                </div>
            `;
            $prog.after(html);

            $('.lln-ytp-progress-bar').on('mousemove mouseout mouseover mousedown mouseup', function(event) {
                let e = event.originalEvent;

                // const progressBarWidth = $('.ytp-progress-bar')[0].getBoundingClientRect()
                const correctionRatio = $('.ytp-progress-bar').width() / $('.lln-ytp-progress-bar').width();
                const correctedX = this.getBoundingClientRect().left + ((e.clientX - this.getBoundingClientRect().left) * correctionRatio);
                // console.log('cx', correctedX);

                let ev = new MouseEvent(e.type, {
                    isTrusted: e.isTrusted,
                    screenX: e.screenX,
                    screenY: e.screenY,
                    clientX: correctedX,
                    clientY: e.clientY,
                    ctrlKey: e.ctrlKey,
                    shiftKey: e.shiftKey,
                    altKey: e.altKey,
                    metaKey: e.metaKey,
                    button: e.button,
                    buttons: e.buttons,
                    pageX: e.pageX,
                    pageY: e.pageY,
                    x: e.x,
                    y: e.y,
                    offsetX: e.offsetX,
                    offsetY: e.offsetY,
                    movementX: e.movementX,
                    movementY: e.movementY,
                    layerX: e.layerX,
                    layerY: e.layerY,
                    type: e.type,
                    bubbles: e.bubbles,
                    cancelable: e.cancelable,
                    defaultPrevented: e.defaultPrevented,
                    composed: e.composed,
                    cancelBubble: e.cancelBubble
                });

                // update hover bar position
                let scrubberLeft = document.querySelector('.lln-ytp-scrubber-button').getBoundingClientRect().left;
                $('.lln-ytp-hover-progress').css({'width': (e.clientX - scrubberLeft - 10) + 'px', 'left': (scrubberLeft - this.getBoundingClientRect().left + 10) + 'px'});

                // update thumb position
                const thumbWidth = Math.max($('.lln-ytp-tooltip-text').width(), $('.lln-ytp-tooltip.lln-ytp-preview').width());
                let thumbLeft = e.clientX - this.getBoundingClientRect().left - thumbWidth / 2;
                thumbLeft = Math.max(0, thumbLeft);
                thumbLeft = Math.min($(this).width() - thumbWidth, thumbLeft);
                $('.lln-ytp-tooltip.lln-ytp-preview').css('left', thumbLeft);

                // update tooltip text
                setTimeout(function(){
                    $('.lln-ytp-tooltip-text').text($('.ytp-tooltip-text').text());
                    copyProgressBarStyles();
                });

                document.querySelector('.ytp-progress-bar').dispatchEvent(ev);

                return false;
            });
        } else {
            copyProgressBarStyles();
        } // end else

        function copyProgressBarStyles(){
            // copy styles periodically

            const correctionRatio = $('.ytp-progress-bar').width() / $('.lln-ytp-progress-bar').width();

            $('.lln-ytp-play-progress').attr('style', $('.ytp-play-progress').attr('style'));
            $('.lln-ytp-load-progress').attr('style', $('.ytp-load-progress').attr('style'));

            // copy scrubber position
            let scrubberTransform = $('.ytp-scrubber-container').css('transform') || '';
            let scrubberTranslateX = scrubberTransform.split(',')[4] || '0';
            scrubberTranslateX = parseFloat(scrubberTranslateX) / correctionRatio;
            if (scrubberTranslateX) {
                $('.lln-ytp-scrubber-container').css('transform', `translateX(${scrubberTranslateX}px)`);
            }

            // copy thumb tooltip style
            $('.lln-ytp-tooltip-bg').attr('style', $('.ytp-tooltip-bg').attr('style'));
        }

    } // end updateYoutubeProgressbar
    /*END BIG FULLSCREEN HACK*/

    $(document).on('click', '#search-form button#search-icon-legacy', function(){
        if ($('.lln-youtube-search-captions').hasClass('active')) {
            let query = $('input#search').eq(0).val();
            location.href = `https://www.youtube.com/results?search_query=${query}&sp=EgIoAQ%253D%253D`;
            return false;
        }
    });

    $(document).on('click', '.lln-youtube-translate', function(){
        let $searchInput = $('input#search').eq(0);

        CF_RPC("gTranslate", {
            sourceLang: lln.setMan.getSearchSourceLanguageCode(),
            targetLang: lln.setMan.getSearchTranslationLanguageCode(),
            term: $searchInput.val()
        }, function(result) {
            $searchInput.val(result.data.sentences[0].trans);
        });

        return false;
    });

    $(document).on('click', '.lln-youtube-search-lang-select', function(){
        $('#lln-modal-yt-search-language').show();
        // trigger dropdown change, for ui lang warning to update
        $('#searchTranslationLanguage').trigger('change');
        return false;
    });

    $(document).on('change', '#searchTranslationLanguage', function(){
        // get ui lang. show warning if different from this dropdown's value.
        const uiLang = ($('html').attr('lang') || '').split('-')[0].toLowerCase();
        const val = ($(this).val() || '').split('-')[0].toLowerCase();
        if (uiLang !== val) {
            $('.lln-ui-lang-warning').show();
        } else {
            $('.lln-ui-lang-warning').hide();
        }
    });

    $(document).on('click', '.lln-youtube-search-captions-btn', function(){
        $(this).toggleClass('active');
        return false;
    });

    function updateYoutubeSearchUI(){
        // render translate button
        if (! $('.lln-youtube-translate-btn').length) {
            $('#search-form button').eq(0).before(`
<button class="lln-youtube-translate-btn lln-youtube-translate style-scope ytd-searchbox" title="Translate (LLY)"></button>
<button class="lln-youtube-search-lang-select-btn lln-youtube-search-lang-select style-scope ytd-searchbox" title="Change language (LLY)"></button>
`);
            $('#search-input.ytd-searchbox-spt').append(`
<button class="lln-youtube-search-captions-btn lln-youtube-search-captions style-scope ytd-searchbox" title="Videos with captions only (LLY)">CC</button>
            `);
            $('#search-input.ytd-searchbox-spt').addClass('search-input-right-padding');
        }

//         if (! $('#lln-youtube-search-suggestions').length) {
//             if ($('ytd-item-section-renderer.ytd-section-list-renderer').length) {
//                 const query = $('input#search').eq(0).val();
//                 const translationLang = lln.pure.googleCodeToLanguageName[lln.setMan.getSearchTranslationLanguageCode()];
//                 let searchSuggestionHtml = '';
//                 if (translationLang && query) {
//                     searchSuggestionHtml = `
//                     <div id="lln-youtube-search-suggestions">
//                         <a href="#" class="lln-youtube-search">
//                             Search <span class="lln-youtube-search-query">${ query ? '"' + query + '" ': '' }</span>in <span class="lln-search-translation-lang">${translationLang}</span>
//                         </a>
// <!--                        <div style="margin-top: 20px;">Or, check out some of LLN's featured channels:-->
//
// <!--                        <div class="lln-yt-search-featured-channels"></div>-->
//                         </div>
//                     </div>
//                 `;
//                 }
//                 $('ytd-item-section-renderer.ytd-section-list-renderer').after(searchSuggestionHtml);
//             }
//         }
    }

    let lastVVWidth = 400;
    function updateVVPosition(){
        if (window.__IS_YOUTUBE) {
            let $vv = $('.lln-vertical-view');
            if (!$vv.length) { util.log('ERROR: VV not found'); }
            if ($vv.length > 1) { util.log('ERROR: found more than one VV instance'); }
            let isWatchPage = $('ytd-app[is-watch-page]').length > 0;
            let theaterMode = $('video.html5-main-video').closest('#player-theater-container').length > 0;
            if ($vv.length) {
                if (isWatchPage){
                    if (theaterMode) {
                        let $theaterContainer = $('#player-theater-container');
                        const desiredHeight = $theaterContainer.height();
                        if ($vv.height() !== desiredHeight) { // careful, perhaps could trigger anyway
                            $vv.height(desiredHeight);
                        }
                        if ($vv.parent().attr('id') !== 'player-theater-container') {
                            $theaterContainer.prepend($vv);
                            obj.triggerWindowResize();
                            util.log('vvv moved in theater');
                        }
                    } else {
                        let videoHeight = Math.max($('video').height(), 300);
                        if ($vv.height() !== videoHeight) { // careful, perhaps could trigger anyway
                            $vv.height(videoHeight);
                        }
                        if (!$vv.parent('#secondary.ytd-watch-flexy').length) {
                            $('#secondary.ytd-watch-flexy').prepend($vv);
                            obj.triggerWindowResize();
                            util.log('vvv moved in secondary');
                        }
                    }
                } else {
                    if ($vv.parent().prop("tagName") !== 'BODY') {
                        $('body').append($vv);
                        obj.triggerWindowResize();
                        util.log('vvv moved in body');
                    }
                }
            }
            let $toggle = $('.lln-vv-toggle-in-sidebar');
            if ($toggle.length && $toggle.parent().attr('id') !== 'secondary' && $('#secondary.ytd-watch-flexy').length) {
                $('#secondary.ytd-watch-flexy').prepend($toggle);
            }
            let $toggleBtn = $('.lln-toggle-vertical-view');
            if ($toggleBtn.length && !$toggleBtn.parent().hasClass('html5-video-player')) {
                $('.html5-video-player').append($toggleBtn);
            }
            let vvWidth = $vv.width();
            if (vvWidth !== lastVVWidth) {
                lastVVWidth = vvWidth;
                lln.verticalView.redraw();
                lln.verticalView.highlightAndScrollToActiveSub();
            }
        }
    }
    //---

    obj.getElTextWithoutChildren = function($el) {
        let text = $el
            .clone()    //clone the element
            .children() //select all the children
            .remove()   //remove all the children
            .end()  //again go back to selected element
            .text();
        return text;
    };

    $(document).on('click', '.lln-btn[href="#"]', function(e){
        e.preventDefault();
    });

    $(document).on('click', '.lln-vv-toggle-in-sidebar', function(e){
        e.preventDefault();
        lln.setMan.setVerticalViewActive(true);
    });

    // Some onClick handlers
    // $(document).on('click', '.nf-big-play-pause', vidMan.togglePause);
    $(document).on('click', '.NAL-fix-button', function() {
        $(".NAL-fix-button").hide();
        lln.vidMan.setOriginalAudio();
    });
    $(document).on('click', '.NSL-fix-button', function() {
        $(".NSL-fix-button").hide();
        lln.vidMan.setOriginalSubtitles();
    });
    $(document).on('click', '.lln-options-btn', function(e){
        e.preventDefault();
        $('#lln-options-modal').show();
    });
    $(document).on('click', '#lln-options-save-btn', function(e){
        e.preventDefault();
        $('#lln-options-modal').hide();
    });
    $(document).on('click', '#lln-main-subs, .lln-subs-wrap, .lln-whole-title-translation-wrap, .lln-whole-title-translation', function(e){
        if (e.target == this) {
            lln.vidMan.togglePause();
        }
    });

    $(document).ready(() => {

        // Handle Keypresses (keyboard shortcuts)
        $(document).on( "keydown", event => {
            // todo: check all code if domExists is added to all places needed
            if (__LLN_ACTIVE && !event.originalEvent.lln_triggered) {

                if ($('input[type="text"]:focus').length || $('textarea:focus').length || $('#lln-options-modal:visible').length) {
                    // disable shortcuts in options modal
                    return true;
                }

                // hide dict
                $('.lln-dict-tooltip').removeClass('show');
                // util.log("self: " + self);

                function retriggerEvent(){
                // doesn't work
                    let $nf = $('.nfp.nf-player-container');
                    if ($nf.length){
                        let eventCopy = new event.originalEvent.constructor(event.originalEvent.type, event.originalEvent);
                        eventCopy.lln_triggered = true;
                        $nf[0].dispatchEvent(eventCopy);
                    }
                }

                if (event.shiftKey && event.ctrlKey) {
                    if(event.which === 81) {
                        lln.test.test();
                    }
                    // exit function
                    return true;
                }
                else if (event.shiftKey || event.ctrlKey || event.metaKey) {
                    // exit function
                    return true;
                }

                // console.log(event.which);

                switch(event.which) {
                    case 65: // 'a' key
                        lln.playMan.handlePrevButton();
                        return false;
                    case 37: // left arrow

                        if (lln.setMan.getOverrideArrowKeys()) {
                            lln.playMan.handlePrevButton();
                        } else {
                            if(window.__IS_YOUTUBE) {
                                return true;
                            } else {
                                retriggerEvent();
                            }
                        }
                        return false;
                    case 83: // 's'
                        lln.playMan.handleReplayButton();
                        return false;
                    case 40: // down arrow
                        if (lln.setMan.getOverrideArrowKeys()) {
                            lln.playMan.handleReplayButton();
                        } else {
                            if(window.__IS_YOUTUBE) {
                                return true;
                            } else {
                                retriggerEvent();
                            }
                        }
                        return false;
                    case 68: // 'd'
                        lln.playMan.handleNextButton();
                        return false;
                    case 39: // right arrow
                        if (lln.setMan.getOverrideArrowKeys()) {
                            lln.playMan.handleNextButton();
                        } else {
                            if(window.__IS_YOUTUBE) {
                                return true;
                            } else {
                                retriggerEvent();
                            }
                        }
                        return false;
                    case 38: // up arrow
                        if (window.__IS_YOUTUBE) {
                            return true;
                        }
                        if (lln.setMan.getOverrideArrowKeys()) {
                            lln.vidMan.togglePause();
                            break; // should be TTS
                        } else {
                            retriggerEvent();
                        }
                        return false;
                    case 87: // 'w'
                    case 32: // space bar
                        if (window.__IS_YOUTUBE) {
                            return true;
                        } else {
                            lln.vidMan.togglePause();
                            break; // should be TTS
                        }
                    case 69:
                        _blurTranslationsFlag = false;
                        obj.redrawBottomPanel();
                        break;
                    case 82: // 'r':
                        if (!window.__IS_YOUTUBE) {
                            lln.savedItems.toggleCurrentSubtitleSaveItem();
                        }
                        break;
                    case 70: // 'f':
                        $('.button-nfplayerFullscreen, .button-nfplayerWindowed').trigger('click');
                        break;
                    case 81: // 'q':
                        $('#autoPause').prop("checked", !$('#autoPause').prop("checked"));
                        $('#autoPause').trigger('change');
                        $('#lln-main-subs .lln-main-right').addClass('show');
                        setTimeout(function(){
                            $('#lln-main-subs .lln-main-right').removeClass('show');
                        }, 2000);
                        break;
                    case 49: // '1'
                        // slow down playback
                        lln.setMan.decreasePlaybackRate();
                        obj.flashMessage(lln.setMan.getPlaybackRate() + 'x');
                        break;
                    case 50: // '2'
                        // speed up playback
                        lln.setMan.increasePlaybackRate();
                        obj.flashMessage(lln.setMan.getPlaybackRate() + 'x');
                        break;
/*
                    case 87: // 'w'
                    case 38: // up arrow
                        // fixme: when you press this the focus seems to switch to the google translation
                        // this breaks the buttons and the keypresses are added to the translation!
                        playTTS();
                        break; // should be TTS
                    case 69: // 'e'
                        if( setMan.autoPause == true) { setMan.setAutoPause(false); }
                        else{ setMan.setAutoPause(true); }
                        break;
*/
                    default:
                        // util.log("UI: No handler for this key: " + event.type + ": " +  event.which)
                        break;
                }
            }
        });

    });

    $(document).on('mouseenter', '.lln-word-example', function(){
        const $this = $(this);
        lln.verticalView.getVVTranslation(parseInt($(this).attr('data-sub-index')), function(translationText){
            // position tooltip top or bottom (needs to fit because parent has overflow hidden)
            const offset = $this.get(0).offsetTop - $this.closest('.def').scrollTop() ;
            $this.removeClass('top bottom').addClass(offset < 80 ? 'bottom' : 'top');
            // add tooltip
            if (! $this.find('.tt').length) {
                $this.append('<span class="tt"></span>');
            }
            $this.addClass('lln-hover-tooltip').find('.tt').text(translationText);
        });
    });

    $(document).on('mouseenter', 'a.catalogue', setCatalogueUrl);

    function setCatalogueUrl() {
        if ($(this).hasClass('lln-youtube')) {
            $('a.catalogue').attr('href', "http://languagelearningwithnetflix.com/youtube_catalogue.html#language=" + encodeURI(lln.pure.googleCodeToLanguageName[lln.subMan.subLangCode_G === false ? 'en' : lln.subMan.subLangCode_G]));
        } else {
            $('a.catalogue').attr('href', "http://www.languagelearningwithnetflix.com/catalogue.html#language=" + encodeURI(lln.pure.googleCodeToLanguageName[lln.subMan.subLangCode_G === false ? 'en' : lln.subMan.subLangCode_G]) + '&country=' + encodeURI(lln.setMan.getUserCountry()));
        }

    }

/*
    $(document).on('mouseenter', 'a.instructions', setInstructionsUrl);

    function setInstructionsUrl() {

        var langCode = setMan.getTranslationLanguageCode();
        
        var url = "http://www.languagelearningwithnetflix.com/instructions.html";

        if(langCode) {
            url += "#lang=" + langCode;
        }

        $('a.instructions').attr('href', url);
    }
*/

    var activeErrors = [];
    obj.setError = function(errorName, state) {
        if(state) {
            if(!activeErrors.includes(errorName)) {
                activeErrors.push(errorName);
            }
        }
        else {
            var index = activeErrors.indexOf(errorName);
            if (index > -1) {
                activeErrors.splice(index, 1);
            }
        }

        if(activeErrors.length > 0) {
            $('body').addClass('lln-options-error');
        }
        else {
            $('body').removeClass('lln-options-error');
        }
    };

    let flashMessagetTimeout;
    obj.flashMessage = function(messageText, requestedTimeout) {

        if(!requestedTimeout) { requestedTimeout = 1200; }

        $('#llnVideoMessage').text(messageText).show();
        clearTimeout(flashMessagetTimeout);
        flashMessagetTimeout = setTimeout(function(){
            $('#llnVideoMessage').fadeOut();
        }, requestedTimeout);
    };

    function showOptionsNotificationMessage() {
        // show message in options
        $.getJSON('https://languagelearningwithnetflix.com/messages.json').then(function(data) {
            let messageInfo = null;
            if (data) {
                if (window.__IS_NETFLIX && data.NETFLIX) {
                    messageInfo = data.NETFLIX;
                }
                if (window.__IS_YOUTUBE && data.YOUTUBE) {
                    messageInfo = data.YOUTUBE;
                }
            }
            if (messageInfo && messageInfo.message) {
                // get options error message
                $('#lln-options-error-message').show();
                $('#lln-options-error-message .lln-text-desc').html(messageInfo.message);
                if (messageInfo.color) {
                    $('#lln-options-error-message').css('background', messageInfo.color);
                }
                if (messageInfo.link) {
                    $('#lln-options-error-message .lln-text-url').text(messageInfo.link).attr('href', messageInfo.link);
                }
                $('#lln-options-error-message .lln-warning-icon').hide();
                $('#lln-options-error-message .lln-new-icon').hide();
                if (messageInfo.showErrorIcon) {
                    $('#lln-options-error-message .lln-warning-icon').css('display', 'flex');
                    lln.ui.setError("serverMessage_error", true);
                } else if (messageInfo.showNewIcon) {
                    $('#lln-options-error-message .lln-new-icon').css('display', 'flex');
                }
            } else {
                $('#lln-options-error-message').hide();
            }

        });
    }

    showOptionsNotificationMessage();

    // This used to live in the content script.
    if(window.__IS_YOUTUBE) {
        // This loads extension buttion in YT player
        function loadButton_YT() {
            // injects extension button into player controls
            if ($('.ytp-chrome-controls .ytp-left-controls').length && $('#lln-extension-controls').length == 0) {
                $('.ytp-chrome-controls .ytp-left-controls').append(
                    `<div id="lln-extension-controls">
                        <div id="lln-toggle-btn" class="tippy" data-tippy-content="LLY - ${lln_i18n.turnOnOff}">
                            <div class="lln-toggle-label lln-on-label">ON</div>
                            <div class="lln-toggle-label lln-off-label">OFF</div>
                        </div>
                        <div class="lln-options-btn tippy" data-tippy-content="LLY - ${lln_i18n.settings}">
                            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" class="svg" width="28" height="28" viewBox="0 0 512 512" fill="#fff">
                                <path d="M466.895 305.125c-26.863-46.527-10.708-106.152 36.076-133.244l-50.313-87.146c-14.375 8.427-31.088 13.259-48.923 13.259-53.768 0-97.354-43.873-97.354-97.995h-100.629c0.133 16.705-4.037 33.641-12.979 49.126-26.862 46.528-86.578 62.351-133.431 35.379l-50.312 87.146c14.485 8.236 27.025 20.294 35.943 35.739 26.819 46.454 10.756 105.96-35.854 133.112l50.313 87.146c14.325-8.348 30.958-13.127 48.7-13.127 53.598 0 97.072 43.596 97.35 97.479h100.627c-0.043-16.537 4.136-33.285 12.983-48.609 26.818-46.453 86.388-62.297 133.207-35.506l50.313-87.145c-14.39-8.233-26.846-20.249-35.717-35.614zM256 359.666c-57.254 0-103.668-46.412-103.668-103.667 0-57.254 46.413-103.667 103.668-103.667s103.666 46.413 103.666 103.667c-0.001 57.255-46.412 103.667-103.666 103.667z"></path>
                            </svg>
                            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" class="lln-error-icon" width="12" height="12" viewBox="0 0 1024 1024">
                                <path fill="#ff484f" d="M496 112c-229.76 0-416 186.24-416 416s186.24 416 416 416 416-186.24 416-416-186.24-416-416-416zM496 764c-26.528 0-48-21.504-48-48s21.472-48 48-48c26.496 0 48 21.504 48 48s-21.504 48-48 48zM544 556c0 26.496-21.504 48-48 48-26.528 0-48-21.504-48-48v-224c0-26.528 21.472-48 48-48 26.496 0 48 21.472 48 48v224z"></path>
                            </svg>
                        </div>
                    </div>`
                );
            }
        }

        setInterval(loadButton_YT, 1000);

        // This loads content.html into Netflix DOM
        function loadPageScript_YT() {
            // if the youtube player is on the page, and dom hasn't been loaded

            if ($('video.html5-main-video').length && $('.lln-vertical-view').length == 0) {
                // load the extension

                // first get messages
                // fixme: hardcoded to en
                CF_RPC("dioco_g", "lly/_locales/en/messages.json", function(result) {

                    if(result.status !== "success") {
                        // fixme
                    }

                    window.lln_i18n = JSON.parse(result.data);

                    CF_RPC("dioco_g", "lly/content.html", function(result) {

                        if(result.status !== "success") {
                            // fixme
                        }

                        let template_string = result.data;

                        // inject the template
                        if ($('video.html5-main-video').length && $('.lln-vertical-view').length === 0) {
                            
                            let template_string_i18n = template_string.replace(/__MSG_([\w:]+)__/g, function(match, reg_args) {

                                if(reg_args) {

                                    let args = reg_args.split(':');
                                    let msg = window.lln_i18n[args[0]];

                                    if (args.length > 1) {
                                        args.slice(1).forEach(a => {
                                            msg = msg.replace('<text>', a);
                                        });
                                    }
                                    return msg;
                                } else {
                                    return "";
                                }
                            });

                            // Add correct Extension ID
                            // fixme: hardcoded extension id
                            template_string_i18n = template_string_i18n.split('__EXTENSION_ID__').join('jkhhdcaafjabenpmpcpgdjiffdpmmcjb');

                            $(template_string_i18n).appendTo('body');
                            // console.log("INJECTED HTML");

                        };
                        // fixme: here we need to inject lln.min.js also

                    });
                });
            }
        }
        // setInterval(loadDom, 1000);
        // fixme: break
        setInterval(loadPageScript_YT, 1000);

    }
    else {
        // NETFLIX
            
        // This loads extension buttion in Netflix player
        function loadButton_NF() {
            // injects extension button into player controls
            if ($('.PlayerControls--control-element.text-control.video-title').length && $('#lln-extension-controls').length == 0) {
                $('.PlayerControls--control-element.text-control.video-title').before(
                    `<div id="lln-extension-controls">
                        <div id="lln-toggle-btn" class="tippy" data-tippy-content="LLN - ${lln_i18n.turnOnOff}">
                            <div class="lln-toggle-label lln-on-label">ON</div>
                            <div class="lln-toggle-label lln-off-label">OFF</div>
                        </div>
                        <div class="lln-options-btn tippy" data-tippy-content="LLN - ${lln_i18n.settings}">
                            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" class="svg" width="28" height="28" viewBox="0 0 512 512" fill="#fff">
                                <path d="M466.895 305.125c-26.863-46.527-10.708-106.152 36.076-133.244l-50.313-87.146c-14.375 8.427-31.088 13.259-48.923 13.259-53.768 0-97.354-43.873-97.354-97.995h-100.629c0.133 16.705-4.037 33.641-12.979 49.126-26.862 46.528-86.578 62.351-133.431 35.379l-50.312 87.146c14.485 8.236 27.025 20.294 35.943 35.739 26.819 46.454 10.756 105.96-35.854 133.112l50.313 87.146c14.325-8.348 30.958-13.127 48.7-13.127 53.598 0 97.072 43.596 97.35 97.479h100.627c-0.043-16.537 4.136-33.285 12.983-48.609 26.818-46.453 86.388-62.297 133.207-35.506l50.313-87.145c-14.39-8.233-26.846-20.249-35.717-35.614zM256 359.666c-57.254 0-103.668-46.412-103.668-103.667 0-57.254 46.413-103.667 103.668-103.667s103.666 46.413 103.666 103.667c-0.001 57.255-46.412 103.667-103.666 103.667z"></path>
                            </svg>
                            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" class="lln-error-icon" width="12" height="12" viewBox="0 0 1024 1024">
                                <path fill="#ff484f" d="M496 112c-229.76 0-416 186.24-416 416s186.24 416 416 416 416-186.24 416-416-186.24-416-416-416zM496 764c-26.528 0-48-21.504-48-48s21.472-48 48-48c26.496 0 48 21.504 48 48s-21.504 48-48 48zM544 556c0 26.496-21.504 48-48 48-26.528 0-48-21.504-48-48v-224c0-26.528 21.472-48 48-48 26.496 0 48 21.472 48 48v224z"></path>
                            </svg>
                        </div>
                    </div>`
                );
            }
        }

        setInterval(loadButton_NF, 1000);
//---
        function loadPageScript_NF() {

            if (!document.getElementById('lln-extension-script')) {
                injectScript('pageScript_netflix.min.js');
            }

            // if the netflix player is on the page, and dom hasn't been loaded
            if ($('.sizing-wrapper .AkiraPlayer').length && $('.sizing-wrapper #lln-loaded').length == 0) {
                // load the extension
                $.get(chrome.extension.getURL('/content.html'), (data) => { // load the template
                    // inject the template
                    if ($('.sizing-wrapper .AkiraPlayer').length && $('.sizing-wrapper #lln-loaded').length == 0) {

                        // substitute the __MSG_xyz__, and their <text> placeholders 
                        let data_i18n = data.replace(/__MSG_([\w:]+)__/g, function(match, reg_args) {
                            if(reg_args) {
                                let args = reg_args.split(':');
                                let msg = chrome.i18n.getMessage(args[0]);

                                if (args.length > 1) {
                                    args.slice(1).forEach(a => {
                                        msg = msg.replace('<text>', a);
                                    });
                                }
                                return msg;
                            } else {
                                return "";
                            }
                        });

                        // Add correct Extension ID
                        data_i18n = data_i18n.split('__EXTENSION_ID__').join(chrome.runtime.id);

                        $(data_i18n).appendTo('.sizing-wrapper');

                    };
                });
            }
        }

        setInterval(loadPageScript_NF, 1000);
//---
    }

    return obj;

};

SettingsManager = function(lln) {

    var obj = {};

    //1. Value changed? No? Return.
    //2. Check newValue is valid. No? Console message then return.
    //3. Set value = newValue
    //4. Update UI
    //5. Perform other necesary operations

/*
    // This can be some number, or -1 for unlimited vocab
    var darkMode;
    obj.setDarkMode = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === darkMode) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        darkMode = newValue;
        //4. Update UI
        $('#darkMode').prop('checked', autoPause);
        document.getElementById('darkMode').checked = autoPause;
        //5. Perform other necesary operations

    };
    obj.getDarkMode = function() { return darkMode; };
*/

    // How many subs has the user played, in total?
    // This setting is completely non-standard.
    // only called externally, so can include save_options.
    var subCount;
    obj.incrementSubCount = function() {
        subCount += 1;
        if(subCount % 20 === 0) {
            save_options();
        }
    }
    obj.getSubCount = function() { return subCount; };

    // User key presses (back, repeat, forward, play)
    // This setting is completely non-standard.
    var pauseCount;
    obj.incrementPauseCount = function() {
        pauseCount += 1;
        if(pauseCount % 20 === 0) {
            save_options();
        }
    }
    obj.getPauseCount = function() { return pauseCount; };

    // This can be some number, or -1 for unlimited vocab
    var vocabSize;
    obj.setVocabSize = function(newValue) {

        checkTypes(arguments, "number");

        //1. Value changed? No? Return.
        if(newValue === vocabSize) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(parseInt(newValue) !== parseInt(newValue) || parseInt(newValue) < -1 || parseInt(newValue) > 10000) {
            util.log("SETMAN: vocabSize newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        vocabSize = newValue;
        //4. Update UI
        $('#vocabFreq').val(vocabSize);
        $('#vocabFreq').value = vocabSize;
        //5. Perform other necesary operations
        lln.bottomPanel.redrawBottomPanel();
        lln.verticalView.redraw();
    };
    obj.getVocabSize = function() { return vocabSize; };

    var transliterations;
    obj.setTransliterations = function(newValue) {

        checkTypes(arguments, "string");

        //1. Value changed? No? Return.
        if(newValue === transliterations) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== 'ORIG' && newValue !== 'ORIG+ROMAJI' && newValue !== 'ORIG+HIRAGANA') {
            util.log("SETMAN: transliterations newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        transliterations = newValue;
        //4. Update UI
        $('#transliterations').val(transliterations);
        $('#transliterations').value = transliterations;
        //5. Perform other necesary operations
        lln.bottomPanel.redrawBottomPanel();

    };
    obj.getTransliterations = function() { return transliterations; };


    var defaultExternalDictName;
    obj.setDefaultExternalDictName = function(newValue) {

        checkTypes(arguments, "string");

        //1. Value changed? No? Return.
        if(newValue === defaultExternalDictName) { return; }
        //2. Check newValue is valid. No? Console message then return.
        // none
        //3. Set value = newValue
        defaultExternalDictName = newValue;
        //4. Update UI
        // none
        //5. Perform other necesary operations
        save_options();

    };
    obj.getDefaultExternalDictName = function() { return defaultExternalDictName; };

    var userDefinedDictUrls;
    obj.setUserDefinedDictUrls = function(newValue) {

        checkTypes(arguments, "string");

        //1. Value changed? No? Return.
        if(newValue === userDefinedDictUrls) { return; }
        //2. Check newValue is valid. No? Console message then return.
        // none
        //3. Set value = newValue
        userDefinedDictUrls = newValue;
        //4. Update UI
        $('#userDefinedDictUrls').val(userDefinedDictUrls);
        //5. Perform other necesary operations
        save_options();

    };
    obj.getUserDefinedDictUrls = function() { return userDefinedDictUrls; };


    var autoPause;
    obj.setAutoPause = function(newValue) {

        checkTypes(arguments, "boolean");

        //1. Value changed? No? Return.
        if(newValue === autoPause) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: autoPause newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        autoPause = newValue;
        //4. Update UI
        $('#autoPause').prop('checked', autoPause);
        // document.getElementById('autoPause').checked = autoPause;
        //5. Perform other necesary operations
        if (newValue == false) {
            lln.vidMan.play();
        }
        // no operations here
    };
    obj.getAutoPause = function() { return autoPause; };

    var pauseOnSubsHover;
    obj.setPauseOnSubsHover = function(newValue) {

        checkTypes(arguments, "boolean");

        //1. Value changed? No? Return.
        if(newValue === pauseOnSubsHover) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: pauseOnSubsHover newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        pauseOnSubsHover = newValue;
        //4. Update UI
        $('#pauseOnSubsHover').prop('checked', pauseOnSubsHover);
        //5. Perform other necesary operations
        // no operations here
    };
    obj.getPauseOnSubsHover = function() { return pauseOnSubsHover; };

    var blurTranslations;
    obj.setBlurTranslations = function(newValue) {

        checkTypes(arguments, "boolean");

        //1. Value changed? No? Return.
        if(newValue === blurTranslations) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: blurTranslations newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        blurTranslations = newValue;
        //4. Update UI
        $('#blurTranslations').prop('checked', blurTranslations);
        document.getElementById('blurTranslations').checked = blurTranslations;
        //5. Perform other necesary operations
        lln.bottomPanel.setBlurTranslationsFlag();
        lln.bottomPanel.redrawBottomPanel();
    };
    obj.getBlurTranslations = function() { return blurTranslations; };

    var verticalViewTab;
    obj.setVerticalViewTab = function(newValue) {

        checkTypes(arguments, "string");

        //1. Value changed? No? Return.
        if(newValue === verticalViewTab) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== 'VV_SUBS' && newValue !== 'VV_SAVED_WORDS') { // not a bool
            util.log("SETMAN: verticalViewTab newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        verticalViewTab = newValue;
        //4. Update UI
        $(`.lln-vv-tab-title[data-tab="${verticalViewTab}"]`).addClass('active').siblings().removeClass('active');
        if (verticalViewTab === 'VV_SUBS') {
            $('#lln-vertical-view-subs').addClass('visible');
            $('#lln-vertical-view-saved-items').removeClass('visible');
            lln.verticalView.highlightAndScrollToActiveSub();
        } else if (verticalViewTab === 'VV_SAVED_WORDS') {
            $('#lln-vertical-view-subs').removeClass('visible');
            $('#lln-vertical-view-saved-items').addClass('visible');
        }
        // no operations here
    };
    obj.getVerticalViewTab = function() { return verticalViewTab; };

    var playbackRate;
    obj.setPlaybackRate = function(newValue) {

        // to fix any broken settings
        newValue = parseFloat(newValue);

        checkTypes(arguments, "number");

        if( ! ['0.7', '0.8', '0.9', '1', '1.25', '1.5'].includes(newValue.toString()) ) { newValue = 1; }

        //1. Value changed? No? Return.
        if(newValue === playbackRate) { return; }
        //2. Check newValue is valid. No? Console message then return.
        //3. Set value = newValue
        playbackRate = newValue;
        //4. Update UI
        $('#playbackRate').val(playbackRate);
        $('#playbackRate').value = playbackRate;
        //5. Perform other necesary operations
        lln.vidMan.setPlaybackRate(parseFloat(playbackRate));
    };
    obj.getPlaybackRate = function() { return playbackRate; };

    obj.increasePlaybackRate = function(){
        let newRate = $('#playbackRate option:selected').next().attr('value');
        if (newRate) obj.setPlaybackRate(newRate);
    };

    obj.decreasePlaybackRate = function(){
        let newRate = $('#playbackRate option:selected').prev().attr('value');
        if (newRate) obj.setPlaybackRate(newRate);
    };

    var onLeftClick;
    obj.setOnLeftClick = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === onLeftClick) { return; }
        //2. Check newValue is valid. No? Console message then return.
        //3. Set value = newValue
        onLeftClick = newValue;
        //4. Update UI
        $('#onLeftClick').val(onLeftClick);
        $('#onLeftClick').value = onLeftClick;
    };
    obj.getOnLeftClick = function() { return onLeftClick; };

    var onRightClick;
    obj.setOnRightClick = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === onRightClick) { return; }
        //2. Check newValue is valid. No? Console message then return.
        //3. Set value = newValue
        onRightClick = newValue;
        //4. Update UI
        $('#onRightClick').val(onRightClick);
        $('#onRightClick').value = onRightClick;
    };
    obj.getOnRightClick = function() { return onRightClick; };


    var fontSize;
    obj.setFontSize = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === fontSize) { return; }
        //2. Check newValue is valid. No? Console message then return.
        //3. Set value = newValue
        fontSize = newValue;
        //4. Update UI
        $('body').removeClass('lln-font-size-extra-small lln-font-size-small lln-font-size-normal lln-font-size-large lln-font-size-extra-large').addClass('lln-font-size-' + fontSize);
        $('#llnFontSizeSelect').val(fontSize);
        $('#llnFontSizeSelect').value = fontSize;
        lln.bottomPanel.resetStickyBottomPanelHeight();
        lln.bottomPanel.redrawBottomPanel();
    };
    obj.getFontSize = function() { return fontSize; };


    /*
        var fastPlayback;
        obj.setFastPlayback = function(newValue) {
            //1. Value changed? No? Return.
            if(newValue === fastPlayback) { return; }
            //2. Check newValue is valid. No? Console message then return.
            if(newValue !== true && newValue !== false) { // not a bool
                util.log("SETMAN: newValue invalid: " + newValue);
                return;
            }
            //3. Set value = newValue
            fastPlayback = newValue;
            //4. Update UI
            $('#fastPlayback').prop('checked', fastPlayback);
            document.getElementById('fastPlayback').checked = fastPlayback;
            //5. Perform other necesary operations
        };
        obj.getFastPlayback = function() { return fastPlayback; };
    */
    // Going to set this on a loop, as when the video is loaded, the video element maybe isn't present or something.
    // Extension closed --> regular playback speed.
    setInterval(() => {
        if(!__LLN_ACTIVE){
            lln.vidMan.setPlaybackRate(1);
        }
    }, 1000);

    var showMT;
    obj.setShowMT = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === showMT) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: showMT newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        showMT = newValue;
        //4. Update UI
        $('#showMT').prop('checked', showMT);
        document.getElementById('showMT').checked = showMT;
        //5. Perform other necesary operations
        lln.bottomPanel.redrawBottomPanel();
    };
    obj.getShowMT = function() { return showMT; };

    var showHT;
    obj.setShowHT = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === showHT) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: showHT newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        showHT = newValue;
        //4. Update UI
        $('#showHT').prop('checked', showHT);
        document.getElementById('showHT').checked = showHT;
        //5. Perform other necesary operations
        lln.bottomPanel.redrawBottomPanel();
    };
    obj.getShowHT = function() { return showHT; };

    // This variable should always be a valid google translate language code
    // Or else false
    var translationLanguageCode = false;
    obj.setTranslationLanguageCode = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === translationLanguageCode) { return; } // no action
        //2. Check newValue is valid. No? Console message then return.
        var cleanedCode = lln.pure.cleanLangCode(newValue);
        if(!cleanedCode) {
            util.log("SETMAN: translationLanguageCode newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        translationLanguageCode = cleanedCode;
        //4. Update UI
        $('#destLanguage').val(translationLanguageCode);
        $('#destLanguage').value = translationLanguageCode;
        //5. Perform other necesary operations
        lln.subMan.reloadTranslations();
    };
    obj.getTranslationLanguageCode = function() { return translationLanguageCode; };


    // This variable indicates youtube search source language
    var searchSourceLanguageCode = false;
    obj.setSearchSourceLanguageCode = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === searchSourceLanguageCode) { return; } // no action
        //2. Check newValue is valid. No? Console message then return.
        var cleanedCode = 'auto';
        if (newValue !== 'auto') {
            cleanedCode = lln.pure.cleanLangCode(newValue);
            if(!cleanedCode) {
                util.log("SETMAN: searchSourceLanguageCode newValue invalid: " + newValue);
                return;
            }
        }
        //3. Set value = newValue
        searchSourceLanguageCode = cleanedCode;
        //4. Update UI
        $('#searchSourceLanguage').val(searchSourceLanguageCode);
        $('#searchSourceLanguage').value = searchSourceLanguageCode;
    };
    obj.getSearchSourceLanguageCode = function() { return searchSourceLanguageCode; };


    // This variable indicates youtube search translation language
    var searchTranslationLanguageCode = false;
    obj.setSearchTranslationLanguageCode = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === searchTranslationLanguageCode) { return; } // no action
        //2. Check newValue is valid. No? Console message then return.
        var cleanedCode = lln.pure.cleanLangCode(newValue);
        if(!cleanedCode) {
            util.log("SETMAN: searchTranslationLanguageCode newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        searchTranslationLanguageCode = cleanedCode;
        //4. Update UI
        $('#searchTranslationLanguage').val(searchTranslationLanguageCode);
        $('#searchTranslationLanguage').value = searchTranslationLanguageCode;
    };
    obj.getSearchTranslationLanguageCode = function() { return searchTranslationLanguageCode; };

    // This variable indicates last used source language code (used in catalogue link)
    var sourceLanguageCode = false;
    obj.setSourceLanguageCode = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === sourceLanguageCode) { return; } // no action
        //2. Check newValue is valid. No? Console message then return.
        var cleanedCode = lln.pure.cleanLangCode(newValue);
        if(!cleanedCode) {
            util.log("SETMAN: sourceLanguageCode newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        sourceLanguageCode = cleanedCode;
        save_options();
    };
    obj.getSourceLanguageCode = function() { return sourceLanguageCode; };

    var userCountry = '';
    obj.setUserCountry = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === userCountry) { return; } // no action
        //3. Set value = newValue
        userCountry = newValue;
        //5. Perform other necesary operations
    };
    obj.getUserCountry = function() {
        return userCountry;
    };

    var userLanguage = '';
    obj.setUserLanguage = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === userLanguage) { return; } // no action
        //3. Set value = newValue
        userLanguage = newValue;
        //5. Perform other necesary operations
    };
    obj.getUserLanguage = function() {
        return userLanguage;
    };

    obj.disabled = false;

    var lingoActive;
    obj.setLingoActive = function(newValue) {
        //0. Special:
        if(obj.disabled) { newValue = false; }
        //1. Value changed? No? Return.
        if(newValue === lingoActive) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: lingoActive newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        lingoActive = newValue;
        //4. Update UI
        if (newValue) {
            $('body').addClass('lln-active');
        } else {
            $('body').removeClass('lln-active');
        }
        //5. Perform other necesary operations
        if (lingoActive) {
            // todo: check with David
            lln.vidMan.setPlaybackRate(parseFloat(playbackRate || 1));
        }
        // no operations
    };
    obj.getLingoActive = function() { return lingoActive; };

    var overrideArrowKeys;
    obj.setOverrideArrowKeys = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === overrideArrowKeys) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: overrideArrowKeys newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        overrideArrowKeys = newValue;
        //4. Update UI
        $('#overrideArrowKeys').prop('checked', overrideArrowKeys);
        if (overrideArrowKeys) {
            $('body').addClass('lln-override-arrow-keys');
        } else {
            $('body').removeClass('lln-override-arrow-keys');
        }
        //5. Perform other necesary operations
        // no operations
    };
    obj.getOverrideArrowKeys = function() { return overrideArrowKeys; };

    var highlightSavedWords;
    obj.setHighlightSavedWords = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === highlightSavedWords) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: highlightSavedWords newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        highlightSavedWords = newValue;
        //4. Update UI
        if (newValue) {
            $('body').addClass('lln-highlight-saved-words');
        } else {
            $('body').removeClass('lln-highlight-saved-words');
        }
        //5. Perform other necesary operations
        // no operations
    };
    obj.getHighlightSavedWords = function() { return highlightSavedWords; };


    var verticalViewActive;
    obj.setVerticalViewActive = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === verticalViewActive) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: verticalViewActive newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        verticalViewActive = newValue;
        //4. Update UI
        if (newValue) {
            $('body').addClass('lln-vertical-view-active');
            lln.verticalView.highlightAndScrollToActiveSub();
        } else {
            $('body').removeClass('lln-vertical-view-active');
        }
        if (window.__IS_YOUTUBE) {
            lln.ui.triggerWindowResize();
        }

        //5. Perform other necesary operations
        // no operations
    };
    obj.getVerticalViewActive = function() { return verticalViewActive; };

    var bottomViewActive;
    obj.setBottomViewActive = function(newValue) {
        //1. Value changed? No? Return.
        if(newValue === bottomViewActive) { return; }
        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== true && newValue !== false) { // not a bool
            util.log("SETMAN: bottomViewActive newValue invalid: " + newValue);
            return;
        }
        //3. Set value = newValue
        bottomViewActive = newValue;
        //4. Update UI
        if (newValue) {
            $('body').addClass('lln-bottom-view-active');
        } else {
            $('body').removeClass('lln-bottom-view-active');
        }
        //5. Perform other necesary operations
        lln.bottomPanel.redrawBottomPanel();
        // no operations
    };
    obj.getBottomViewActive = function() { return bottomViewActive; };

    // Have to save settings after setting a setting by set.set...(), to commit it to storage.
    // fixme: yeah.. bit insane.
    obj.saveSettings = function() {
        save_options();
    }

    function save_options () {
        var options = {
            // darkMode: obj.getDarkMode(),
            subCount: obj.getSubCount(),
            pauseCount: obj.getPauseCount(),
            vocabSize: obj.getVocabSize(),
            transliterations: obj.getTransliterations(),
            defaultExternalDictName: obj.getDefaultExternalDictName(),
            userDefinedDictUrls: obj.getUserDefinedDictUrls(),
            autoPause: obj.getAutoPause(),
            pauseOnSubsHover: obj.getPauseOnSubsHover(),
            blurTranslations: obj.getBlurTranslations(),
            verticalViewTab: obj.getVerticalViewTab(),
            playbackRate: obj.getPlaybackRate(),
            onLeftClick: obj.getOnLeftClick(),
            onRightClick: obj.getOnRightClick(),
            fontSize: obj.getFontSize(),
            // fastPlayback: obj.getFastPlayback(),
            showMT: obj.getShowMT(),
            showHT: obj.getShowHT(),
            translationLanguageCode: obj.getTranslationLanguageCode(),
            searchSourceLanguageCode: obj.getSearchSourceLanguageCode(),
            searchTranslationLanguageCode: obj.getSearchTranslationLanguageCode(),
            // sourceLanguageCode -- this is not saved
            // listenWordOnClick: obj.getListenWordOnClick(), -- taking this out for now
            sourceLanguageCode: obj.getSourceLanguageCode(),
            lingoActive: obj.getLingoActive(),
            overrideArrowKeys: obj.getOverrideArrowKeys(),
            highlightSavedWords: obj.getHighlightSavedWords(),
            verticalViewActive: obj.getVerticalViewActive(),
            bottomViewActive: obj.getBottomViewActive(),
            userCountry: obj.getUserCountry(),
            userLanguage: obj.getUserLanguage()
        };
        util.log('SETMAN: save_options', options);

        // parent.postMessage({topic:"save_options", options: options}, '*');

        chromeStorageSet( options, function() {});
    }

    obj.restore_options = function () {

        // default options
        var options = {
            // darkMode: true,
            subCount: 0,
            pauseCount: 0,
            vocabSize: 1500,
            transliterations: "ORIG+ROMAJI",
            defaultExternalDictName: "Glosbe",
            userDefinedDictUrls: "",
            autoPause: false,
            pauseOnSubsHover: false,
            blurTranslations: false,
            verticalViewTab: 'VV_SUBS',
            playbackRate: 1,
            onLeftClick: 'showDictSpeak',
            onRightClick: 'saveWord',
            fontSize: 'normal',
            // fastPlayback: false,
            showMT: false,
            showHT: true,
            translationLanguageCode: false,
            searchSourceLanguageCode: 'auto',
            searchTranslationLanguageCode: 'en',
            // sourceLanguageCode -- this is not saved
            // listenWordOnClick: true, -- taking this out for now
            sourceLanguageCode: false,
            lingoActive: true,
            overrideArrowKeys: true,
            highlightSavedWords: true,
            verticalViewActive: true,
            bottomViewActive: true,
            userCountry: false,
            userLanguage: false,
            diocoId: Math.floor(Math.random() * 10000000) // used for tracking unlogged users or similar
        }

        chromeStorageGet( options, function(optionsFromStorage) {

            util.log('SETMAN: restore_options');
            util.log(optionsFromStorage);

            // darkMode
            // obj.setDarkMode(optionsFromStorage.darkMode);
            // Subcount
            subCount = optionsFromStorage.subCount;
            // pauseCount
            pauseCount = optionsFromStorage.pauseCount;
            // unique user id
            obj.diocoId = optionsFromStorage.diocoId;
            // Vocabsize
            obj.setVocabSize(optionsFromStorage.vocabSize);
            // Transliterations
            obj.setTransliterations(optionsFromStorage.transliterations);
            // defaultExternalDictName
            obj.setDefaultExternalDictName(optionsFromStorage.defaultExternalDictName);
            // userDefinedDictUrls
            obj.setUserDefinedDictUrls(optionsFromStorage.userDefinedDictUrls);
            // AutoPause
            obj.setAutoPause(optionsFromStorage.autoPause);
            // PauseOnSubsHover
            obj.setPauseOnSubsHover(optionsFromStorage.pauseOnSubsHover);
            // BlurTranslations
            obj.setBlurTranslations(optionsFromStorage.blurTranslations);
            // verticalViewTab
            obj.setVerticalViewTab(optionsFromStorage.verticalViewTab);
            // playbackRate
            obj.setPlaybackRate(optionsFromStorage.playbackRate);
            // onLeftClick
            obj.setOnLeftClick(optionsFromStorage.onLeftClick);
            // onRightClick
            obj.setOnRightClick(optionsFromStorage.onRightClick);
            // fontSize
            obj.setFontSize(optionsFromStorage.fontSize);
            // fastPlayback
            // obj.setFastPlayback(optionsFromStorage.fastPlayback);
            // showMT
            obj.setShowMT(optionsFromStorage.showMT);
            // showHT
            obj.setShowHT(optionsFromStorage.showHT);
            // userCountry
            obj.setUserCountry(optionsFromStorage.userCountry);
            // userLanguage
            obj.setUserLanguage(optionsFromStorage.userLanguage);
            // searchSourceLanguageCode
            obj.setSearchSourceLanguageCode(optionsFromStorage.searchSourceLanguageCode);
            // searchTranslationLanguageCode
            obj.setSearchTranslationLanguageCode(optionsFromStorage.searchTranslationLanguageCode);
            // translationLanguageCode
            // on first run, determine translation language from IP

            if(optionsFromStorage.translationLanguageCode !== false) {
                // storage has some previous value:
                if(lln.pure.cleanLangCode(optionsFromStorage.translationLanguageCode) === false) {
                    util.log("SETMAN: got an unexpected langCode from settings: " + optionsFromStorage.translationLanguageCode);
                    obj.setTranslationLanguageCode('en');
                }
                // langCode from storage is kosher:
                else {
                    obj.setTranslationLanguageCode(optionsFromStorage.translationLanguageCode);
                }
            }
            else {
                // No previous value in storage
                // First let's try get the value from the instructions cookie
                
                chromeStorageGet( { cookie_nativeLangCode_G: false }, function(storageData) {

                    const cookie_nativeLangCode_G = storageData.cookie_nativeLangCode_G;

                    var cookie_nativeLangCode_G_clean = lln.pure.cleanLangCode(cookie_nativeLangCode_G);

                    if(cookie_nativeLangCode_G_clean) {
                        // Set it, we're done.
                        util.log("SETMAN: setting translationLanguageCode from instructions cookie: " + cookie_nativeLangCode_G_clean);
                        obj.setTranslationLanguageCode(cookie_nativeLangCode_G_clean);
                        return;
                    }

                    // That didn't work. Try from navigator.

                    var navigator_langCode_G_clean = lln.pure.cleanLangCode(navigator.language);

                    if(navigator_langCode_G_clean) {
                        // Set it, we're done.
                        util.log("SETMAN: setting translationLanguageCode from navigator_langCode_G_clean: " + navigator_langCode_G_clean);
                        obj.setTranslationLanguageCode(navigator_langCode_G_clean);
                        return;
                    }

                    // That didn't work either. Default to English.

                    util.log("SETMAN: setting translationLanguageCode to 'en', other methods failed.");
                    obj.setTranslationLanguageCode('en');
                });
            }

            // source language code
            obj.setSourceLanguageCode(optionsFromStorage.sourceLanguageCode);
            // listenWordOnClick
            // obj.setListenWordOnClick(optionsFromStorage.listenWordOnClick);
            // lingoActive
            obj.setLingoActive(optionsFromStorage.lingoActive);
            // overrideArrowKeys
            obj.setOverrideArrowKeys(optionsFromStorage.overrideArrowKeys);
            // highlightSavedWords
            obj.setHighlightSavedWords(optionsFromStorage.highlightSavedWords);
            // verticalViewActive
            obj.setVerticalViewActive(optionsFromStorage.verticalViewActive);
            // bottomViewActive
            obj.setBottomViewActive(optionsFromStorage.bottomViewActive);
            /*


            $('#listenWordOnClick').prop('checked', items.listenWordOnClick);
            */

        });
    };

    // chrome.storage.onChanged.addListener(function(changes, namespace) {
    //     // fixme: check why we do this
    //     obj.restore_options();
    // });

    function onDomSettingsChange() {
        // fixme: unify this with the code that checks for data-new-subs

        // We could doing something like this instead of polling:
        // $(document).on('change', '.lln-options select, .lln-options input', function() {

        // Removed startSubEarlyMargin, endSubLateMargin

        // darkMode
        // obj.setDarkMode(document.getElementById('darkMode').checked);
        // Vocabsize
        obj.setVocabSize(parseInt($('#vocabFreq').val()));
        // Transliterations
        obj.setTransliterations($('#transliterations').val());
        // AutoPause
        obj.setAutoPause(document.getElementById('autoPause').checked);
        // PauseOnSubsHover
        obj.setPauseOnSubsHover(document.getElementById('pauseOnSubsHover').checked);
        // blurTranslations
        obj.setBlurTranslations(document.getElementById('blurTranslations').checked);
        // verticalViewTab
        obj.setVerticalViewTab($('.lln-vv-tab-title.active').attr('data-tab'));
        // playbackRate
        obj.setPlaybackRate(parseFloat($('#playbackRate').val()));
        // onLeftClick
        obj.setOnLeftClick($('#onLeftClick').val());
        // onRightClick
        obj.setOnRightClick($('#onRightClick').val());
        // fontSize
        obj.setFontSize($('#llnFontSizeSelect').val());
        // userDefinedDictUrls
        obj.setUserDefinedDictUrls($('#userDefinedDictUrls').val());
        // fastPlayback
        // obj.setFastPlayback(document.getElementById('fastPlayback').checked);
        // showMT
        obj.setShowMT(document.getElementById('showMT').checked);
        // showHT
        obj.setShowHT(document.getElementById('showHT').checked);
        // overrideArrowKeys
        obj.setOverrideArrowKeys(document.getElementById('overrideArrowKeys').checked);
        // highlightSavedWords
        obj.setHighlightSavedWords(document.getElementById('highlightSavedWords').checked);
        // translationLanguageCode
        obj.setTranslationLanguageCode($('#destLanguage').val());
        // searchSourceLanguageCode
        obj.setSearchSourceLanguageCode($('#searchSourceLanguage').val());
        // searchTranslationLanguageCode
        obj.setSearchTranslationLanguageCode($('#searchTranslationLanguage').val());
        // sourceLanguageName
        // obj.setSourceLanguageName($('.lln-options').attr('data-lang-name'));
        // sourceLanguageCode
        // obj.setSourceLanguageCode($('.lln-options').attr('data-lang'));
        // countryNumFromIp = $('.lln-options').attr('data-countryNumFromIp');
        // obj.setCountryNumFromIp($('.lln-options').attr('data-countryNumFromIp'));
    }
/*
    var alerted = false;

    setInterval(() => {
        if(__LLN_ACTIVE){
            // sourceLanguageName
            // obj.setSourceLanguageName($('.lln-options').attr('data-lang-name'));
            // sourceLanguageCode
            var langCode = $('.lln-options').attr('data-lang');
            if(langCode !== undefined) {

                var cleanLangCode = pure.cleanLangCode(langCode);

                if(cleanLangCode !== false) {
                    // langcode is supported
                    obj.setSourceLanguageCode(cleanLangCode);
                }
                else {
                    if(alerted === false) {
                        console.log("ERROR: Currenly LLN does not support language with code: " + langCode + ", please use the Feedback button if you think this should work.");
                        alerted = true;
                    }
                }
            }
        }
    }, 1000);
*/
    $(document).on('change', '.lln-options input, .lln-options select, #autoPause, #searchSourceLanguage, #searchTranslationLanguage', function(){
        onDomSettingsChange();
        save_options();
    });

    $(document).on('input', '.lln-options textarea', function(){
        onDomSettingsChange();
        save_options();
    });

    $(document).on('click', '.lln-vv-tab-title', function(e){
        e.preventDefault();
        obj.setVerticalViewTab($(this).attr('data-tab'));
        save_options();
    });
/*
    $(document).on('change', '#autoPause', function(){
        onDomSettingsChange();
        save_options();
    });
*/

/*
    $(document).on('change', '#showMT', function(){
        onDomSettingsChange();
        save_options();
    });

    $(document).on('change', '#showHT', function(){
        onDomSettingsChange();
        save_options();
    });
*/

    // Remove lingo player on click
    $(document).on('click', '.lln-toggle-bottom-view', function(e){
        e.preventDefault();
        obj.setBottomViewActive(!obj.getBottomViewActive());
        save_options();
    });

    $(document).on('click', '.lln-toggle-vertical-view', function(e){
        e.preventDefault();
        obj.setVerticalViewActive(!obj.getVerticalViewActive());
        save_options();
    });

    $(document).on('click', '#llnCloseVV', function(e){
        e.preventDefault();
        obj.setVerticalViewActive(false);
        save_options();
    });

    // Toggle lingo player on click (button in Netflix toolbar I guess.)
    $(document).on('click', '#lln-toggle-btn, #lln-activate-btn', function(e) {
        e.preventDefault();
        obj.setLingoActive(!obj.getLingoActive());
        save_options();
    });

    // Loop to catch user language and location

    var prevUserLanguage;
    var prevUserCountry;

    setInterval(function() {
        // gets values
        if(!window.__NF_languages) { return; }

        var userLanguage = window.__NF_languages[0].split("-")[0];

        var userCountry = window.__NF_languages[0].split("-")[1];

        if(userCountry in lln.pure.twoDigitCodesToNames) {
            userCountry = lln.pure.twoDigitCodesToNames[userCountry];
        }

        // Let's not abuse the chrome storage api..
        // Only if it changed.
        if(prevUserLanguage !== userLanguage || prevUserCountry !== userCountry) {
            util.log(`SETMAN: Setting userLanguage: ${userLanguage}, userCountry: ${userCountry}`);
            prevUserLanguage = userLanguage;
            prevUserCountry = userCountry;
            obj.setUserLanguage(userLanguage);
            obj.setUserCountry(userCountry);
            save_options();
        }

    }, 2000);
    
    return obj;

};

// import { isRegExp } from "util";

VidMan = function(lln) {

    var obj = {};

    //////////////////// vidMan PUBLIC API ////////////////////

    // Playback control functions
    obj.getTime;
    obj.play;
    obj.pause;
    obj.togglePause;
    obj.setPlaybackRate;
    obj.seek;

    // Subtitle related
    obj.getSubs;
    obj.setOriginalAudio;
    obj.setOriginalSubtitles;

    //////////////////// end vidMan PUBLIC API ////////////////////

    ///// Manage netflix player reference

    var _player;

    // returns player or false
    function getYTPlayer() {
        if(_player && _player.getCurrentTime){
            return _player;
        }
        else {
            return false;
        }
    }

    setInterval(function() {
        _player = document.querySelector("video");
    }, 500);

    ///// Manage Netflix Player time. Fix it because it's shit (browser's video element fault?).

    // if nf is stopped, set to nf time.
    // if playing, manually add time (25ms)
    var _precisePlayerTime = 0; 

    window.requestAnimationFrame(updatePrecisePlayerTime);

    var previous_time_ms = 0;

    function updatePrecisePlayerTime(time_ms) {

        var passed_time_ms = time_ms - previous_time_ms;

        previous_time_ms = time_ms;

        window.requestAnimationFrame(updatePrecisePlayerTime);

        if(!__LLN_ACTIVE) { return; }

        // Handle the case where getTime fails to get a player reference
        if(!getPlayerTime()){
            _precisePlayerTime = 0;
            return;
        }

        if (!getPlaying() || Math.abs(getPlayerTime() - _precisePlayerTime) > 400) {
            _precisePlayerTime = getPlayerTime(); // use reported time from netflix player
        } else {
            // _precisePlayerTime += 50 * parseFloat(_playbackRate); // use calculated time
            _precisePlayerTime += passed_time_ms * parseFloat(_playbackRate); // use calculated time
        }
    }

    // Internal use only.
    function getPlayerTime() {
        // if we get a valid player reference
        // then return the reported nf time
        // else return false
        if (getYTPlayer()) {
            return parseInt(getYTPlayer().getCurrentTime() || 0);
        }
        else {
            return false;
        }
    }

    obj.getRawTime = function() {
        return obj.getTime();
    }

    // For general use.
    obj.getTime = function() {
        // return _precisePlayerTime || 0;
        var player = getYTPlayer();

        if(player) { 
            // console.log(player.currentTime);
            return player.currentTime*1000; 
        }
        else { return 0; }
    };

    ////////// Netflix Control Functions //////////

    // Netflix Set Playing (make it play, if it ain't..)
    // no return value
    obj.play = function() {

        var player = getYTPlayer();

        // Primary method
        if(player) {
            player.play();
        }
        // Backup method
    };

    // Pause Netflix
    // no return value
    obj.pause = function() {

        var player = getYTPlayer();

        // Primary method
        if(player) {
            player.pause();
        }
        // Backup method

        lln.setMan.incrementPauseCount();
    };

    // Netflix toggle Play/Pause
    // no return value
    obj.togglePause = function() {

        var player = getYTPlayer();

        // Primary method
        if(player) {
            if(player.paused) { player.play(); util.log('playyy'); }
            else {
                util.log('pauseeeee');
                player.pause();
                lln.setMan.incrementPauseCount();
            }
        }
        // Backup method

    };

    obj.getPaused = function() {

        var player = getYTPlayer();

        // Primary method
        if(player) {
            return player.paused;
        }
        else {
            return true;
        }
        // Backup method

    };

    function getPlaying() {

        var player = getYTPlayer();

        if(!player) { return false; }

        // fixme: maybe broken
        // return !player.paused;

        return !!(player.currentTime > 0 && !player.paused && !player.ended && player.readyState > 2)

    }

    var _playbackRate = 1;
    var playbackRateTimeout;
    obj.setPlaybackRate = function(rate) {

        checkTypes(arguments, "number");

        // fixme: todo
/*
        if(_playbackRate === rate) { return; }

        var player = getYTPlayer();

        if(player) {
            player.setPlaybackRate(rate);
            _playbackRate = rate;
            util.log("NF: playback rate set to " + rate);
        }
        else {
            // try again in one second
            // make sure we're not piling up timeouts
            clearTimeout(playbackRateTimeout);
            playbackRateTimeout = setTimeout(function() {
                obj.setPlaybackRate(rate);
            }, 1000);
        }
*/
    }

    // seek the nf player, or return false
    obj.seek = function(time) {

        checkTypes(arguments, "number");

        // fixme: some more checks
        if(time === null || time === "null") {
            util.log("NF: Strange stuff happening")
        }

        /*
        // Don't do a seek if we are already really close.
        if( Math.abs( (time - getPlayerTime()) ) < 100 ) {
            return;
        }
        */

        // change to seconds
        var seekValue = parseInt(time)/1000;

        // console.log('SEEKing to ', time, seekValue);

        var player = getYTPlayer();

        if(player) {
            player.currentTime = seekValue;
            // _precisePlayerTime = seekValue;
        }
        else { 
            return false;
        }
    }

    ////////// Subtitle stuff //////////

    // Look throught the manifest Audio tracks, try to find the original audio track.
    // Return false if not found.
    function getOriginalAudioTrack() {
        // track not found
        return false;
    }

    // called by setInterval in nf.js to get the primary subs
    // and also by SubManager to get the secondary subs
    obj.getSubs = function(movieId, textTrackId, callback) {

        console.log('getSubs arguments ', arguments);

        checkTypes(arguments, "string|false,string|false,function");

        if(!movieId || !textTrackId) { 
            callback(false, false, false); 
            return; 
        }

        let activeManifest = _manifests[movieId];

        if((!activeManifest) /*|| (!activeManifest.timedtexttracks)*/) { 
            util.log("NF: ERROR: getSubs2, couldn't retrieve manifest.", JSON.stringify(_manifests)); 
            callback(false, false, false);
            return;
        }

        let vssId = false;
        let translationLangCode = false;

        if(textTrackId.includes('|')) {
            // this is a translation track
            vssId = textTrackId.split('|')[0];
            translationLangCode = textTrackId.split('|')[1];
        }
        else {
            // regular track
            vssId = textTrackId;
        }

        let track = activeManifest.filter(track => track.vssId === vssId)[0];

        if((!track) /*|| (!activeManifest.timedtexttracks)*/) { 
            util.log(`NF: ERROR: track with vssId (${vssId}) not found.`);
            // console.log(activeManifest);
            callback(false, false, false);
            return;
        }

        let link;

        if(translationLangCode) {
            link = track.baseUrl + '&fmt=srv3&tlang=' + translationLangCode;
        }
        else {
            // get format with word timings
            link = track.baseUrl + '&fmt=srv3';
        }

        // console.log('CCC ', link);

        // fixme: error cases
        function parseYT(response) {

            let parser = new DOMParser();

            let xml = parser.parseFromString(response, "text/xml");

            // console.log(convert34(response));

            // window.xml = xml;

            if(xml.documentElement.nodeName === "transcript") {

                util.log(`YTPARSE: type 'transcript'`);

                /*
                <transcript>
                    <text start="0.06" dur="6.27">I guess we play there we go hi welcome</text>
                    <text start="2.82" dur="5.97">to my talk on Web Store I&#39;m Nick nisi</text>
                */

                let subtitles = [];
            
                if (xml != "" && xml.getElementsByTagName("text").length > 0) {
            
                    let text_elements = xml.getElementsByTagName("text");
    
                    /*
                        <transcript>
                            <text start="0" dur="4.94">[MUSIC PLAYING]</text>
                            <text start="4.94" dur="0.92">Stanford University.</text>
                            <text start="5.86" dur="3.5"/>
                            <text start="9.36" dur="3.37">This is BIO 150, isn&#39;t it?</text>
                    */
    
                    // fixme: scary!!!
                    function htmlDecode(value){
                        return $('<div/>').html(value).text();
                    }
            
                    for(let text_element of text_elements) {
    
                        /*
                        https://www.youtube.com/api/timedtext?v=NNnIGh9g6fA&asr_langs=de%2Cen%2Ces%2Cfr%2Cit%2Cja%2Cko%2Cnl%2Cpt%2Cru&caps=asr&xorp=true&hl=en&ip=0.0.0.0&ipbits=0&expire=1570756141&sparams=ip%2Cipbits%2Cexpire%2Cv%2Casr_langs%2Ccaps%2Cxorp&signature=1531EE56046134DE8CA39CA25572007327ED4289.BC1A9B06749B32E7AED39AE0FA52D90F9A4B6E17&key=yt8&lang=en&name=CC&fmt=srv3&xorb=2&xobt=3&xovt=3
    
                        https://www.youtube.com/api/timedtext?v=NNnIGh9g6fA&asr_langs=de,en,es,fr,it,ja,ko,nl,pt,ru&caps=asr&xorp=true&hl=en&ip=0.0.0.0&ipbits=0&expire=1570756141&sparams=ip,ipbits,expire,v,asr_langs,caps,xorp&signature=164968F4869F160E50D0308CFCBD0D1E93F18072.D002FC214744602DBB78820FF04E65FEC16354F2&key=yt8&lang=en
    
                        https://www.youtube.com/api/timedtext?v=NNnIGh9g6fA&asr_langs=de,en,es,fr,it,ja,ko,nl,pt,ru&caps=asr&xorp=true&hl=en&ip=0.0.0.0&ipbits=0&expire=1570756141&sparams=ip,ipbits,expire,v,asr_langs,caps,xorp&signature=1531EE56046134DE8CA39CA25572007327ED4289.BC1A9B06749B32E7AED39AE0FA52D90F9A4B6E17&key=yt8&lang=en&name=CC
                        https://www.youtube.com/api/timedtext?v=NNnIGh9g6fA&lang=en
                        */
            
                        let newSubtitle = [];
    
                        // <text start="4.94" dur="0.92">Stanford University.</text>
    
                        // [{text: "123", begin: XXX, end: XXX}, {text: "123", begin: XXX, end: XXX}]
    
                        // start
                        newSubtitle[0] = parseInt(text_element.attributes["start"].value*1000);
                        const duration = parseInt(text_element.attributes["dur"].value*1000);
                        // end
                        newSubtitle[1] = newSubtitle[0] + duration;
                        // limit previous sub's duration to current sub's start
                        if (subtitles.length && subtitles[subtitles.length - 1][1] > newSubtitle[0]) {
                            subtitles[subtitles.length - 1][1] = newSubtitle[0];
                        }
    
                        // text
                        newSubtitle[2] = htmlDecode(text_element.textContent);
    
                        subtitles.push(newSubtitle);
                    }
                }

                // subs shouldn't overlap
                for(let k = 0; k < subtitles.length-1; k++) {
                    nextStartTime = subtitles[k+1][0];
                    if(subtitles[k][1] > nextStartTime) {
                        subtitles[k][1] = nextStartTime;
                    }
                }
            
                return subtitles;

            }
            else if(xml.documentElement.nodeName === "timedtext") {

                util.log(`YTPARSE: type 'timedtext'`);
                /*
                <timedtext format="3">
                <body>
                <p t="60" d="6270"> Creo que jugamos allí vamos hola bienvenidos </p>
                <p t="2820" d="5970"> a mi charla en la tienda web Soy Nick Nisi </p>
                */

                // <timedtext format="3">

                // let format = xml.getElementsByTagName("timedtext")[0].attributes["format"].value;
            
                let subtitles = [];
            
                if (xml != "" && xml.getElementsByTagName("p").length > 0) {
            
                    // get p elements
                    let text_elements = xml.getElementsByTagName("p");

                    /*
                    <timedtext format="3">
                    <body>
                        <p t="4430" d="7329">La Universidad de Stanford a menudo hacía preguntas</p>
                        <p t="9269" d="6961"> cual es la diferencia entre bio 150 </p>
                        <p t="11759" d="7530"> bio 250 y es hum bio 160 no </p>
                        <p t="16230" d="5879"> diferencia es exactamente lo mismo, así que </p>
                        <p t="19289" d="7371"> el mismo requisito, la misma unidad, así que tome </p>
                    */

                    // or

                    /*
                    <p t="243490" d="3960" w="1">
                        <s ac="252">can't</s>
                        <s t="390" ac="224"> describe</s>
                    */

                    // fixme: scary!!!
                    function htmlDecode(value){
                        return $('<div/>').html(value).text();
                    }

                    // let words = [];
            
                    for(let i = 0; i < text_elements.length; i++) {

                        let text_element = text_elements[i];

                        if(!text_element.attributes["d"]) {
                            continue;
                        }
            
                        let newSubtitle = [];

                        // machine translations
                        // { 1: text, 2: text }

                        // fixme: wierd
                        newSubtitle[0] = parseInt(text_element.attributes["t"].value);
                        const duration = parseInt(text_element.attributes["d"].value);
                        newSubtitle[1] = newSubtitle[0] + duration;

                        // limit previous sub's duration to current sub's start
                        if (subtitles.length && subtitles[subtitles.length - 1][1] > newSubtitle[0]) {
                            subtitles[subtitles.length - 1][1] = newSubtitle[0];
                        }

                        // newSubtitle.text = htmlDecode(text_element.textContent);

                        // subtitles[i] = newSubtitle.text;

                        if(text_element.textContent === '\n') {
                            continue;
                        }

                        if(text_element.childNodes.length > 0) {
                            newSubtitle[2] = "";
                            for(let child of text_element.childNodes) {

                                /*
                                // The text here is also a 'child element'?
                                <p t="176610" d="9369" w="1">[Music]</p>
                                <p t="187950" w="1" a="1"> </p>
                                <p t="187960" d="3049" w="1">[Applause]</p>
                                <p t="191800" w="1" a="1"> </p>
                                <p t="191810" d="3120" w="1">[Music]</p>
                                */
                                // if(child.nodeName === "#text") {
                                //     continue;
                                // }

                                newSubtitle[2] += htmlDecode(child.textContent);

                                // for words:
                                // let word = {};
                                // console.log('c');
                                // console.log(child);
                                // window.text_element = text_element;
                                // window.child = child;
                                // console.log(child.attributes["t"]);

                                // let offset = parseInt(child.attributes["t"] ? child.attributes["t"].value : 0);
                                // word.start = newSubtitle[0] + offset;
                                // console.log('d');
                                // word.ac = parseInt(child.attributes["ac"].value);
                                // word.text = htmlDecode(child.textContent);
                                // words.push(word);
                            }
                        }
                        else {
                            newSubtitle[2] = htmlDecode(text_element.textContent);
                        }

                        subtitles.push(newSubtitle);
                    }

                    // Some stuff for investigating word timings:

                    // for(let k=1; k < words.length; k++) {
                    //     // time since last
                    //     words[k].timeSinceLast = words[k].start - words[k-1].start;
                    // }

                    // for(let k=0; k < words.length; k++) {
                    //     // next two avg
                    //     words[k].nextTwo = (words[k].timeSinceLast || 0) + ((words[k+1] || {}).timeSinceLast || 0);
                    // }

                    // for(let word of words) {

                    //     let st = '-'.repeat(word.timeSinceLast/100) + word.text; 
                    //     console.log(st);

                    //     // let st = '-'.repeat(word.nextTwo/100) + word.text+ '\n'; 
                    //     // console.log(st);
                    //     /*
                    //     if(word.timeSinceLast >= 1000) {
                    //         console.log('\n\n' + word.text+ '\n');
                    //     }
                    //     else {
                    //         let st = '-'.repeat(word.timeSinceLast/100) + word.text+ '\n'; 
                    //         console.log(st);
                    //     }
                    //     */

                    // }

                    // if(!window.words) window.words = words;
                }

                return subtitles;
            }
            else {
                // fixme:
                util.log('YT: parseYT, unknown root type: ', xml.documentElement.nodeName);
                util.log(response);
            }
        }

        $.ajax({ 
            url: link,
            type : 'GET',
            retries : 2,
            dataType: "text",
            success: function(rawSubs) {
                util.log("NF: INFO: getSubs2: fetched Subs.");

                if(!rawSubs) { rawSubs = false; }

                var parsedSubs = false;

                try {
                    parsedSubs = parseYT(rawSubs);
                }
                catch(error) {
                    util.fuck(`NF: subs parse error: ${error}`);
                    callback(false, false, false);
                    return;
                }

                // fixme:
                let metadata = { fakeMetdata: true };
                metadata.md5 = md5(rawSubs);

                if(parsedSubs) {
                    util.log("NF: INFO: getSubs2: Subs parsed OK.");
                    callback(parsedSubs, rawSubs, metadata);
                    return;
                }
                else {
                    util.fuck("NF: getSubs2: Subs parse false.");
                    callback(false, false, false);
                    return;
                }
            },
            error: function() {

                this.retries--;
                if (this.retries >= 0) {
                    // try again
                    util.log("NF: GET failed, retry getting subs.");
                    $.ajax(this);
                    return;
                }

                // give up
                util.fuck("NF: ERROR: getSubs2: Failed to Fetch Subs (3 times).");
                callback(false, false, false);
                return;
            }
        });
    }

    // ids
    var _movieId = false;
    // var _audioTrackId = false;
    var _textTrackId = false;

    // These are Netflix style language code
    // They are passed to subMan so it can decide whether to show a warning.

    // var _correctedMovieIds = [];
    var setOriginalsRetryCounter = 0;

/*
    setInterval(function() {

        if(!__LLN_ACTIVE) { return; }

        // get player
        var player = getYTPlayer();
        if(!player) { 
            util.log("NF: !player");
            return; 
        }

        // get newActiveTextTrackId
        var textTrack_player = player.getTimedTextTrack();
        if(!textTrack_player) { 
            util.log("NF: !textTrack_player");
            return; 
        }
        var newActiveTextTrackId = textTrack_player.trackId;

        // get newMovieId
        var playerElement = player.getElement();
        if(!playerElement) { 
            util.log("NF: !playerElement");
            return false; 
        }
        var newMovieId = playerElement.id;

        // Case haven't fully loaded yet.
        if(!newMovieId || !newActiveTextTrackId) {
            // util.log(`NF: Waiting for subs to load. ${newMovieId} ${newAudioTrackId} ${newActiveTextTrackId}`)
            util.log("NF: !newMovieId || !newActiveTextTrackId");
            return;
        }

        // Did the subs change?
        if(_movieId === newMovieId 
        && _textTrackId === newActiveTextTrackId) {
            // Nope, everything the same..
            return;
        }


        // // Did we correct this movieId already? If so, save.
        // // fixme: review
        // if(!_correctedMovieIds.includes(newMovieId)) {
            
        //     if(obj.setOriginalAudio() && obj.setOriginalSubtitles())
        //     {
        //         setOriginalsRetryCounter = 0;
        //         _correctedMovieIds.push(newMovieId);
        //         util.log("NF: Set Audio and Subs to originals.");
        //         return;
        //     }
        //     else {
        //         // didn't manages, player probably hasn't loaded audio tracks yet.
        //         setOriginalsRetryCounter += 1;
        //         if(setOriginalsRetryCounter < 10) { // max wait 5s
        //             util.log("NF: Waiting for player to load audio tracks..");
        //             return;
        //         }
        //         else {
        //             util.log("NF: Gave up waiting, continuing.");
        //         }
        //     }
        // }

        // Something changed, let's fetch the subs again..

        util.log(`NF: Netflix change detected. New values - movieId: ${newMovieId}, audioTrackId: ${newAudioTrackId}, textTrackId: ${newActiveTextTrackId}` );

        var data = {};

        // data.movieId = newMovieId;
        // data.audioTrackId = newAudioTrackId;
        // data.textTrackId = textTrackId;
        // data.textTrackLangCode_N = false;
        // data.textTrackLangCode_G = false;
        // data.textTrackType = false;
        // data.audioTrackLangCode_N = false;
        // data.audioTrackLangCode_G = false;
        // data.originalAudioLangCode_N = false;
        // data.originalAudioLangCode_G = false;
        // data.availableLanguages_N = {};
        // data.availableLanguages_G = {};

        // // Adding these:
        // data.duration = 2815000;
        // data.viewableType = "EPISODE";

        // // And these:
        // data.ttIds = {};


        // Note: language codes are either valid or false.

        data.movieId = newMovieId;
        // data.audioTrackId = newAudioTrackId;
        // data.textTrackId = newActiveTextTrackId;

        ///// activeTextTrackDownloadbleId
        data.activeTextTrackDownloadbleId = false;

        if(    activeTextTrack 
            && activeTextTrack.downloadableIds 
            && activeTextTrack.downloadableIds["webvtt-lssdh-ios8"] ) 
        {
            data.activeTextTrackDownloadbleId = activeTextTrack.downloadableIds["webvtt-lssdh-ios8"];
        }

        ///// textTrackLangCode_N
        // Netflix bcp47 code for the currently selected subtitles
        // or false, if not able to retrieve code or subs off
        data.textTrackLangCode_N = false;

        if(activeTextTrack) {
            // if it's a real language track, not an 'off' (forced) track
            if(    activeTextTrack.language !== null 
                && activeTextTrack.isForcedNarrative !== true) 
            {
                data.textTrackLangCode_N = activeTextTrack.language;
            }
        }

        data.textTrackLangCode_G = pure.cleanLangCode(data.textTrackLangCode_N);

        data.textTrackType = activeTextTrack.rawTrackType; // ok

        // set data.audioTrackLangCode_N
        data.audioTrackLangCode_N = false;
        var audioTrack =  player.getAudioTrack();
        if(audioTrack) { data.audioTrackLangCode_N = audioTrack.bcp47; }

        data.audioTrackLangCode_G = pure.cleanLangCode(data.audioTrackLangCode_N);

        // originalAudioLangCode_N
        data.originalAudioLangCode_N = false;
        data.originalAudioLangCode_G = false;

        for(var i=0; i < activeManifest.audio_tracks.length; i++) {

            if(activeManifest.audio_tracks[i].isNative === true) {
                // track found
                if(activeManifest.audio_tracks[i].language) {
                    data.originalAudioLangCode_N = activeManifest.audio_tracks[i].language;
                    data.originalAudioLangCode_G = pure.cleanLangCode(data.originalAudioLangCode_N);
                }
            }
        }

        util.log(`NF: TextTrack bcp47: ${data.textTrackLangCode_N}, originalAudioLangCode_N: ${data.originalAudioLangCode_N}` );

        // obj.getSubs(textTrackLangCode, subMan.setSubtitles, textTrackId);


        ///// data.availableLanguages_N        
        data.availableLanguages_N = {};

        // Notes:
        // rawTrackType "subtitles"
        // No forced narrative tracks
        // isNoneTrack: false (or .language shouldn't be null)
        for(var i=0; i < activeManifest.timedtexttracks.length; i++) {
            if(activeManifest.timedtexttracks[i].rawTrackType === "subtitles" && activeManifest.timedtexttracks[i].isForcedNarrative === false && activeManifest.timedtexttracks[i].isNoneTrack === false ){

                data.availableLanguages_N[activeManifest.timedtexttracks[i].language] = activeManifest.timedtexttracks[i].downloadableIds['webvtt-lssdh-ios8'];
            }
        }

        // Notes:
        // If there was no "subtitles" track, add the "closedcaptions" as a second choice.
        for(var i=0; i < activeManifest.timedtexttracks.length; i++) {
            if(activeManifest.timedtexttracks[i].rawTrackType === "closedcaptions" && activeManifest.timedtexttracks[i].isForcedNarrative === false && activeManifest.timedtexttracks[i].isNoneTrack === false ){

                if(!data.availableLanguages_N[activeManifest.timedtexttracks[i].language]) {
                    data.availableLanguages_N[activeManifest.timedtexttracks[i].language] = activeManifest.timedtexttracks[i].downloadableIds['webvtt-lssdh-ios8'];
                }
            }
        }

        ///// data.availableLanguages_G
        data.availableLanguages_G = {};

        for(langcode of Object.keys(data.availableLanguages_N)) {
            if(pure.cleanLangCode(langcode) in data.availableLanguages_G) {
                util.log(`NF: INFO: Overwriting key in data.availableLanguages_G: ${langcode}, ${pure.cleanLangCode(langcode)}`);
            }
            data.availableLanguages_G[pure.cleanLangCode(langcode)] = data.availableLanguages_N[langcode];
        }

        ///// data.ttIds        
        data.ttIds = {};

        // Notes:
        // No forced narrative tracks
        // isNoneTrack: false
        for(var i=0; i < activeManifest.timedtexttracks.length; i++) {
            if(activeManifest.timedtexttracks[i].isForcedNarrative === false && activeManifest.timedtexttracks[i].isNoneTrack === false ) {
                data.ttIds[activeManifest.timedtexttracks[i].downloadableIds["webvtt-lssdh-ios8"]] = true;
            }
        }

        // Adding these:
        data.duration = activeManifest.duration;
        data.viewableType = activeManifest.viewableType;

        // Point of no return..

        _movieId = newMovieId;
        _audioTrackId = newAudioTrackId;
        _textTrackId = newActiveTextTrackId;

        // Function should end like this:
        subMan.onNewMetadata(data);
        $(document).trigger("LLN_netflixTrackChanged");

    }, 500);
*/

    obj.setOriginalAudio = function () {

        var player = getYTPlayer();

        if(!player) { return false; }

        var list = player.getAudioTrackList();

        if(!list) { return false; }

        var originalAudioTrack = getOriginalAudioTrack();

        if(!originalAudioTrack || !originalAudioTrack.language) {
            util.log("NF: ERROR: setOriginalAudio didn't find original audio track.");
            return false;
        }

        var originalAudioLangCode_N = originalAudioTrack.language;

        if(_player.getAudioTrack().bcp47 === originalAudioLangCode_N) {
            // Audio track already ok
            return true;
        }

        // Try "PRIMARY" first
        for(var i=0; i < list.length; i++) {
            if(list[i].bcp47 === originalAudioLangCode_N && list[i].trackType === "PRIMARY") {
                player.setAudioTrack(list[i]);
                return false;
            }
        }

        // Try "ASSISTIVE" next
        for(var i=0; i < list.length; i++) {
            if(list[i].bcp47 === originalAudioLangCode_N) {
                player.setAudioTrack(list[i]);
                return false;
            }
        }

        // util.log("NF: ERROR: watch out! Something changed! 321.");
/*
        // Else this:
        for(var i=0; i < list.length; i++) {
            if(list[i].trackId.endsWith('1;')) {
                player.setAudioTrack(list[i]);
                return true;
            }
        }
*/
        util.log("NF: ERROR: setOriginalAudio didn't find original audio track.");
        return false;

    }

    obj.setOriginalSubtitles = function () {

       // fixme: Might change at some point, be aware:
        // if( list[i].trackId.startsWith("T:1:1;1;") )

        // fixme: could be out of sync:
        var activeManifest = false;

        var playerMovieId = getPlayerMovieId();
        if(playerMovieId && playerMovieId in window.manifests) {
            activeManifest = window.manifests[playerMovieId];
        }

        if ((!activeManifest) || (!activeManifest.timedtexttracks)) {
            return false;
        }

        var list = activeManifest.timedtexttracks;

       if(!list) { return false; }

        var trackId = false;

        var originalAudioTrack = getOriginalAudioTrack();

        if(!originalAudioTrack || !originalAudioTrack.language) {
            util.log("NF: ERROR: setOriginalAudio didn't find original audio track.");
            return false;
        }

        var originalAudioLangCode_N = originalAudioTrack.language;

        // try to get "subtitles" first
       for(var i=0; i < list.length; i++) {

            if(list[i].isForcedNarrative !== true && list[i].rawTrackType === "subtitles" && originalAudioLangCode_N === list[i].language  ){
                trackId = list[i].new_track_id;
                break;
                //player.setTimedTextTrack(list[i]);
                //return true;
            }
        }

        // then "captions"
        if(!trackId) {
            for(var i=0; i < list.length; i++) {

                if(list[i].isForcedNarrative !== true && list[i].rawTrackType === "closedcaptions" && originalAudioLangCode_N === list[i].language  ){
                    trackId = list[i].new_track_id;
                    break;
                }
            }
        }

        if(!trackId) {
            util.log("NF: ERROR: setOriginalSubtitles didn't find original subs.");
            return false;
        }

       var player = getYTPlayer();

       if(!player) { return false; }

       var list = player.getTimedTextTrackList();

       if(!list) { return false; }

       for(var i=0; i < list.length; i++) {

            if(list[i].trackId === trackId){
                player.setTimedTextTrack(list[i]);
                return true;
            }
        }

        return false;

    }

    $(document).on('click', '.button-nfplayerBack', function(e){
        location.href = '/browse';
        return false;
    });


    /*
    JSON.parse(ytplayer.config.args.player_response).captions.playerCaptionsTracklistRenderer.captionTracks[0].languageCode
    */

    function getTrackList(callback) {

        // fixme: watchout
        var videoID = window.location.search.split("=")[1];

        fetch(`https://video.google.com/timedtext?type=list&v=${videoID}`).then(function(res) {

            res.clone().text().then(function(response) {

                // console.log(response);

                var parser = new DOMParser();

                var xml = parser.parseFromString(response, "text/xml");

                tracks = [];

                if (xml != "" && xml.getElementsByTagName("track").length > 0) {

                    var xmls = xml.getElementsByTagName("track");

                    /*
                        <?xml version="1.0" encoding="utf-8" ?>
                            <transcript_list docid="3808294974439614960">
                                <track id="0" name="CC" lang_code="en" lang_original="English" lang_translated="English" lang_default="true"/>
                            </transcript_list>
                    */

                    for(let track_xml of xmls) {

                        /*
                        https://www.youtube.com/api/timedtext?v=NNnIGh9g6fA&asr_langs=de%2Cen%2Ces%2Cfr%2Cit%2Cja%2Cko%2Cnl%2Cpt%2Cru&caps=asr&xorp=true&hl=en&ip=0.0.0.0&ipbits=0&expire=1570756141&sparams=ip%2Cipbits%2Cexpire%2Cv%2Casr_langs%2Ccaps%2Cxorp&signature=1531EE56046134DE8CA39CA25572007327ED4289.BC1A9B06749B32E7AED39AE0FA52D90F9A4B6E17&key=yt8&lang=en&name=CC&fmt=srv3&xorb=2&xobt=3&xovt=3

                        https://www.youtube.com/api/timedtext?v=NNnIGh9g6fA&asr_langs=de,en,es,fr,it,ja,ko,nl,pt,ru&caps=asr&xorp=true&hl=en&ip=0.0.0.0&ipbits=0&expire=1570756141&sparams=ip,ipbits,expire,v,asr_langs,caps,xorp&signature=164968F4869F160E50D0308CFCBD0D1E93F18072.D002FC214744602DBB78820FF04E65FEC16354F2&key=yt8&lang=en

                        https://www.youtube.com/api/timedtext?v=NNnIGh9g6fA&asr_langs=de,en,es,fr,it,ja,ko,nl,pt,ru&caps=asr&xorp=true&hl=en&ip=0.0.0.0&ipbits=0&expire=1570756141&sparams=ip,ipbits,expire,v,asr_langs,caps,xorp&signature=1531EE56046134DE8CA39CA25572007327ED4289.BC1A9B06749B32E7AED39AE0FA52D90F9A4B6E17&key=yt8&lang=en&name=CC
                        https://www.youtube.com/api/timedtext?v=NNnIGh9g6fA&lang=en
                        */

                        var newTrack = {};

                        newTrack.id = track_xml.attributes["id"].value;
                        newTrack.name = track_xml.attributes["name"].value;
                        newTrack.lang_code = track_xml.attributes["lang_code"].value;
                        newTrack.lang_original = track_xml.attributes["lang_original"].value;
                        newTrack.lang_translated = track_xml.attributes["lang_translated"].value;
                        newTrack.lang_default = (track_xml.attributes["lang_default"] || {}).value || null;

                        newTrack.link = `https://video.google.com/timedtext?v=${videoID}&lang=${newTrack.lang_code}&name=${newTrack.name}`;

                        tracks.push(newTrack);
                    }
                }

                callback(tracks);
            });
        });
    }

    function getAutoCaptionsLink(callback) {

        // fixme: watchout
        var videoId = window.location.search.split("=")[1];

        // fixme: handle errors

        fetch("https://www.youtube.com/watch?v=" + videoId).then(function(res) {

            res.clone().text().then(function(response) {

                // console.log(response);
                let has_auto_generated = response.match("kind=asr");
                let link_rg = response.match(/https\:\/\/www\.youtube\.com\/api\/timedtext\?.*?"/);

                if (link_rg != null && has_auto_generated != null) {

                    let link = link_rg[0].replace(/\"/g, "").replace(/\\u0026/g, "&");
                    link += "&kind=asr&lang=en&fmt=srv3&tlang=";

                    callback(link)
                    // console.log(link);
                }
            });
        });
    }

    var _pageURL = false;
    var _videoId = false;
    var _activeTextTrack_stringified = false;
    var _captionTracks_stringified = false;

    _manifests = {};

    var _correctedMovieIds = [];

    setInterval(function() {

        // fixme:
        // consider order of everything going on here
        // debounce changes going to onMetaData
        // consider cases where data could be out of sync

        if(!__LLN_ACTIVE) { return; }

        ////////// Figure out if should reload or not

        // let newPageURL = window.location.href;

        // another way to get _videoId
        // const url = new URL(window.location.href);
        // newVideoId = url.searchParams.get('v');

        let somethingChanged = false;

        ///// newActiveTextTrack

        // fixme: getLucky().getOption("captions","track") may return undefined
        let newActiveTextTrack = getLucky().getOption("captions","track");
        let newActiveTextTrack_stringified = JSON.stringify(newActiveTextTrack);

        if(_activeTextTrack_stringified !== newActiveTextTrack_stringified) {
            _activeTextTrack_stringified = newActiveTextTrack_stringified;
            util.log(`YT: _activeTextTrack_stringified changed: ${newActiveTextTrack_stringified}.`);
            somethingChanged = true;
        }

        ///// newVideoId

        //getLucky().getPlayerResponse().captions.playerCaptionsRenderer.baseUrl

        let playerResponse = getLucky().getPlayerResponse();

        let newVideoId = false;
        
        if(playerResponse && playerResponse.videoDetails && playerResponse.videoDetails.videoId){
            // was .videoId a couple of days ago..
            newVideoId = playerResponse.videoDetails.videoId;
        }

        // console.log(newVideoId);

        if(_videoId !== newVideoId) {
            _videoId = newVideoId;
            util.log(`YT: _videoId changed: ${JSON.stringify(newVideoId)}`);
            somethingChanged = true;
        }

        // trackList can be undefined
        let optionsTrackList = getLucky().getOption("captions", "tracklist", {includeAsr:true});

        // We don't run this before optionsTrackList is available
        // fixme: could be out of sync with newVideoId from playerResponse
        if(!_correctedMovieIds.includes(newVideoId) && optionsTrackList) {
            
            // We didn't 'fix' subtitles yet on this video

            ///// Try figure out the native language:
            let originalLanguage_G = false;

            let asrTracks = optionsTrackList.filter(x => x.kind === "asr");;

            let subtitlesChanged = false;
            
            if(asrTracks.length === 1) {
                // Yes, we figured out original language
                originalLanguage_G = asrTracks[0].languageCode;
                util.log(`YT: ASR lang found: ${originalLanguage_G}`);
                // Look for 'human' subs
                let humanTracks = optionsTrackList.filter(x => x.languageCode === originalLanguage_G
                                                    && x.kind === ""); // not ASR
                if(humanTracks.length === 1) {
                    // Use the human subs
                    util.log(`YT: Found human subs, setting.`);
                    // Setting a track also switches on captions on yt, if they are off.
                    getLucky().setOption("captions", "track", humanTracks[0]);
                }
                else {
                    util.log(`YT: No human subs found, setting ASR.`);
                    getLucky().setOption("captions", "track", asrTracks[0]);
                }

                subtitlesChanged = true;
            }
            else if (newActiveTextTrack_stringified === '{}') {
                // Subtitles are off, let's try switch them on, let YT decide the lang
                util.log(`YT: Detected subs off, switching on.`);
                getLucky().toggleSubtitles();
                subtitlesChanged = true;
            }

            _correctedMovieIds.push(newVideoId);

            if(subtitlesChanged === true) {
                // let's start again on next call with the new track
                return; 
            }
        }


        ////////// Get manifests / captionTracks if we can
        // we only use this info for base URLS..

        // fixme: 
        if(newVideoId && !_manifests[newVideoId]) {

            if(     playerResponse 
                &&  playerResponse.captions 
                &&  playerResponse.captions.playerCaptionsTracklistRenderer
                &&  playerResponse.captions.playerCaptionsTracklistRenderer.captionTracks ) {

                let captionTracks = playerResponse.captions.playerCaptionsTracklistRenderer.captionTracks;

                // store a deep copy of captionTracks
                _manifests[_videoId] = JSON.parse(JSON.stringify(captionTracks));
            }
        }

        let captionTracks = _manifests[_videoId] || false;

        // console.log('CT: ', captionTracks);

        if(_captionTracks_stringified !== JSON.stringify(captionTracks)) {
            _captionTracks_stringified = JSON.stringify(captionTracks);
            util.log(`YT: _captionTracks_stringified changed: ${_captionTracks_stringified}`);
            somethingChanged = true;
        }

        //// somethingChanged?

        if(!somethingChanged) {
            // console.log('YT: !somethingChanged, returning.');
            // wait till defined..
            return;
        }

        // POINT OF NO RETURN!!
        // BELOW HERE, CODE WILL ONE RUN ONCE PER CHANGE!!
        // BEWARE YE!! BEWARE YE!!
        
        

        if(window.location.pathname === '/watch') {

        }

        //console.log('YT: Load');

        /*
        displayName: "Dutch >> Basque"
        id: null
        is_default: false
        is_servable: false
        is_translateable: true
        kind: ""
        languageCode: "nl"
        languageName: "Dutch"
        name: null
        translationLanguage: {languageCode: "eu", languageName: "Basque"}
        vss_id: ".nl"
        */

        ////////// figure out ytCaptionsEnabled

        let ytCaptionsEnabled;

        if(playerResponse) {
            // Need player response to do anything useful.

            if(!_videoId) {
                // _video not available yet
                util.log('YT: ytCaptionsEnabled false, !_video');
                ytCaptionsEnabled = false;
            }
            else if(!newActiveTextTrack) {
                // newActiveTextTrack can be undefined, not loaded yet?
                util.log('YT: ytCaptionsEnabled false, !newActiveTextTrack');
                ytCaptionsEnabled = false;
            }
            else if(newActiveTextTrack_stringified === '{}') {
                // subs off?
                util.log('YT: ytCaptionsEnabled false, newActiveTextTrack_stringified === {}');
                ytCaptionsEnabled = false;
            }
            else if(!newActiveTextTrack.vss_id) {
                // subs off?
                util.log('YT: ytCaptionsEnabled false, !newActiveTextTrack.vss_id');
                ytCaptionsEnabled = false;
            }
            else {
                util.log('YT: ytCaptionsEnabled true.');
                ytCaptionsEnabled = true;
            }
        }
        else {
            util.log('YT: ytCaptionsEnabled false, !playerResponse');
            ytCaptionsEnabled = false;
        }

        ////////// Assemble video metadata to send to subManager

        let metadata;

        /* Here's what we're gonna send..
        movieId - Youtube video ID
        vssId: - This is like 'a.en'
        LLY_TRACK_ID: - This is like 'a.en|de' - English subs translated to German
        textTrackLangCode_G: - This is 'en'
        languageName: 'English'
        is_translateable: true or false
        */

        // try get these:
        let title = false;
        if(    playerResponse
            && playerResponse.videoDetails
            && playerResponse.videoDetails.title) {
                title = playerResponse.videoDetails.title;
        }
        let channelId = false;
        if(    playerResponse
            && playerResponse.videoDetails
            && playerResponse.videoDetails.channelId) {
                channelId = playerResponse.videoDetails.channelId;
        }
        let channelName = false;
        if(    playerResponse
            && playerResponse.microformat
            && playerResponse.microformat.playerMicroformatRenderer
            && playerResponse.microformat.playerMicroformatRenderer.ownerChannelName) {
                channelName = playerResponse.microformat.playerMicroformatRenderer.ownerChannelName;
        }

        if(!ytCaptionsEnabled) {
            // captions off

            metadata = {
                movieId: _videoId,
                vssId: false,
                LLY_TRACK_ID: false,
                textTrackLangCode_G: false,
                languageName: false,
                is_translateable: false,
                displayName: false,
                isFromASR: false,
                isTranslatedTrack: false,
                originalLangCode_G: false,
                originalLanguageName: false,
                title: title,
                channelId: channelId,
                channelName: channelName,
                captionTracks
            };
        }
        else if(newActiveTextTrack.translationLanguage) {
            // translated captions
            metadata = {
                movieId: _videoId,
                vssId: newActiveTextTrack.vss_id,
                LLY_TRACK_ID: newActiveTextTrack.vss_id + '|' + newActiveTextTrack.translationLanguage.languageCode,
                textTrackLangCode_G: newActiveTextTrack.translationLanguage.languageCode,
                languageName: newActiveTextTrack.translationLanguage.languageName,
                is_translateable: newActiveTextTrack.is_translateable,
                displayName: newActiveTextTrack.displayName,
                isFromASR: newActiveTextTrack.kind === "asr",
                isTranslatedTrack: true,
                originalLangCode_G: newActiveTextTrack.languageCode,
                originalLanguageName: newActiveTextTrack.languageName,
                title: title,
                channelId: channelId,
                channelName: channelName,
                captionTracks
            };
        }
        else {
            // non-translated captions
            metadata = {
                movieId: _videoId,
                vssId: newActiveTextTrack.vss_id,
                LLY_TRACK_ID: newActiveTextTrack.vss_id,
                textTrackLangCode_G: newActiveTextTrack.languageCode,
                languageName: newActiveTextTrack.languageName,
                is_translateable: newActiveTextTrack.is_translateable,
                displayName: newActiveTextTrack.displayName,
                isFromASR: newActiveTextTrack.kind === "asr",
                isTranslatedTrack: false,
                originalLangCode_G: false,
                originalLanguageName: false,
                title: title,
                channelId: channelId,
                channelName: channelName,
                captionTracks
            };
        }

        lln.subMan.onNewMetadata(JSON.parse(JSON.stringify(metadata)));

/*
        if (metadata && JSON.stringify(metadata) !== prevMetadata) {
            util.log('YT: metadata: ', JSON.stringify(metadata));
            prevMetadata = JSON.stringify(metadata);
            // lln.subMan.onNewMetadata(metadata);

            lln.subMan.onNewMetadata(JSON.parse(JSON.stringify(metadata)));

            console.log('YT: CCC, ', JSON.stringify(metadata));

            console.log('YT: captionTracks ', JSON.stringify(captionTracks) );
        }
        else {
            console.log('YT: ALTALT, ', JSON.stringify(metadata));
        }
*/
        return;

    }, 100);
    let prevMetadata = '';
        /*
        {"languageCode":"en","languageName":"English (auto-generated)","displayName":"English (auto-generated) >> Armenian","kind":"asr","name":null,"id":null,"is_servable":false,"is_default":false,"is_translateable":true,"vss_id":"a.en","translationLanguage":{"languageCode":"hy","languageName":"Armenian"}}
        */

    //     if(!track) {
    //         console.log('YT: No track selected.');
    //         return;
    //     }

    //     console.log('YT: track: ', track);

    //     console.log('UBQ ', track.baseUrl);

    //     fetchSubs(track.baseUrl,
    //         function(subs) {

    // // var _videoId = false;
    // // var _activeTextTrack_stringified = false;

    //             lln.subMan.subtitles = subs;
    //             lln.subMan.subLangCode_G = track.languageCode;
    //         }
    //     );

    //     if(newActiveTextTrack.translationLanguage) {

    //         console.log('YT: translationLanguage: ', newActiveTextTrack.translationLanguage.languageCode);

    //         console.log('YT: translationTrackURL: ', track.baseUrl + '&fmt=srv3&tlang=' + newActiveTextTrack.translationLanguage.languageCode);

    //         fetchSubs(track.baseUrl + '&fmt=srv3&tlang=' + newActiveTextTrack.translationLanguage.languageCode,
    //             function(subs) {

    //                 // convert to object format
    //                 let subObj = {};
    //                 for(let i = 0; i < subs.length; i++) {
    //                     subObj[i] = subs[i].text;
    //                 }

    //                 lln.subMan.mTranslations = subObj;
    //                 lln.subMan.mTranslationsAvailable = true;
    //             }
    //         );
    //     }
    // };

    /*
        getTrackList(function(list) {
            console.log("YT Found these: ", list);

            let trackToUse = false;

            let defaultTrack = list.filter(track => { return track.lang_default; } )[0];
            if(defaultTrack) {
                console.log('Using ', defaultTrack);
                trackToUse = defaultTrack
            }
            else if(list[0]) {
                console.log('YT: No default track found, trying [0]');
                trackToUse = list[0];
            }

            if(trackToUse) {
                // Have human subs
                fetchHumanSub(trackToUse.link,
                    function(subs) {
                        lln.subMan.subtitles = subs;
                    }
                );
            }
            else {
                console.log("YT: No human subs found, trying auto subs");

                getAutoCaptionsLink(function(link) {
                    fetchMT(link + 'en',
                        function(subs) {
                            console.log(subs);
                            lln.subMan.subtitles = subs;
                        }
                    );
                });
            }

            setTranslations();

        });

    */

    function setTranslations() {
        getAutoCaptionsLink(function(link) {
            fetchMT(link + lln.setMan.getTranslationLanguageCode(),
                function(subs) {

                    // convert to object format
                    let subObj = {};
                    for(let i = 0; i < subs.length; i++) {
                        subObj[i] = subs[i].text;
                    }

                    lln.subMan.mTranslations = subObj;
                    lln.subMan.mTranslationsAvailable = true;
                }
            );
        });
    }

    obj.getTitleArr = function() {
        let $title = $('.ytd-video-primary-info-renderer h1.title').eq(0);
        if ($title.children().length) {
            return $title.children().map(function(){ return $(this).text(); }).get();
        } else {
            let grabText = $title.text();
            if(grabText.length > 0) { return [grabText]; }
            else { return []; }
        }
    }

    //---
    // ripped from https://github.com/ajanicij/yt-timedtext-convert, modified.

    function convert34(xmlstr) {
        var parser = new DOMParser();
        var xmlDoc = parser.parseFromString(xmlstr, "text/xml");

        var timedtext_elem = xmlDoc.getElementsByTagName("timedtext");

        if (timedtext_elem.length == 0) {
            console.log("timedtext parse error!", xmlstr);
            return false;
        }

        let srt = ""; // return value, kinda

        handleTimedtext(xmlDoc);

        return srt;

        function handleTimedtext(doc) {
            body = doc.getElementsByTagName("body")[0];
            handleBody(body);
        }

        function handleBody(body) {
            var ps = body.getElementsByTagName("p");
            // $("#output").html("found " + ps.length + " p elements");
            var index = 0;
            var prevnode = {
                text: "",
                time: 0
            };

            for (var i = 0; i < ps.length; i++) {
                var n1 = handleP(ps[i]);
                if (n1.text == "") {
                    index++;
                    display(index, prevnode.time, n1.time, prevnode.text);
                } else {
                    prevnode = n1;
                }
            }
        }

        function handleP(p) {
            var result = {}
            var attributes = p.attributes;
            var key_time = attributes.t.nodeValue;
            var text = handlePChildren(p.childNodes);
            result.text = text;
            result.time = key_time;
            // console.log("processing p");
            return result;
        }

        function handlePChildren(nodes) {
            var text = "";
            for (var i = 0; i < nodes.length; i++) {
                // if (nodes[i].
                var name = nodes[i].nodeName;
                // TODO: check that it's an s node.
                text = text + handleS(nodes[i]);
                // console.log("in handlePChildren: name=" + name);
            }
            return text;
        }

        function handleS(node) {
            var nodes = node.childNodes;
            if (nodes.length == 0)
                return node.nodeValue;
            var text = handleSChildren(nodes);
            // console.log("in handleS");
            return text;
        }

        function handleSChildren(nodes) {
            var text = "";
            for (var i = 0; i < nodes.length; i++) {
                text += nodes[i].nodeValue;
            }
            return text;
        }

        function display(index, time1, time2, text) {
            // console.log("index=" + index + " time1=" + time1 + " time2=" + time2 + "text=" + text);
            var t1 = formatTime(parseInt(time1));
            var t2 = formatTime(parseInt(time2));
            var str = "" + index + "\r\n" +
                t1 + " --> " + t2 + "\r\n" +
                text + "\r\n\r\n";
            // $("#output").append(str);
            srt = srt + str;
        }

        function formatTime(t) {
            var milliseconds = t % 1000;
            t = Math.round(t / 1000);
            var seconds = t % 60;
            t = Math.round(t / 60);
            var minutes = t % 60;
            hours = Math.round(t / 60);
            var str = sprintf("%02d:%02d:%02d,%03d", hours, minutes, seconds, milliseconds);
            return str;
        }
    }

    let _lucky = false;

    let getLucky = function() {

        if(window.lucky) {
            _lucky = window.lucky;
            delete window.lucky;
        }

        return _lucky;
    }

    return obj;

}


/*

@casolorz Changed how? You mean into another format like example SRT? If you want it displayed similar to your posted style just replace ending &fmt=srv3 with &fmt=srv1. – VC.One Sep 30 '17 at 21:27 
Yeah that is what I was trying but I got errors with most things I tried, like vtt or srt. Right now the format was 1, 3 worked as well, but couldn't find anything else that worked. – casolorz Sep 30 '17 at 21:44
1
Looks like if I put fmt=vtt 

*/
PlaybackManager = function(lln) {

    var obj = {};

    ////////////////// PlaybackManager Public API: ////////////////

    // When _subStepIndex is a valid subtitle index, we are in 'index' mode.
    // When it is '-1', we are between subtitles, this is called
    // 'transit' mode. This can happen when autoPause is switched off,
    // or the user continues playing at the end of a sub with the space bar.
    var _subStepIndex = -1;

    function setSubStepIndex(newIndex) {

        checkTypes(arguments, "number");

        if(newIndex !== _subStepIndex) {
            _subStepIndex = newIndex;
            $(document).trigger("LLN_subStepIndexChanged");
        }
    }

    obj.getSubStepIndex = function() {
        return _subStepIndex;
    };

    // Defined below:
    // obj.update
    // obj.handlePrevButton
    // vidMan.pause



    ///////////////////// End of Public API //////////////////////


    ////// Playback settigs:

    // This variable is used to make the autoPause function more reliable.
    // (So we don't autopause twice.)
    var autoPaused = false;

    //      |----------|   (sub)
    //   ^  ^              (start playback before sub.begin by this margin)
    var startSubEarlyMargin;

    //      |----------|    (sub)
    //                 ^  ^ (finish playback after sub.end by this margin)
    var endSubLateMargin;

    // The AVERAGE difference between the time we ask to stop playback for autopause,
    // and the actual playback time when paused. Setting this correctly means we
    // will autopause as close as possible to the correct time.
    var meanAutoPauseDelay;

    // The MAX difference between the time we ask to stop playback for autopause,
    // and the actual playback time when paused. If this is insufficient,
    // autopause may not occur.
    var maxAutoPauseDelay;

    //if (window.__IS_NETFLIX) {
        startSubEarlyMargin = 125;
        endSubLateMargin = 125;
        meanAutoPauseDelay = 125;
        maxAutoPauseDelay = 400;
    // }
    // else {
    //     // Youtube
    //     // fixme: tune
    //     startSubEarlyMargin = 50;
    //     endSubLateMargin = 50;
    //     meanAutoPauseDelay = 50;
    //     maxAutoPauseDelay = 100;
    // }

    /////////////////////////////// main playback logic loop ///////////////////////////////
    /////////////////////////////// and other playback logic stuffs ////////////////////////

    // Small fix:
    $(document).on("LLN_netflixTrackChanged", function() {
        lln.vidMan.setPlaybackRate(parseFloat(lln.setMan.getPlaybackRate() || 1));
    });

    // settings, autoplay
    // _subStepIndex
    // subtitleManager
    // writes to the DOM

    var oldSSI = false;

    // Call this every 50ms-100ms or so
    // It updates _subStepIndex, handles autopause..

    /*
    function doUpdate() {
        update();
        setTimeout(doUpdate, 50);
    }
    doUpdate();
    */

    var _previousLastStartedSubIndex;

    window.requestAnimationFrame(update);

    function update() {

        window.requestAnimationFrame(update);

        if(!__LLN_ACTIVE) { return; }

        // Nothing to do here if there's no subs loaded..
        if(lln.subMan.subtitles.length === 0) { return; }

        var currentPlaybackTime = lln.vidMan.getRawTime();

        if(_subStepIndex !== -1) { // We are in index mode

            ///// Quick addition to count subs
            if(oldSSI !== _subStepIndex) {
                oldSSI = _subStepIndex;
                lln.setMan.incrementSubCount();
            }

            // vidMan.setPlaybackRate(setMan.getPlaybackSpeed());


            //      |----------|
            //   ^1 ^2         ^3 ^4 ^5
            // 1: subStartWithMargin (= subtitles[i].begin - startSubEarlyMargin)
            // 2. subtitles[i].begin
            // 3. subtitles[i].end
            // 4. subEndWithMarginMinusJitter (subEndWithMargin - 150 (this is the value we test for))
            // 5. subEndWithMargin ( = subtitles[i].end + endSubLateMargin)

            var subStartWithMargin;

/*
            if(setMan.getFastPlayback()) {
                // we need to give ourselves time to slow down
                subStartWithMargin = subMan.subtitles[_subStepIndex].begin - startSubEarlyMargin*2 - meanAutoPauseDelay;
            }
            else {
                subStartWithMargin = subMan.subtitles[_subStepIndex].begin - startSubEarlyMargin;
            }
*/
            // quick bugfix fix, if subs changed and _subStepIndex is bigger than no. of subs available.
            if(_subStepIndex > lln.subMan.subtitles.length) {
                // Kill'em; let God sort it out.
                setSubStepIndex(-1); 
                return;
                // next running of this function will straighten things out.
            }
            var subStartWithMargin = lln.subMan.subtitles[_subStepIndex].begin - startSubEarlyMargin; // 1. fixme: when sub starts at 0ms
            var subEndWithMargin = lln.subMan.subtitles[_subStepIndex].end + endSubLateMargin; // 5.
            var subEndWithMarginwithMaxAutoPauseDelay = subEndWithMargin + maxAutoPauseDelay - meanAutoPauseDelay;

            // Ok, first of all, is the playback position before 1. or after 5. for subMan.subtitles[_subStepIndex]?

            var outside = false;

            if(lln.setMan.getAutoPause()) {
                // Complex handling
                if(((currentPlaybackTime + 10) < subStartWithMargin) || (subEndWithMarginwithMaxAutoPauseDelay < (currentPlaybackTime - 10))) {
                    outside = true;
                }
            }
            else {
                // Simple handling
                if(( currentPlaybackTime < lln.subMan.subtitles[_subStepIndex].begin) || (lln.subMan.subtitles[_subStepIndex].end < currentPlaybackTime )) {
                    outside = true;
                }
            }

            // behavior we want depends if autopause is enabled. If enabled, we keep showing the sub until 5. Otherwise until 3. 
            /*
            if(!setMan.getAutoPause()) {
                // unless another sub already started.
                var currentSubByTime = subMan.getCurrentSubtitleIndex(currentPlaybackTime);
                if((currentSubByTime !== -1) && (_subStepIndex !== currentSubByTime) ) {
                    outside = true;
                }
            }
            */

            if(outside) {
                // Yes. This can happen for two reasons.
                // 1) The user might have seeked with the netflix scrollbar.
                // Or 2) the user resumed playback from autopause with the space bar or netflix play button.
                // Maybe we can't always catch this. Unlike pressing 'next', this doesn't cause _subStepIndex
                // to increase.

                // util.log("PLAYBACK: Outside of previous subtitle time range.");

                // are we inside a sub? Get the index, or else set _subStepIndex to -1 if we are outside a sub
                // _subStepIndex = subMan.getCurrentSubtitleIndex(currentPlaybackTime);
                setSubStepIndex(lln.subMan.getCurrentSubtitleIndex(currentPlaybackTime));
                autoPaused = false;

                if(_subStepIndex === -1) {
                    // util.log("PLAYBACK: Not in any subtitle range, now in TRANSIT mode");
                }
                else {
                    // util.log("PLAYBACK: Now in subtitle no: " + _subStepIndex);
                }
                
                // Set the right subs if we are inside a sub, otherwise redrawBottomPanel() will clear the subs.
                // bottomPanel.redrawBottomPanel();
            }
            else {
                // Ok. We wre still inside the valid sub range.
                // Should we autopause?

                if(lln.setMan.getAutoPause() && autoPaused === false) { // using jquery function to read checked doesn't work?
                    var subEndWithMarginMinusJitter = lln.subMan.subtitles[_subStepIndex].end + endSubLateMargin - meanAutoPauseDelay;
                    if(subEndWithMarginMinusJitter < currentPlaybackTime) {
                        // We have passed point 4
                        // util.log("PLAYBACK: Auto-pausing!");
                        autoPaused = true;
                        lln.vidMan.pause();
                    }
                }
            }
        }
        else { // We are in transit mode

            // vidMan.setPlaybackRate(1);

            // fixme: refactor sometime
            // Detect a seek from subIndex -1 to -1
            let lastStartedSubIndex = lln.subMan.getLastStartedSubtitleIndex(currentPlaybackTime);
            if(lastStartedSubIndex !== _previousLastStartedSubIndex) {
                $(document).trigger("LLN_subStepIndexChanged");
            }
            _previousLastStartedSubIndex = lastStartedSubIndex;
            // ok.
            

            var prevSubStepIndex = _subStepIndex;
            // Did we reach a sub yet?

/*
            var testTime;

            if(setMan.getFastPlayback()) {
                // we need to give ourselves time to slow down
                testTime = currentPlaybackTime + startSubEarlyMargin*2 + meanAutoPauseDelay;
            }
            else {
                testTime = currentPlaybackTime + startSubEarlyMargin;
            }
*/
            // _subStepIndex = subMan.getCurrentSubtitleIndex(currentPlaybackTime);
            setSubStepIndex(lln.subMan.getCurrentSubtitleIndex(currentPlaybackTime));

            if(_subStepIndex !== -1) {
                // util.log("PLAYBACK: Leaving TRANSIT mode, entering INDEX mode, sub no: " + _subStepIndex);
            }
/*
            // Set the right subs if we are inside a sub, otherwise redrawBottomPanel(-1) will clear the subs.
            if(prevSubStepIndex !== _subStepIndex) { 
                // bottomPanel.redrawBottomPanel();
            }
*/
        }

        // fixme: Ognjen? what is this? Why is it here, in my code? 
        let autoPausedIndicatorEl = document.getElementById('lln-auto-paused-indicator');
        if (autoPausedIndicatorEl) autoPausedIndicatorEl.classList.toggle('active', autoPaused);


        // Debug info:

        if(false) {

            var subStartWithMargin = "NoSub";
            var subEndWithMargin = "NoSub";
            var subEndWithMarginwithMeanAutoPauseDelay = "NoSub";
            var subEndWithMarginwithMaxAutoPauseDelay = "NoSub";

            // recalculate here..
            if(_subStepIndex !== -1) {
                var subStartWithMargin = lln.subMan.subtitles[_subStepIndex].begin - startSubEarlyMargin; // 1. fixme: when sub starts at 0ms
                var subEndWithMargin = lln.subMan.subtitles[_subStepIndex].end + endSubLateMargin; // 5.
                var subEndWithMarginwithMeanAutoPauseDelay = subEndWithMargin + meanAutoPauseDelay;
                var subEndWithMarginwithMaxAutoPauseDelay = subEndWithMargin - meanAutoPauseDelay + maxAutoPauseDelay;
            }

            var debugString = "";
            debugString += 'Number of Subs Loaded: ' + lln.subMan.subtitles.length;
            debugString += '<p>_subStepIndex: ' + _subStepIndex + '</p>';
            debugString += '<p>autopaused: ' + autoPaused + '</p>';
            debugString += '<p>sub start time with margin: ' + subStartWithMargin + '</p>';
            debugString += '<p>current time: ' + currentPlaybackTime + '</p>';
            debugString += '<p>sub end time with margin: ' + subEndWithMargin + '</p>';
            debugString += '<p>Distance from sub end time with margin: ' + (subEndWithMargin - currentPlaybackTime) + '';
            debugString += '<p>Distance from subEndWithMarginwithMaxAutoPauseDelay: ' + (subEndWithMarginwithMaxAutoPauseDelay - currentPlaybackTime) + '';

            $('.debug-info').show();
            $('.debug-info').empty();
            $('.debug-info').append(debugString);

        } else {
            $('.debug-info').hide();
        }

    };

    ////////

    // Seek to the begining of a subtitle (with apropriate margin), and start playback
    obj.playSubtitle = function(index) {

        checkTypes(arguments, "number");
        
        // Calculate the correct seek point.

        if(!(index in lln.subMan.subtitles)) {
            util.log(`PLAYBACK: ERROR: playSubtitle, index ${index} isn't in subMan.subtitles`);
            return false;
        }

        setSubStepIndex(index);
        // _subStepIndex = index;

        var skipToTime = lln.subMan.subtitles[index].begin; // retrieve it

        if(lln.setMan.getAutoPause()) {
            if(skipToTime > startSubEarlyMargin) {
                skipToTime -= startSubEarlyMargin; // and move back a little before it, if possible
            }
        }

        lln.vidMan.seek(skipToTime);
        autoPaused = false;
        lln.vidMan.play();

        // bottomPanel.redrawBottomPanel();
    }

    obj.handlePrevButton = function() {

        // util.log("PLAYBACK: Handling 'prev'");

        // set _subStepIndex to the new value:

        var newSubStepIndex;

        if(_subStepIndex === -1) { // We are in transit mode

            var lastStartedSub = lln.subMan.getLastStartedSubtitleIndex(lln.vidMan.getRawTime());

            if(lastStartedSub >= 0) { // We have already passed the beginning of sub 0

                newSubStepIndex = lastStartedSub;
            }
            else {
                // util.log("PLAYBACK: Haven't reached first sub yet, do nothing.");
                return;
            }
        }
        else { // We are in index mode
            if(_subStepIndex > 0) {
                newSubStepIndex = _subStepIndex - 1;
            }
            else {
                // util.log("PLAYBACK: Already at first sub, do nothing.");
                return;
            }
        }

        obj.playSubtitle(newSubStepIndex);

        lln.setMan.incrementPauseCount();

        // Output some debug info
        // util.log("Prev button pressed");
        // util.log("getCurrentSubtitleIndex(): " + getCurrentSubtitleIndex());
        // util.log("getLastStartedSubtitleIndex(): " + getLastStartedSubtitleIndex());
        // util.log("subtitles[i].begin: " + subtitles[i].begin);
        // util.log("startSubEarlyMargin: " + startSubEarlyMargin);
        // util.log("skipToTime: " + skipToTime);
    };

    obj.handleNextButton = function() {

        // var startTime = performance.now();

        // util.log("PLAYBACK: Handling 'next'");

        var newSubStepIndex;

        // set _subStepIndex to the new value:

        if(_subStepIndex === -1) { // We are in transit mode

            var lastStartedSub = lln.subMan.getLastStartedSubtitleIndex(lln.vidMan.getRawTime());

            if(lastStartedSub >= 0) { // We have already passed the beginning of sub 0
                if((lastStartedSub + 1) < lln.subMan.subtitles.length) {
                    newSubStepIndex = lastStartedSub + 1;
                    // util.log("PLAYBACK: OK, moving to the next sub: " + _subStepIndex);
                }
                else {
                    // util.log("PLAYBACK: Already at last sub. Do nothing.");
                    return;
                }
            }
            else {
                newSubStepIndex = 0;
                // util.log("PLAYBACK: Haven't reached first sub yet, skipping to first sub.");
            }
        }
        else { // We are in regular index mode

            if((_subStepIndex + 1) < lln.subMan.subtitles.length) {
                newSubStepIndex = _subStepIndex + 1;
            }
            else {
                // util.log("PLAYBACK: Already at last sub, do nothing."); // fixme: good behaviour?
                return;
            }
        }

        obj.playSubtitle(newSubStepIndex);

        //var codeTime1 = performance.now() - startTime;
        //var nfTime1 = vidMan.getTime();

        lln.setMan.incrementPauseCount();

        //var codeTime2 = performance.now() - startTime - codeTime1;
        //var nfTime2 = vidMan.getTime();

        //util.log("PLAYBACK: codeTime1: " + codeTime1 + " nfTime1: " + nfTime1 + " codeTime2: " + codeTime2 + " nfTime2: " + nfTime2);
    };

    obj.handleReplayButton = function() {

        // util.log("PLAYBACK: Handling 'replay'");

        var newSubStepIndex;

        if(_subStepIndex === -1) { // We are in transit mode
            // We are in regular play mode
            var lastStartedSub = lln.subMan.getLastStartedSubtitleIndex(lln.vidMan.getRawTime());

            if(lastStartedSub < 0) { // We have not yet passed the beginning of sub 0
                // util.log("PLAYBACK: Haven't reached first sub yet, do nothing.");
                return;
            }

            newSubStepIndex = lastStartedSub;
        }
        else {
            newSubStepIndex = _subStepIndex;
        }

        obj.playSubtitle(newSubStepIndex);

        lln.setMan.incrementPauseCount();
    };

    return obj;

}

SubManager = function(lln) {

        var obj = {};

        //////////////////// SubManager PUBLIC API ////////////////////

        // **READ ONLY**

        // [{text: "123", begin: XXX, end: XXX}, {text: "123", begin: XXX, end: XXX}]
        obj.subtitles = []; // todo: make it private. subtitlesNLP should be used everywhere instead
        obj.subLangCode_G = false;

        obj.subtitlesNLP = [];

        obj.rawSubs = false;

        // .data, more data collected by nf.js from Netflix for the active movie
/*
        data.movieId = movieId;
        data.audioTrackId = audioTrackId;
        data.textTrackId = textTrackId;  // Watchout, this ID is not unique
        data.activeTextTrackDownloadbleId  // This is the one we send to the backend as ttid
        data.textTrackLangCode_N = false;
        data.textTrackLangCode_G = false;
        data.textTrackType = false;
        data.audioTrackLangCode_N = false;
        data.audioTrackLangCode_G = false;
        data.originalAudioLangCode_N = false;
        data.originalAudioLangCode_G = false;

        // Adding these:
        data.duration = 2815000;
        data.viewableType = "EPISODE";

        data.textTracks
*/
        obj.data = {};

        // machine translations
        // { 1: text, 2: text }
        obj.mTranslations = {};

        // human translations
        // { 1: text, 2: text }
        obj.hTranslations = {};
        obj.extraAlignInfo = {};

        // Set to true if:
        // Source subs loaded ok
        // Destination langCode is ok
        // License allows
        // Reasonable language pair
        obj.mTranslationsAvailable = false;

        // Set to true if:
        // Source subs loaded ok
        // Destination langCode is ok
        // Human translations available for this language and loaded ok
        obj.hTranslationsAvailable = false;

        ////////// Callable functions:

        // Reload translations, update some UI stuff.
        // Called by setMan.setTranslationLanguageCode on translation language change.
        obj.reloadTranslations;

        // Pass curPlaybackPosition to these.
        obj.getCurrentSubtitleIndex;
        obj.getLastStartedSubtitleIndex;

        ///////////////// End of API ////////////////////////////////////

        obj.subLoad_error = false;
        var _nonOrigSubsLang_error = false;
        var _nonOrigAudioLang_error = false;
        
        obj.noSubsAvailable_error = false;
        obj.loadingMainSubs = false;

        var _onNewMetadata_lastRequestNo = 0;

        obj.onNewMetadata = function(metadata) {

            console.log('METADATA ', metadata);

            obj.subLoad_error = false;
            obj.noSubsAvailable_error = !metadata.captionTracks || metadata.captionTracks.length === 0;
            obj.loadingMainSubs = true;

            // Clear out old data
            // Empty these, so inconsitent data isn't left loaded while async request runs
            obj.subtitles = [];
            obj.subtitlesNLP = [];
            obj.rawSubs = false;

            // Redraw with empty data:
            lln.bottomPanel.redrawBottomPanel(); // show loading
            redrawVV();
            // fixme: should also update savedItem playbuttons here too. 

            // Also redraws bottom panel
            obj.reloadTranslations();

            // a track changed, new metadata available
            // metadata and source subs we will download MUST correspond.
            // Ordung must sein motherfucker. 

            // get the active netflix subtitles, then pass them to setup
            // this is the function where we check if 'off' subs are active
            
            _onNewMetadata_lastRequestNo += 1;
            var thisRequestNo = _onNewMetadata_lastRequestNo;

            lln.vidMan.getSubs(
                metadata.movieId,
                metadata.LLY_TRACK_ID, // this is 'textTrackId', false for 'off'
                function(parsedSubs, rawSubs, tt_metadata) { // parsedSubs === false for 'off'
                    if(thisRequestNo === _onNewMetadata_lastRequestNo) {
                        // console.log('FETCHED: ', parsedSubs);
                        setup(metadata, tt_metadata, parsedSubs, rawSubs);
                    }
                }
            );
        }

        function redrawVV() {
            lln.verticalView.redraw();
            lln.verticalView.highlightAndScrollToActiveSub();
            lln.savedItems.updatePlayButtons();
        }

        // This function is passed the parsed subtitles, 
        // or else false, if subs off or load error.
        function setup(metadata, tt_metadata, passedSubs, rawSubs) {

            // console.log(arguments);

            // fixme: tt_metadata set to false
            checkTypes(arguments, "object,object|false,array|false,string|false");

            util.log(`SUBMAN: Running setup with subs ${obj.data.LLY_TRACK_ID}`);

            obj.data = metadata;
            obj.data.md5 = tt_metadata.md5;

            obj.tt_data = tt_metadata;

            // isASR, 
            if(passedSubs) {

                obj.data.tt_key = lln.subMan.data.movieId;

                obj.data.tt_key += '.' + (metadata.isFromASR ? 'A' : 'N');

                obj.data.tt_key += '.' + metadata.textTrackLangCode_G;

                if(metadata.isTranslatedTrack) {

                    obj.data.tt_key += '.' + 'T';
                    obj.data.tt_key += '.' + metadata.originalLangCode_G;
                }
                else {
                    obj.data.tt_key += '.' + 'N';
                }

                obj.data.tt_key += '.' + tt_metadata.md5;
            }
            else {
                obj.data.tt_key = false;
            }

            // console.log('SUBMAN: tt_key: ', obj.data.tt_key);
     
            ////////// Set Title Original Language (TOL) value, error state, tooltip //////////

            // Disable for youtube
/*
            $('#TOL-value').text(lln.pure.googleCodeToLanguageName[lln.pure.cleanLangCode(obj.data.originalAudioLangCode_N)]);

            $("#TOL-tt").attr('data-tippy-content', lln_i18n.originalLanguage_tooltip);
*/

            ////////// Set Netflix Subtitle Language (NSL) value, error state, tooltip //////////

            // can be false if subs off or load fail
            obj.subLangCode_G =  obj.data.textTrackLangCode_G;

            // passedSubs false if subs off
            if(passedSubs) {
                // console.log("TEST: passedSubs TRUE");
                obj.subLoad_error = false;
            }
            else {
                // console.log("TEST: passedSubs FALSE");
                obj.subLoad_error = true;
            }

            lln.ui.setError("subLoad_error", obj.subLoad_error);

            // Leave this for Youtube

            if(obj.subLangCode_G) {
                $(".lln-NSL-value").text(lln.pure.googleCodeToLanguageName[obj.subLangCode_G]);
                // fixme: used in catalogue link?
                lln.setMan.setSourceLanguageCode(obj.subLangCode_G);
            }
            else {
                $(".lln-NSL-value").text("NONE"); // fixme: i18n
            }

            // fixme:
            // Hook this up later for youtube.
/*
            // TextTrack doesn't match original audio
            _nonOrigSubsLang_error = obj.data.originalAudioLangCode_G !== obj.data.textTrackLangCode_G;
            lln.ui.setError("nonOrigSubsLang_error", _nonOrigSubsLang_error);
*/
            _nonOrigSubsLang_error = false;

            //////////

            if(obj.subLoad_error) {

                obj.loadingMainSubs = false;

                // This error has priority over the one below.
                $(".lln-NSL-value").addClass("lln-error-color");
                $("#NSL-tt").attr('data-tippy-content', lln_i18n.subtitlesNotLoaded_error_yt);
                
                // fixme: disabled for now.
                // $(".NSL-fix-button").show();
            }
            else {
                // !obj.subLoad_error

                if(_nonOrigSubsLang_error) {
                    // This doesn't ever run currently for YT
                    $(".lln-NSL-value").addClass("lln-error-color");
                    $("#NSL-tt").attr('data-tippy-content', lln_i18n.subtitlesNoMatchAudio_error.replace('<text>', lln.pure.googleCodeToLanguageName[obj.subLangCode_G]).replace('<text>', lln.pure.googleCodeToLanguageName[ obj.data.originalAudioLangCode_G ]));
                    $(".NSL-fix-button").show();
                }
                else {
                    // No error case
                    $(".lln-NSL-value").removeClass("lln-error-color");
                    $("#NSL-tt").attr('data-tippy-content', lln_i18n.subtitleLanguage_tooltip_yt);
                    $(".NSL-fix-button").hide();
                }
            }

            ////////// Set Netflix Audio Language (NAL) value, error state, tooltip //////////

            // Don't use this code for Youtube
/*
            $("#NAL-value").text(lln.pure.googleCodeToLanguageName[ obj.data.audioTrackLangCode_G ]);

            // Audiotrack doesn't match original audio
            _nonOrigAudioLang_error = obj.data.originalAudioLangCode_N !== obj.data.audioTrackLangCode_N;

            lln.ui.setError("nonOrigAudioLang_error", _nonOrigAudioLang_error);

            if(_nonOrigAudioLang_error) {
                $("#NAL-value").addClass("lln-error-color");
                $("#NAL-tt").attr('data-tippy-content', lln_i18n.audioNoMatchSubtitles_error.replace('<text>', lln.pure.googleCodeToLanguageName[ obj.data.audioTrackLangCode_G ]).replace('<text>', lln.pure.googleCodeToLanguageName[ obj.data.originalAudioLangCode_G ]));
                $(".NAL-fix-button").show();
            }
            else {
                $("#NAL-value").removeClass("lln-error-color");
                $("#NAL-tt").attr('data-tippy-content', lln_i18n.audioLanguage_tooltip);
                $(".NAL-fix-button").hide();
            }
*/
            //////////

            // show or hide transliterations dropdown in options, based on language
            if (obj.subLangCode_G === 'ja') {
                $('.lln-translit-option').show();
            } else {
                $('.lln-translit-option').hide();
            }

            // Redraw with empty data:
            // (obj.subLoad_error may have changed, that's it I guess)
            lln.bottomPanel.redrawBottomPanel(); // show loading
            redrawVV();
            // fixme: should also update savedItem playbuttons here too. 

            // Also redraws bottom panel
            obj.reloadTranslations();

            if(obj.subLoad_error) {
                // No subs were loaded.
                // Story ends here.
                return;
            }
            // obj.subLoad_error === false

            ////////// Ok Captain, good job, now let's sail to sea //////////

            // Get tokens and lemmas

            var objectToSend = {
                //movieId: obj.data.movieId,
                // downloadableId: obj.data.activeTextTrackDownloadbleId,
                // sourceLangCode_N: obj.data.textTrackLangCode_N,
                sourceLangCode_G: obj.subLangCode_G,
                // originalAudioLangCode_N: obj.data.originalAudioLangCode_N,
                // originalAudioLangCode_G: obj.data.originalAudioLangCode_G,
                // careful!
                subs: passedSubs, 
                numSubs: passedSubs.length,
                f: acc(passedSubs.length),
                // Adding these:
                // duration: obj.data.duration
                // And now this:
                // rawSubs: rawSubs,
                tt_key: obj.data.tt_key
            };

            // checkObjectToSend_getNLP(objectToSend);

            CF_RPC_PT("yt_getNLP", objectToSend, JSON.stringify(obj.data), function(result, passthrough) {

                if(passthrough !== JSON.stringify(obj.data)) {
                    // tracks have changed, metadata is different
                    // Do nothing, the other callback will set things correctly.
                    return;
                }

                obj.loadingMainSubs = false;

                // 1. set new subs
                obj.subtitles = passedSubs.map(element => ( { begin: element[0], end: element[1], text: element[2] } ) );
                obj.rawSubs = rawSubs;

                // 2. Set NLP data
                var gotValidNLPData = true;

                if(result.status !== "success") {
                    // fixme: disable to not clog up error logs
                    // util.fuck(`getNLP CF_RPC failed. result: ${JSON.stringify(result)}`);
                    gotValidNLPData = false;
                }

                else if(!(  result
                    && result.data
                    && result.data.subtitlesNLP))
                {
                    // fixme: disable to not clog up error logs
                    // util.fuck(`result.data.subtitlesNLP undefined. result: ${JSON.stringify(result)}`);
                    gotValidNLPData = false;
                }

                if(gotValidNLPData) {
                    obj.subtitlesNLP = result.data.subtitlesNLP.map(sub => sub.map(tok => tok.join('🟃')));
                    lln.dict.addWordHashes(result.data.wordHashes);
                }
                else {
                    obj.subtitlesNLP = [];
                    util.userError("Failed to retreive linguistic data. Dictionary and saving words unavailable.");
                }

                // 3. Redraw
                redrawVV();

                // 4. reloadTranslations
                obj.reloadTranslations();

                // $(document).trigger('lln_serverTokensLoaded');
                // $(document).trigger('lln_subsChanged');
            });


            // old SSI is now invalid
            // actaully playMan deals with this situation now
            // playMan.setSubStepIndex(-1);
        };

        function checkObjectToSend_getNLP(objectToSend) {

            let problem = false;

            for(let key of Object.keys(objectToSend)) {
                // originalAudioLangCode_G and originalAudioLangCode_N can be false.
                if(!objectToSend[key] && key !== "originalAudioLangCode_N" && key !== "originalAudioLangCode_G") {
                    problem = true;
                }
            }

            if(objectToSend.type !== 'closedcaptions' && objectToSend.type !== 'subtitles') {
                problem = true;
            }

            if(problem) {

                util.fuck(
                    `setupSourceSubs(): objectToSend shitty: ${JSON.stringify(objectToSend)}`
                );

                // fixme:
                // let manifest = vidMan.getActiveTextTrack(); // removed this function for now
                // CF_RPC("bm", manifest, function() {});
            }
        }

        obj.reloadTranslations = function() {
            // This stuff works ok when obj.subtitles = [];
            
            // Handle human translations
            // fixme:
            // setupHTranslations();

            // Handle machine translations
            setupMTranslations();

        };

        function setupHTranslations() {

            // Do the right thing with the human translations

            // clear existing subs first
            obj.hTranslations = {};
            obj.extraAlignInfo = {};
            lln.bottomPanel.redrawBottomPanel();

            function available(available) {
                if(available) {
                    obj.hTranslationsAvailable = true;
                    $("#showHT").removeAttr("disabled");
                    $("#HTNotice").removeClass('show');
                    $("#showHT-tt").attr('data-tippy-content', lln_i18n.showHumanTranslation_tooltip);
                    $("#showHT-label").css("color", "");
                }
                else {
                    obj.hTranslationsAvailable = false;
                    $("#showHT").attr("disabled", true);
                    $("#HTNotice").text(lln_i18n.notAvailable).addClass('show');
                    $("#showHT-tt").attr('data-tippy-content', lln_i18n.noHTAvailable);
                    $("#showHT-label").css("color", "#777777");
                }
            }

            if(obj.subtitles.length === 0) {
                available(false);
                return; // No subtitles have been loaded yet
                // probably reloadTranslations has been called by setMan
            }

            // No subtitles are loaded/available, we should just clear the hTranslations
            if(obj.subLoad_error) {
                available(false);
                return;
            }

            var transLangCode_G = lln.setMan.getTranslationLanguageCode();

            var foundHTTrack = false;

            // search for nice track
            let filteredByLang = obj.data.textTracks.filter(track => track.langCode_G === transLangCode_G);

            // console.log('RRR',filteredByLang);

            let filteredByLangAndSubtitles = filteredByLang.filter(track => track.type === 'subtitles');
            
            // console.log('RRRT',filteredByLangAndSubtitles);

            if(filteredByLangAndSubtitles.length > 0) {

                foundHTTrack = filteredByLangAndSubtitles[0];
                util.log(`SUBMAN: Human Translations available (type '${foundHTTrack.type}').`);
            }
            else if(filteredByLang.length > 0) {

                foundHTTrack = filteredByLang[0];
                util.log(`SUBMAN: Human Translations available (type '${foundHTTrack.type}').`);
            }
            else {

                util.log("SUBMAN: No suitable track found for Human Translations.");
            }

            if( foundHTTrack ) {
                
                // get the subs and set them to obj.hTranslations
                var callback = function(parsedSubs, rawSubs, tt_metadata) {

                    checkTypes(arguments, "array|false,string|false,object|false");

                    if(!parsedSubs) {
                        util.log("SUBMAN: Human Translations load fail.");
                        available(false);
                        return;
                    }

                    let transformedSubs = parsedSubs.map(element => ( { begin: element[0], end: element[1], text: element[2] } ) )

                    let returnedObject = lln.align.align(obj.subtitles, transformedSubs);
                    obj.hTranslations = returnedObject.alignedTranslationSubs;
                    obj.extraAlignInfo = returnedObject.extraInfo;

                    util.log("SUBMAN: Aligned and added human translations.");
                    available(true);

                    lln.bottomPanel.redrawBottomPanel();
                }

                lln.vidMan.getSubs( obj.data.movieId, foundHTTrack.downloadableId, callback );

            }
            else {
                available(false);
            }

        }

        // fixme: called by license.js
        obj.setupMTranslations = setupMTranslations;

        // Happy helper functions
        // function range(size, startAt = 0) { return [...Array(size).keys()].map(i => i + startAt); }
        function acc(number) { return (number % 56) + 17; }

        /**
         * Config obj.mTranslationsAvailable,
         * MT checkbox and label (UI),
         * populate obj.mTranslations with subs from g
         * and bottomPanel.redrawBottomPanel() as required.
         */
        function setupMTranslations() {

            obj.mTranslations = {};

            lln.bottomPanel.redrawBottomPanel();

            // no destination language code
            if ( !lln.setMan.getTranslationLanguageCode() )
            {
                // Grey label and disable checkbox
                $("#showMT-label").css("color", "#777777");
                $("#showMT").attr("disabled", true);

                // MT not allowed, therefore not available
                obj.mTranslationsAvailable = false;

                return;
            }

            // Ungrey label and enable checkbox
            $("#showMT-label").css("color", "");
            $("#showMT").removeAttr("disabled");

            if(obj.subtitles.length === 0 // subs not loaded yet
                || obj.subLoad_error // subs load fail
            ) 
            {
                obj.mTranslationsAvailable = false;
                return; // No subtitles have been loaded yet
                // probably reloadTranslations has been called by setMan
            }

            // Translation language same as source?
            // Copy the subs accross, that's all.
            if(obj.subLangCode_G === lln.setMan.getTranslationLanguageCode()) {

                for(let i = 0; i < obj.subtitles.length; i++) {
                    obj.mTranslations[i] = obj.subtitles[i].text;
                }

                obj.mTranslationsAvailable = true;
                lln.bottomPanel.redrawBottomPanel();
                return;
            }

            var transLangCode_G = lln.setMan.getTranslationLanguageCode();

            let LLY_TRACK_ID = lln.subMan.data.vssId + '|' + transLangCode_G;

            if( true ) {
                
                // get the subs and set them to obj.hTranslations
                var callback = function(parsedSubs, rawSubs, tt_metadata) {

                    checkTypes(arguments, "array|false,string|false,object|false");

                    if(!parsedSubs) {
                        util.log("SUBMAN: Human Translations load fail.");
                        available(false);
                        return;
                    }

                    for(let i = 0; i < parsedSubs.length; i++) {
                        obj.mTranslations[i] = parsedSubs[i][2];
                    }

                    obj.mTranslationsAvailable = true;

                    lln.bottomPanel.redrawBottomPanel();
                }

                lln.vidMan.getSubs( obj.data.movieId, LLY_TRACK_ID, callback );

            }
            else {
                // fixme
                // obj.mTranslationsAvailable = false; ?
            }
        }

        // Is curPlaybackPosition inside the boundaries of a sub?
        // Yes: return it's index, No: return -1
        obj.getCurrentSubtitleIndex = function(curPlaybackPosition) {

            checkTypes(arguments, "number");

            //if (!shift) shift = 0; // not used?
            var curPlaybackPosition;// = nfGetTime();
            for (var i = 0; i < obj.subtitles.length; i++) {
                // for each sub:
                if (obj.subtitles[i].end > curPlaybackPosition && obj.subtitles[i].begin <= curPlaybackPosition) {
                    return i;
                }
            }
            return -1;
        }

        //  |--------|        |--------|
        //     sub1              sub2
        //   ^^^^^^^^^^^^^^^^  - if called in this range, the function will return the index of sub1
        //  If the playback position has not yet reached the startpoint of the first sub, -1 is returned.
        obj.getLastStartedSubtitleIndex = function(curPlaybackPosition) {

            checkTypes(arguments, "number");

            //if (!shift) shift = 0; // not used
            var curPlaybackPosition;// = nfGetTime();
            for (var i = (obj.subtitles.length -1); i >= 0 ; i--) {
                if (obj.subtitles[i].begin <= curPlaybackPosition) {
                    return i;
                }
            }
            return -1;
        }

        // For use outside the module.. VV basically.
        // Gets one behind, two ahead
        // Returns false when obj.mTranslationsAvailable === false or invalid sub index is passed.
        // Callback will only fire if subs are successfully retrieved.
        obj.accessSingleMTranslation = function(requestIndex, successCallback) {

            checkTypes(arguments, "number,function");

            // fixme:
            successCallback();
        }

    return obj;

}
SavedItems = function(lln) {

    var obj = {};

    obj.savedItemKeys = {};
    obj.numItemsToShow = 50;
    // keys format:
    // `WORD|${wordLemma}|${langCode_G}`
    // or
    // `[${source}]|PHRASE|${langCode_N}|${movieId}|${trackType}|${subtitleIndex}`

    // values format:
    // {
    //     itemType :str ('WORD' or 'PHRASE'),
    //     key :str,
    //     [color :str ('C0', 'C1')],
    //     [word :str],
    //     [wordStem :str],
    //     [wordLemma :str],
    //     [wordIndex :int],
    //     langCode_G :str,
    //     subtitle :str,
    //     tokens :obj || '',
    //     movieId :str,
    //     subtitleIndex :int,
    //     ttId :str,
    //     trackType :str,
    //     langCode_N :str,
    //     translation :str,
    //     translationLangCode_G :str
    //     title :str
    //     numSubs :int
    // };

    obj.loadItems = function() { // ok

        if(lln.liMan.loggedIn) {
            obj.savedItemKeys = lln.liMan.userData.savedItems;
        } else {
            obj.savedItemKeys = {};
        }

        renderFiltersUI();
        reloadFullItems();

        lln.verticalView.redraw();
        lln.bottomPanel.redrawBottomPanel();
    };

    obj.updatePlayButtons = function(){ // ok
        $('#lln-vertical-view-saved-items .lln-vertical-view-sub').each(function(){
            let $this = $(this);
            let itemKey = $this.attr('data-item-key');
            let item = parseItemKey(itemKey);
            if (subInCurrentMovie(item)) {
                $this.find('.lln-sub-play-btn').removeClass('disabled');
            } else {
                $this.find('.lln-sub-play-btn').addClass('disabled');
            }
        });
    };

    function getFilterParams(){
        let params = {}; //source: 'NETFLIX'
        let showLang = $('#llnSavedItemsLanguage').val() || 'ALL';
        let showType = $('#llnSavedItemsType').val() || 'ALL';
        if (showLang !== 'ALL') {
            params.langCode_G = showLang;
        }
        if (showType !== 'ALL') {
            if (showType === 'PHRASE') {
                params.itemType = 'PHRASE';
            } else {
                params.itemType = 'WORD';
                params.color = showType.split('|')[1];
            }
        }
        return params;
    }

    // reload items in list view, e.g. 50 items
    let currentReloadItemsRequestId = 0;
    function reloadFullItems() { // ok?
        currentReloadItemsRequestId ++;
        const requestId = currentReloadItemsRequestId;

        let params = getFilterParams();
        params.numItems = obj.numItemsToShow;
        CF_RPC('getItems', params, function(result){
            if (requestId === currentReloadItemsRequestId) { // ignore previous requests
                // add word hashes
                lln.dict.addWordHashes(result.data.wordHashes);
                // show data in list
                $('#lln-vertical-view-saved-items .content').html(getSavedItemsHtml(result.data.items));
            }
        });
    }

    // generate SavedItems View HTML
    function getSavedItemsHtml(items){ // ok?
        let html = '';
        if (items && items.length) {
            items.forEach(item => {
                html += generateSavedItemHTML(item);
            });
            if (items.length === obj.numItemsToShow) {
                html += `<a href="#" id="showMoreSavedItems">${lln_i18n.showMore}</a>`;
            }
        } else {
            html = `<div class="lln-no-saved-items-message">
            <b>${lln_i18n.noSavedItems}</b>
            <br><br>
            ${lln_i18n.clickAStar}
            <br><br>
            ${
                (lln.liMan.proFeaturesEnabled === false) ?
                `<div style="text-align: center; "><span class="pro-feature-button lln-label-btn">${lln_i18n.proFeature}</span></div>`
                 : ``
            }
        </div>`
        }
        return html;
    }

    // load more
    $(document).on('click', '#showMoreSavedItems', function(e) { // ok
        e.preventDefault();
        obj.numItemsToShow += 50;
        reloadFullItems();
    });

    function generateItemKey(item) { // ok
        if (item.itemType === 'WORD') {
            return `${item.itemType}|${item.wordLemma}|${item.langCode_G}`;
        } else {
            let source = item.source === 'NETFLIX' ? '' : `|${item.source}`;
            return `${item.itemType}|${item.langCode_N}|${item.movieId}|${item.trackType}|${item.subtitleIndex}` + source;
        }
    }

    function parseItemKey(keyStr) { // ok
        const arr = keyStr.split('|');
        let itemType = arr[0];
        if (itemType === 'WORD') {
            return {
                itemType: itemType,
                wordLemma: arr[1],
                langCode_G: arr[2]
            }
        } else {
            return {
                itemType: itemType,
                langCode_N: arr[1],
                movieId: arr[2],
                trackType: arr[3],
                subtitleIndex: parseInt(arr[4]),
                source: parseInt(arr[5] || 'NETFLIX'),
                langCode_G: lln.pure.cleanLangCode(arr[1])
            }
        }
    }

    function renderFiltersUI(){ // ok
        let languageCodes_G = {};
        for (let key of Object.keys(obj.savedItemKeys)) {
            languageCodes_G[parseItemKey(key).langCode_G] = true;
        }

        let prevLangVal = $('#llnSavedItemsLanguage').val() || 'ALL';
        // fill language dropdown
        $('#llnSavedItemsLanguage').html(`<option value="ALL">${lln_i18n.allLanguages}</option>` +
            Object.keys(languageCodes_G).map(lang_code => `<option value="${lang_code}">${lln.pure.googleCodeToLanguageName[lang_code]}</option>`));
        if (Object.keys(languageCodes_G).length < 2) {
            $('#llnSavedItemsLanguage').hide();
        } else {
            $('#llnSavedItemsLanguage').show();
        }
        $('#llnSavedItemsLanguage').val(prevLangVal);

        // show/hide type dropdown, tools dropdown
        if(Object.keys(obj.savedItemKeys).length) {
            $('#llnSavedItemsType').show();
            $('#lln-saved-items-dropdown-btn').show();
        } else {
            $('#llnSavedItemsType').hide();
            $('#lln-saved-items-dropdown-btn').hide();
        }

    }

    // isSubInCurrentMovie
    function subInCurrentMovie(item) { // ok
        return lln.subMan.data.textTrackLangCode_N === item.langCode_N
            && lln.subMan.data.movieId === item.movieId
            && lln.subMan.data.textTrackType === item.trackType;
    }

    function shouldHideItem(item) { // ok
        let showLang = $('#llnSavedItemsLanguage').val() || 'ALL';
        let showType = $('#llnSavedItemsType').val() || 'ALL';
        return (showLang !== 'ALL' && showLang !== item.langCode_G) ||
            (showType !== 'ALL' && (item.itemType + (item.itemType === 'WORD' ? ('|' + (item.color)) : '')) !== showType);
    }

    function generateSavedItemHTML(item) { // ok
        // should be called only once, on start
        const showPlayButton = !!subInCurrentMovie(item);
        const isWithSavedWord = !!item.word;

        // add rtl class for right-to-left languages
        const rtl = (['ar', 'iw', 'fa', 'ur'].indexOf(item.langCode_G) > -1);

        return `<div class="lln-vertical-view-sub ${ isWithSavedWord ? 'withSavedWord' : '' } ${rtl ? 'lln-rtl' : ''}" data-index="${item.subtitleIndex}" data-item-key="${item.key}" data-item-data="${encodeURIComponent(JSON.stringify(item))}">
                    <div class="lln-sub-play-btn ${ showPlayButton ? '' : 'disabled' }"></div>
                    <div class="lln-sub-text">
                        ${lln.pureText.subToHtml('saved_items', item.subtitle, item.langCode_G, true, lln.setMan.getVocabSize(), true, false, item.key || '', item.tokens)}
                    </div>
                </div>`;
    }

    // check if sub is saved
    // only for current movie's subs
    // returns true, false
    obj.isSubtitleSaved = function (subtitleIndex) { // ok
        let key = `PHRASE|${lln.subMan.data.textTrackLangCode_N}|${lln.subMan.data.movieId}|${lln.subMan.data.textTrackType}|${subtitleIndex}`;
        return !!obj.savedItemKeys[key];
    };

    obj.getWordColor = function(key){ // ok?
        return (obj.savedItemKeys[key] || 'C0');
    };

    function unsaveSub(itemKey) { // ok
        togglePhraseInSubs(parseItemKey(itemKey), false);
        removeItem(itemKey);
    }

    // only for current movie's subs
    function toggleSubtitleSave (subtitleIndex) { // ok
        subtitleIndex = parseInt(subtitleIndex);
        let item = {source: window.__IS_YOUTUBE ? 'YOUTUBE' : 'NETFLIX'};
        item.itemType = 'PHRASE';
        item.movieId = lln.subMan.data.movieId;
        item.subtitleIndex = subtitleIndex;
        item.langCode_G = lln.subMan.subLangCode_G;
        item.subtitle = lln.subMan.subtitles[subtitleIndex].text;
        item.tokens = (lln.subMan.subtitlesNLP || {})[subtitleIndex] || [];
        item.translation = getSubTranslationIfAvailable(subtitleIndex);
        item.subContext = getSubContext(subtitleIndex);
        item.translationLangCode_G = lln.setMan.getTranslationLanguageCode();
        item.numSubs = lln.subMan.subtitles.length;
        item.title = JSON.stringify(lln.vidMan.getTitleArr());
        if (window.__IS_YOUTUBE) { // youtube-specific params
            item.youtube_params = {
                isFromASR: lln.subMan.data.isFromASR,
                isTranslatedTrack: lln.subMan.data.isTranslatedTrack,
                originalLangCode_G: lln.subMan.data.originalLangCode_G,
                md5: lln.subMan.data.md5,
                channelId: lln.subMan.data.channelId,
                channelName: lln.subMan.data.channelName,
                subsParserVersion: 0
            }
        } else { // netflix-specific params
            item.langCode_N = lln.subMan.data.textTrackLangCode_N;
            item.trackType = lln.subMan.data.textTrackType;
            item.ttId = lln.subMan.data.activeTextTrackDownloadbleId;
        }

        item.key = generateItemKey(item);

        if (!item.translationLangCode_G) { util.fuck('SAVE ERROR: missing item translationLangCode_G', item); return; }
        if (!item.subtitleIndex && !item.subtitleIndex === 0) { util.fuck('SAVE ERROR: missing item subtitleIndex', item); return; }
        if (!item.langCode_G) { util.fuck('SAVE ERROR: missing item langCode_G', item); return; }
        if (!item.subtitle) { util.fuck('SAVE ERROR: missing item subtitle', item); return; }
        if (!item.movieId) { util.fuck('SAVE ERROR: missing item movieId', item); return; }
        if (!window.__IS_YOUTUBE) {
            if (!item.langCode_N) { util.fuck('SAVE ERROR: missing item langCode_N', item); return; }
            if (!item.trackType) { util.fuck('SAVE ERROR: missing item trackType', item); return; }
        }

        if (obj.isSubtitleSaved(subtitleIndex)) {
            // update saved item
            removeItem(item.key);
            // update vv and current sub
            togglePhraseInSubs(item, false);
        } else {
            saveItem(item);
            // update vv and current sub
            togglePhraseInSubs(item, true);
        }
    }

    function unsaveWord (wordKey) { // ok
        removeItem(wordKey);
        updateWordColors(wordKey, 'C0');
    }

    function getSubTranslationIfAvailable(subtitleIndex){ // ok
        if (lln.setMan.getShowMT()) {
            return ((lln.subMan.mTranslations || {})[subtitleIndex] || '');
        } else {
            return (lln.subMan.hTranslations || {})[subtitleIndex] || '';
        }
    }

    // gets sub with 2 surrounding subs, with mTranslations and hTranslations
    function getSubContext(subtitleIndex) { // ok
        subtitleIndex = parseInt(subtitleIndex);
        return JSON.stringify({
            subs: [(lln.subMan.subtitles[subtitleIndex - 1] || {}).text || '', (lln.subMan.subtitles[subtitleIndex] || {}).text || '', (lln.subMan.subtitles[subtitleIndex + 1] || {}).text || ''],
            mTranslations: [((lln.subMan.mTranslations || {})[subtitleIndex - 1] || ''), ((lln.subMan.mTranslations || {})[subtitleIndex] || ''), ((lln.subMan.mTranslations || {})[subtitleIndex + 1] || '')],
            hTranslations: [((lln.subMan.hTranslations || {})[subtitleIndex - 1] || ''), ((lln.subMan.hTranslations || {})[subtitleIndex] || ''), ((lln.subMan.hTranslations || {})[subtitleIndex + 1] || '')],
        });
    }

    // only for current movie's subs
    function toggleWordSave(wordKey, subtitleIndex, color, word, tokenStr, wordIndex, savedItemData) { // ok
        subtitleIndex = parseInt(subtitleIndex);
        let item = {source: window.__IS_YOUTUBE ? 'YOUTUBE' : 'NETFLIX'};
        if (savedItemData) {
            // pick up sub/movie info from a saved item
            item = savedItemData;
        } else {
            // pick up sub/movie info from UI/subMan/setMan
            item.langCode_G = lln.subMan.data.textTrackLangCode_G;
            item.subtitle = lln.subMan.subtitles[subtitleIndex].text;
            item.tokens = (lln.subMan.subtitlesNLP || {})[subtitleIndex] || [];
            item.movieId = lln.subMan.data.movieId;
            item.translation = getSubTranslationIfAvailable(subtitleIndex);
            item.subContext = getSubContext(subtitleIndex);
            item.translationLangCode_G = lln.setMan.getTranslationLanguageCode();
            item.numSubs = lln.subMan.subtitles.length;
            item.title = lln.subMan.data.title;
            if (window.__IS_YOUTUBE) { // youtube-specific params
                item.youtube_params = {
                    isFromASR: lln.subMan.data.isFromASR,
                    isTranslatedTrack: lln.subMan.data.isTranslatedTrack,
                    originalLangCode_G: lln.subMan.data.originalLangCode_G,
                    md5: lln.subMan.data.md5,
                    channelId: lln.subMan.data.channelId,
                    channelName: lln.subMan.data.channelName,
                    subsParserVersion: 0
                }
            } else { // netflix-specific params
                item.langCode_N = lln.subMan.data.textTrackLangCode_N;
                item.trackType = lln.subMan.data.textTrackType;
                item.ttId = lln.subMan.data.activeTextTrackDownloadbleId;
            }
        }

        // pick up word info. this needs to run for saveditems too, because another word (not the already saved one) can be saved
        item.itemType = 'WORD';
        item.color = color;
        item.word = word;
        item.wordLemma = wordKey.split('|')[1];
        item.wordIndex = wordIndex;
        item.subtitleIndex = subtitleIndex;
        item.posTag = lln.pureText.parseToken(tokenStr).posTag || '';
        item.key = generateItemKey(item);

        if (!item.word) { util.fuck('SAVE ERROR: missing item word', item); return; }
        if (!item.wordLemma) { util.fuck('SAVE ERROR: missing wordLemma', item); return; }
        if (!item.translationLangCode_G) { util.fuck('SAVE ERROR: missing item translationLangCode_G', item); return; }
        if (!item.subtitleIndex && !item.subtitleIndex === 0) { util.fuck('SAVE ERROR: missing item subtitleIndex', item); return; }
        if (!item.langCode_G) { util.fuck('SAVE ERROR: missing item langCode_G', item); return; }
        if (!item.subtitle) { util.fuck('SAVE ERROR: missing item subtitle', item); return; }
        if (!item.movieId) { util.fuck('SAVE ERROR: missing item movieId', item); return; }
        if (!window.__IS_YOUTUBE) {
            if (!item.trackType) { util.fuck('SAVE ERROR: missing item trackType', item); return; }
            if (!item.langCode_N) { util.fuck('SAVE ERROR: missing item langCode_N', item); return; }
        }

        if (!color) {
            // toggle color
            let currentColor = obj.savedItemKeys[item.key];
            if (currentColor) {
                item.color = 'C0';
            } else {
                item.color = 'C1';
            }
        }
        if (item.color === 'C0') {
            removeItem(item.key);
        } else {
            saveItem(item);
        }
        updateWordColors(item.key, item.color);
    }

    function updateWordColors(wordKey, color){ // ok
        $(`.lln-word[data-word-key="${wordKey}"]`).attr('data-color', color);
        $(`.lln-word-save-btn[data-color="${color}"]`).addClass('active').siblings().removeClass('active');
        lln.bottomPanel.redrawBottomPanel();
    }

    function saveItem (item) { // ok
        // update obj
        obj.savedItemKeys[item.key] = (item.color || true);

        // add to saved items dom
        const $savedItems = $('#lln-vertical-view-saved-items .content');
        if (!$savedItems.find('.lln-vertical-view-sub').length) {
            // clear 'no saved items' message
            $savedItems.html('');
        }
        $(`#lln-vertical-view-saved-items .content [data-item-key="${generateItemKey(item)}"]`).remove();
        if (!shouldHideItem(item)) {
            $('#lln-vertical-view-saved-items .content').prepend(generateSavedItemHTML(item));
        }

        // update dropdowns
        renderFiltersUI();

        // animate saved items tab
        $('.lln-vv-tab-title[data-tab="VV_SAVED_WORDS"]').addClass('lln-animate-bounce');
        $('body:not(.lln-vertical-view-active) .lln-toggle-vertical-view .star').show();
        setTimeout(function(){
            $('.lln-vv-tab-title[data-tab="VV_SAVED_WORDS"]').removeClass('lln-animate-bounce');
            $('.lln-toggle-vertical-view .star').fadeOut();
        }, 700);

        debounceByKey(function(){
            // update db
            CF_RPC('saveItem', item, function(result){
                if(result.status !== "success") {
                    alert('There was an error saving item. Please contact our support if the problem persists.')
                }
            });
        }, item.key, 1200);
    }

    function removeItem (itemKey) { // ok
        delete obj.savedItemKeys[itemKey];
        // remove from saved items dom
        $(`#lln-vertical-view-saved-items .content [data-item-key="${itemKey}"]`).remove();
        // update db
        debounceByKey(function(){
            CF_RPC('removeItem', {key: itemKey}, function(result){
                if(result.status !== "success") {
                    util.error('REMOVE_ITEM SERVER ERROR', true, '');
                }
            });
        }, itemKey, 1200);

    }

    // update sub (star/unstar) in VV and main subs
    function togglePhraseInSubs(item, active) { // ok
        if (subInCurrentMovie(item)) {
            let $starBtn = $('#lln-vertical-view-subs .lln-vertical-view-sub').eq(item.subtitleIndex).find('.lln-star-sub-btn');
            if (active) {
                $starBtn.addClass('active');
            } else {
                $starBtn.removeClass('active');
            }
            lln.bottomPanel.redrawBottomPanel();
        }
    }

    function getSubIndex($subChild) { // ok
        let $sub = $subChild.closest('.lln-vertical-view-sub, .lln-subs');
        return parseInt($sub.attr('data-index'));
    }

    $(document).on('click', '#lln-vertical-view-subs .lln-star-sub-btn, #lln-main-subs .lln-star-sub-btn', function(e) { // ok
        e.preventDefault();
        if (lln.liMan.accessProFeature()) {
            toggleSubtitleSave(getSubIndex($(this)));
        }
    });

    obj.toggleCurrentSubtitleSaveItem = function() { // ok
        let subIndex = parseInt($('#lln-main-subs .lln-subs').attr('data-index'));
        if ((subIndex || subIndex === 0) && lln.liMan.accessProFeature()) {
            toggleSubtitleSave(subIndex);
        }
    };

    $(document).on('click', '#lln-vertical-view-saved-items .lln-star-sub-btn ', function(e) { // ok
        e.preventDefault();
        if (lln.liMan.accessProFeature()) {
            let itemKey = $(this).closest('.lln-vertical-view-sub').attr('data-item-key');
            if (parseItemKey(itemKey).itemType === 'PHRASE') {
                unsaveSub(itemKey);
            } else {
                unsaveWord(itemKey);
            }
        }
    });

    // event for saving / unsaving words:
    // color button inside dict popup
    $(document).on('click', '.lln-word-save-btn', function(e) { // ok
        e.preventDefault();
        if (lln.liMan.accessProFeature()) {
            // revisit vv, saved items, redraw current sub
            const color = $(this).attr('data-color');
            const subIndex = lln.dict.dictInfo.subIndex;
            const wordKey = lln.dict.dictInfo.word.key;
            const wordIndex = lln.dict.dictInfo.word.tokenIndex;
            const token = lln.dict.dictInfo.word.token;
            $(this).addClass('active').siblings().removeClass('active');
            toggleWordSave(wordKey, subIndex, color, lln.dict.dictInfo.word.text, token, wordIndex, lln.dict.dictInfo.savedItemData);
        }
    });

    $(document).on('contextmenu', '#lln-bottom-panel, .lln-vertical-view', function(e){ // ok
        if (!$(e.target).hasClass('lln-word')) {
            e.preventDefault();
        }
    });

    obj.saveWordElement = function($word) { // ok
        if (lln.liMan.accessProFeature()) {
            // hide dict
            $('.lln-dict-tooltip').removeClass('show');
            // get dict info
            lln.dict.dictInfo = lln.dict.getDictInfo($word);
            // revisit vv, saved items, redraw current sub
            let color = $word.attr('data-color');
            if (color === 'C1') {
                color = 'C2'
            } else if (color === 'C2') {
                color = 'C0'
            } else {
                color = 'C1';
            }

            const subIndex = lln.dict.dictInfo.subIndex;
            const wordKey = lln.dict.dictInfo.word.key;
            const wordIndex = lln.dict.dictInfo.word.tokenIndex;
            const token = lln.dict.dictInfo.word.token;
            toggleWordSave(wordKey, subIndex, color, lln.dict.dictInfo.word.text, token, wordIndex, lln.dict.dictInfo.savedItemData);
        }
    }

    // debounce, used to prevent item save requests from 'sticking together', or
    // happening out of order
    let debounceByKeyTimeouts = {};
    function debounceByKey(fn, key, delay){
        clearTimeout(debounceByKeyTimeouts[key]);
        debounceByKeyTimeouts[key] = setTimeout(fn, delay);
    }

    // language change
    $(document).on('change', '#llnSavedItemsLanguage, #llnSavedItemsType', function() { // ok
        obj.numItemsToShow = 50;
        reloadFullItems();
    });

    // prevent word selection on double click
    $(document).on('mousedown', '.lln-word', function(e) {
        if (e.detail > 1) {
            e.preventDefault();
        }
    });

    // close dict
    $(document).on('click', function(e) {
        if (!($(e.target).hasClass('lln-word')) && (!$(e.target).closest('.lln-dict-tooltip').length || $(e.target).closest('.close-dict').length)) {
            $('.lln-dict-tooltip').removeClass('show');
        }
    });

    // print

    function getSavedItemsPrintHtml() { // ok
        let html = `
        ${
            $('#lln-vertical-view-saved-items .lln-vertical-view-sub:visible').map(function () {
                const itemKey = $(this).attr('data-item-key');
                const item = JSON.parse(decodeURIComponent($(this).attr('data-item-data')));
                return `<tr>
                    <td>${item.wordLemma || item.subtitle}</td>
                    <td>${item.wordDefinition || item.translation}</td>
                    </tr>`
            }).get().join('')
            }`;
        if (html.trim()) {
            return `<table>${html}</table>`
        } else {
            return '';
        }
    }

    // open printable items in new window
    let printInstance = 0;
    $(document).on('click', '#llnPrintBtn', function(e) {
        e.preventDefault();
        let content  = '';
        if(lln.setMan.getVerticalViewTab() === 'VV_SUBS') {
            // subs (with movie title)
            content = '<div class="title">' + ($('.PlayerControls--control-element.video-title').html() || '') + '</div>';
            if (lln.align.printSubs && lln.align.printSubs.length) {
                content += `<table> ${lln.align.printSubs.map(row => `<tr><td>${row[0] || ''}</td><td>${row[1] || ''}</td></tr>`).join('\n')} </table>`;
            } else {
                content += `<table> ${lln.subMan.subtitles.map(sub => `<tr><td>${sub.text || ''}</td></tr>`).join('\n')} </table>`;
            }
        } else {
            // saved items
            content = getSavedItemsPrintHtml() || lln_i18n.noSavedItems;
        }

        // some weird fake url, because no url produced infinite loading
        let w = window.open('http://languagelearningwithnetflix.com/print.html', 'Print' + (++printInstance));
        w.document.write(`
            <html> <head><title>${($('.PlayerControls--control-element.video-title h4').text() || 'For print')}</title><style>
                body { font-family: Arial; }
                .lln-sub-play-btn { display: none; }
                .lln-vertical-view-sub { margin-top: 3px !important; }
                .saved {text-decoration: underline; }
                .title { padding-bottom: 25px; }
                .title span, .title h4 { 
                    margin-right: 5px; 
                    display: inline; 
                    font-size: 20px;
                }
                table { width: 660px; table-layout:fixed; }
                td { padding-right: 10px; vertical-align: top; width: 330px; padding-bottom: 5px; }
            </style></head><body>
            ${content} </body></html>`);

    });

    // remove items

    $(document).on('click', '#llnRemoveAllItemsBtn', function(e) {
        e.preventDefault();
        // show 'are you sure?' modal
        $('#lln-modal-removeitems').show();

    });

    $(document).on('click', '#llnRemoveAllItemsRemoveBtn', function(e) {
        e.preventDefault();
        removeAllItems();
    });


    function removeAllItems () {
        let params = getFilterParams();
        $('#llnRemoveAllItemsRemoveBtn').addClass('lln-disabled lln-loading');
        // update db
        CF_RPC('removeAllItems', params, function(result){
            if(result.status === "success") {
                const removedKeys = result.data.removedKeys || {};
                for (const key of removedKeys) {
                    delete obj.savedItemKeys[key];
                    // remove from saved items dom
                    $(`#lln-vertical-view-saved-items .content [data-item-key="${key}"]`).remove();
                }
                reloadFullItems();
                $('#lln-modal-removeitems').hide();
            } else {
                util.error('REMOVE_ALL_ITEMS SERVER ERROR', true, '');
            }
            $('#llnRemoveAllItemsRemoveBtn').removeClass('lln-disabled lln-loading');
        });
    }


    // anki export


    $(document).on('click', '#llnAnkiExportBtn', function(e) {
        // show modal
        e.preventDefault();
        $('#lln-anki-export-modal').show();

        // set modal text
        const langText = $('#llnSavedItemsLanguage:visible option:selected').text();
        $('#llnAnkiLanguage').text(langText ? langText + ', ': '');
        $('#llnAnkiType').text($('#llnSavedItemsType option:selected').text());

        $('#lln-anki-export-modal-export-btn').removeClass('lln-disabled lln-loading');
    });

    function startFileDownload(textContent, fileName, mimeType) {
        const blob =  new Blob(
            [ textContent ], // Blob parts.
            {
                type : (mimeType || 'text/plain') + ";charset=utf-8"
            }
        );
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        // the filename you want
        const d = new Date();
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
    }

    $(document).on('click', '#llnJsonExportBtn', function(e) {
        // download right away
        e.preventDefault();
        let params = getFilterParams();
        $("#lln-modal-loading").show();
        CF_RPC('itemsJsonExport', params, function(result){
            $("#lln-modal-loading").hide();
            if (result.data.result) {
                const d = new Date();
                const fileName = `lln_json_items_${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()}.json`;
                startFileDownload(result.data.result, fileName, 'application/json');
            } else {
                // shouldn't happen
                alert('No items in your database.');
            }
        });
    });

    $(document).on('click', '#llnCsvExportBtn', function(e) {
        // download right away
        e.preventDefault();
        let params = getFilterParams();
        $("#lln-modal-loading").show();
        CF_RPC('itemsCsvExport', params, function(result){
            $("#lln-modal-loading").hide();
            if (result.data.result) {
                const d = new Date();
                const fileName = `lln_csv_items_${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()}.csv`;
                startFileDownload(result.data.result, fileName);
            } else {
                // shouldn't happen
                alert('No items in your database.');
            }
        });
    });

    $(document).on('click', '#lln-anki-export-modal-export-btn', function(e) {
        e.preventDefault();
        $('#lln-anki-export-modal-export-btn').addClass('lln-disabled lln-loading');
        let params = getFilterParams();
        params.cardFormat = $('#ankiCardFormat').val();
        params.preferredTranslationType = $('#ankiPreferredTranslationType').val();
        params.itemsSinceLastExportOnly = $('#lln-itemsSinceLastExportOnly').prop('checked');

        // getAnkiItemsRandom
        CF_RPC('getAnkiItems', params, function(result){
            if (result.data.ankiCSV) {
                const d = new Date();
                const fileName = `lln_anki_items_${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()}.csv`;
                startFileDownload(result.data.ankiCSV, fileName);
                $('#lln-anki-export-modal').hide();
            } else if (params.itemsSinceLastExportOnly) {
                alert('No new items since last export.');
            } else {
                // shouldn't happen
                alert('No items in your database.');
            }
            $('#lln-anki-export-modal-export-btn').removeClass('lln-disabled lln-loading');

        });
    });

    function updateAnkiExport() {
        let csvArray = [];
        // $('#lln-anki-select input[type="checkbox"]:not(#lln-anki-export-all-items-checkbox):checked').each(function(){
        //     let itemKey = $(this).attr('data-item-key');
        //     let item = obj.savedItems[itemKey];
        //     if (item) {
        //         if (item.itemType == 'WORD') {
        //             csvArray.push([
        //                 item.word,
        //                 (item.wordDefinition || '') + '\n\n\nExample:\n\n' + item.subtitle + '\n\n' + item.translation // add dict entry first
        //             ]);
        //         } else { // phrase
        //             csvArray.push([
        //                 item.subtitle,
        //                 item.translation
        //             ]);
        //         }
        //     }
        // }).get();
        // const csv = lln.pureText.CSV.serialize(csvArray, {delimiter: '\t'});



        $('#lln-anki-export-modal-export-btn').attr('href', 'data:text/csv;charset=utf-8,' + encodeURI(csv))
    }

    return obj;

};

VerticalView = function(lln) {

    var obj = {};

    obj.getVVTranslation = function(index, callback) {

        // machine translation undesired?
        var mt_undesired = !lln.setMan.getShowMT() && lln.setMan.getShowHT();

        // if machine available, and not undesired, use machine
        if(lln.subMan.mTranslationsAvailable && !mt_undesired) {
            lln.subMan.accessSingleMTranslation(index, function() {
                    callback(lln.subMan.mTranslations[index]);
            });
        }

        // Ognjen, vaping is not without it's health risks.
        // Why not be smart and switch to amphetamines, or chewing coca leaves?

        // else if human available, use human
        else if(lln.subMan.hTranslationsAvailable && lln.subMan.hTranslations[index]) {

            callback(lln.subMan.hTranslations[index]);
        }
        // well, maybe machine translation is undesired, but peor es nada.
        else if(lln.subMan.mTranslationsAvailable) {
            lln.subMan.accessSingleMTranslation(index, function() {
                    callback(lln.subMan.mTranslations[index]);
            });
        }
        else {
            callback(`(${lln_i18n.notAvailable})`);
        }
    }

    $(document).on('click', '.lln-sub-play-btn', function(e){
        e.preventDefault();
        let $netflixPlayBynAfterLongPause = $('.nf-big-play-pause.nf-big-play-pause-secondary');
        if ($netflixPlayBynAfterLongPause.length) {
            // play after video was paused for a long time
            $netflixPlayBynAfterLongPause.trigger('click');
            setTimeout(function(){
                lln.playMan.playSubtitle(parseInt($(this).closest('.lln-vertical-view-sub').attr('data-index')));
            }, 1500);
        } else {
            // normal play
            lln.playMan.playSubtitle(parseInt($(this).closest('.lln-vertical-view-sub').attr('data-index')));
        }
    });

    // let focusTimeout;
    // $(document).on('input click', '#lln-vertical-view-search', function(){
    //     clearTimeout(focusTimeout);
    //     focusTimeout = setTimeout(function(){
    //         $('#lln-main-subs').focus();
    //     }, 6000);
    // });

    $(document).on('click', '.lln-clear-text-input', function(e){
        e.preventDefault();
        $(this).closest('.lln-text-input-wrap').find('input').val('').trigger('input').focus();
    });

    // search
    // $(document).on('input', '#lln-vertical-view-search', function(){
    //     vidMan.pause();
    //
    //     let $this = $(this);
    //
    //     // toggle clear button
    //     let $wrap = $this.closest('.lln-text-input-wrap');
    //     if ($this.val()) {
    //         $wrap.addClass('show-clear-btn');
    //     } else {
    //         $wrap.removeClass('show-clear-btn');
    //     }
    //
    //     let searchText = $this.val().toLowerCase();
    //     let $subsContainer = $('#lln-vertical-view-subs');
    //     let $subs = $('#lln-vertical-view-subs .lln-vertical-view-sub');
    //     $subs.each(function(){
    //         if ($(this).text().toLowerCase().indexOf(searchText) > -1) {
    //             $(this).show();
    //         } else {
    //             $(this).hide();
    //         }
    //     });
    //
    //     // toggle margins
    //     if (searchText) {
    //         $subsContainer.addClass('no-margins');
    //     } else {
    //         $subsContainer.removeClass('no-margins');
    //     }
    // });

    // // load subs
    // $(document).on('lln_subsChanged lln_stemmerLoadingDone lln_serverTokensLoaded', function(){

    //     let $vvs = $('#lln-vertical-view-subs');
    //     if ($vvs.length) $vvs.html(generateVVHTML());
    //     obj.highlightAndScrollToActiveSub();

    // });

    let vvItemPositions = [];
    let vvItems = [];
    let vvItemsContainer = document.getElementById('lln-vertical-view-subs');
    obj.redraw = function() {
        let vvItemsContainer = document.getElementById('lln-vertical-view-subs'); // refresh instance
        if (vvItemsContainer) {
            let starttime = (new Date()).getTime();
            vvItemsContainer.innerHTML = '';
            $(vvItemsContainer).removeClass('absolute');
            vvItemsContainer.innerHTML = generateInitialVVHTML();
            vvItems = Array.from(vvItemsContainer.children);
            // first get all offsets (separate dom reads from writes)
            vvItemPositions = vvItems.map(item => ({top: item.offsetTop, height: item.clientHeight, visible: false}));
            // set top offsets manually
            for (let i = vvItemPositions.length - 1; i >= 0; i--) {
                vvItems[i].style.top = vvItemPositions[i].top + 'px';
            }
            $(vvItemsContainer).addClass('absolute');
            updateItemVisibility(vvItemsContainer.scrollTop, vvItemsContainer.clientHeight);
            util.log('loading VV subs took ', ((new Date()).getTime() - starttime) + 'ms');
        }
        // add scroll listener, if not present (check with class)
        if (vvItemsContainer && !vvItemsContainer.classList.contains('scroll-event-added')) {
            vvItemsContainer.classList.toggle('scroll-event-added', true);
            $(vvItemsContainer).on('scroll', function() { // danger - non-delegated event
                updateItemVisibility(this.scrollTop, this.clientHeight);
            });
        }
    };
    function updateItemVisibility(scrollTop, scrollContainerHeight){
        let index = 0;
        for (let itemInfo of vvItemPositions) {
            let itemVisible = (itemInfo.top + itemInfo.height >= scrollTop - 200 && itemInfo.top < scrollTop + scrollContainerHeight + 200);
            if (index === vvItemPositions.length - 1) {
                itemVisible = true; // always show last item, for scroll to work properly
            }
            if (itemInfo.visible !== itemVisible) {
                itemInfo.visible = itemVisible;
                vvItems[index].classList.toggle('in-scroll', itemVisible);
                if (! vvItems[index].classList.contains('loaded')) {
                    vvItems[index].innerHTML = generateFullVVSubItemHTML(index);
                    vvItems[index].classList.toggle('loaded', true);
                }
            }
            index++;
        }
    }

    $(window).on('resize', function() {
        updateItemVisibility(vvItemsContainer.scrollTop, vvItemsContainer.clientHeight);
    });
    $(document).on('click', '.lln-vv-tab-title', function(e){
        e.preventDefault();
        setTimeout(function(){
            updateItemVisibility(vvItemsContainer.scrollTop, vvItemsContainer.clientHeight);
        });
    });

    function generateFullVVSubItemHTML(subIndex) {
        var html = '';

        if (lln.subMan.subtitles && lln.subMan.subtitles[subIndex]) {
            let s = lln.subMan.subtitles[subIndex];
            html = `<div class="lln-sub-play-btn"></div>
                        <div class="lln-sub-text">
                            ${lln.pureText.subToHtml('vv', s.text, lln.subMan.subLangCode_G, true, lln.setMan.getVocabSize(), lln.savedItems.isSubtitleSaved(subIndex), true, '', (lln.subMan.subtitlesNLP || {})[subIndex])}
                        </div>`;
        }

        return html;
    }

    function generateInitialVVHTML() {
        // initial html, used only to calculate heights, and provide initial wrapper with attributes

        var html = '';

        let needsFullHtml = (lln.subMan.subLangCode_G === 'ja');

        if (lln.subMan.subtitles) {
            lln.subMan.subtitles.forEach((s, index, arr) => {
                let spacing = index === arr.length - 1 ? 0 : (arr[index + 1].begin - s.end) / 1000.0;

                const maxGap = 50; // pixels
                let marginBottom = (1- Math.exp(-(spacing/4))) * maxGap;
                marginBottom = Math.max(Math.round(marginBottom) + 3, 8);

                // add rtl class for right-to-left languages
                const rtl = (['ar', 'iw', 'fa', 'ur'].indexOf(lln.subMan.subLangCode_G) > -1);

                let innerHtml =

                html += `
                    <div class="lln-vertical-view-sub odd ${rtl ? 'lln-rtl' : ''} ${needsFullHtml ? 'loaded' : ''}" style="margin-bottom: ${marginBottom}px" data-index="${index}">           
                        ${needsFullHtml ? '<div class="lln-sub-play-btn"></div>' : ''}
                        <div class="lln-sub-text">
                            ${ needsFullHtml ? generateFullVVSubItemHTML(index) : (s.text + '.') }
                        </div>
                    </div>`;

            });
        }

        return html;
    }

    let subHoverTimeout;
    let subHoverIndex;
    $(document).on('mouseenter', '.lln-vertical-view-sub', function(){
        let $this = $(this);
        clearTimeout(subHoverTimeout);
        subHoverTimeout = setTimeout(function(){
            let $trans = $('#lln-v-sub-hover-translation');
            if ($this.closest('#lln-vertical-view-saved-items').length) {
                // saved item. get translation directly
                let subTranslation = JSON.parse(decodeURIComponent($this.attr('data-item-data'))).translation || '';
                $trans.show();
                $trans.css({opacity: 0.8, top: ($this[0].getBoundingClientRect().y + $this.height() / 2 + 3) + 'px', left: ($this[0].getBoundingClientRect().x - 10) + 'px'});
                $trans.text(subTranslation);
            } else {
                // VV item
                let subIndex = parseInt($this.attr('data-index'));
                subHoverIndex = subIndex;
                obj.getVVTranslation(subIndex, function(subTranslation) {
                    if (subHoverIndex === subIndex) {
                        $trans.show();
                        $trans.css({opacity: 0.8, top: ($this[0].getBoundingClientRect().y + $this.height() / 2 + 3) + 'px', left: ($this[0].getBoundingClientRect().x - 10) + 'px'});
                        $trans.text(subTranslation);
                    }
                });
            }
        }, 350);
    });

    $(document).on('mouseleave', '.lln-vertical-view-sub', function(){
        let $trans = $('#lln-v-sub-hover-translation');
        $trans.css({opacity: 0});
        clearTimeout(subHoverTimeout);
        subHoverIndex = -1;
    });

    let disableAutoScroll = false;
    let disableAutoScrollTimeout;
    // pause playback on scroll: disable for now
    $('#lln-vertical-view-subs').on('mousewheel touchmove', function(){
        disableAutoScroll = true;
        clearTimeout(disableAutoScrollTimeout);
        disableAutoScrollTimeout = setTimeout(function(){
            disableAutoScroll = false;
        }, 5000);
        // ex: pause video
        // if (setMan.getVerticalViewTab() === 'VV_SUBS') {
        //     vidMan.pause();
        // }
    });

    // let lastStartedSubIndex = 0;
    // on sub change
    $(document).on('LLN_subStepIndexChanged', function(){
        obj.highlightAndScrollToActiveSub();
    });

    obj.highlightAndScrollToActiveSub = function() {
        let vv = document.getElementById('lln-vertical-view-subs');
        if (lln.setMan.getVerticalViewActive() && lln.setMan.getVerticalViewTab() === 'VV_SUBS' && vv) {
            /*
            let currentLastStartedSubIndex = subMan.getLastStartedSubtitleIndex(vidMan.getTime());
            if (currentLastStartedSubIndex >= 0) {
                lastStartedSubIndex = currentLastStartedSubIndex;
            }
            */

            // fixme: refactor sometime
            let lastStartedSubIndex;
            if(lln.playMan.getSubStepIndex() !== -1) {
                lastStartedSubIndex = lln.playMan.getSubStepIndex();
            }
            else {
                lastStartedSubIndex = lln.subMan.getLastStartedSubtitleIndex(lln.vidMan.getTime());
            }

            if(lastStartedSubIndex < 0) { lastStartedSubIndex = 0; }

            // change active sub
            if( Object.keys(lln.subMan.subtitles || {}).length > lastStartedSubIndex ) {
                let activeSub = document.querySelector('#lln-vertical-view-subs .lln-vertical-view-sub.active');
                if (activeSub) {
                    activeSub.classList.remove('active');
                }
                if (vv.children.length > lastStartedSubIndex) {
                    vv.children[lastStartedSubIndex].classList.add('active');
                }
            }

            // scroll to the active sub
            // && !vidMan.getPaused()
            if (vv && !disableAutoScroll && Object.keys(lln.subMan.subtitles || {}).length > lastStartedSubIndex) {
                // current subtitle top (relative to parent scroll top)
                let currentSubTop = parseInt($('#lln-vertical-view-subs .lln-vertical-view-sub').eq(lastStartedSubIndex).css('top') || 0);
                if (currentSubTop) {
                    let $vv = $(vv);
                    let vvScrollTop = $vv.scrollTop();
                    if (currentSubTop - vvScrollTop < 90 || currentSubTop - vvScrollTop > Math.max($vv.height() - 50, 200)) {
                        let gapSize = Math.abs(currentSubTop - vvScrollTop + 150);
                        $vv.css({'scroll-behavior': (gapSize > 800 ? 'auto' : 'smooth')});
                        $vv.scrollTop(currentSubTop - 120);
                        // console.log('CST', currentSubTop);
                    } else {
                        // console.log('no need to scroll');
                    }
                }
            }
        }
    }

    // prevent space from scrolling VV subs and saved items
    $(document).on('keydown', 'body.lln-active.lln-vertical-view-active', function(e) {
        if(e.keyCode == 32 && e.target == document.body) { // space
            e.preventDefault();
        }
    });

    return obj;

};

////////// Dictionary related code //////////

var Dict = function(lln) {

    var obj = {};

    obj.dictInfo = {
        word: {text:'', lemma:'', key:'', token:'', tokenIndex: ''},
        x:0, y:0,
        subIndex: -1,
        inVerticalView: false,
        inVerticalViewSavedItems: false,
        savedItemKey: ''
    };

    let wordHashes = {};

    obj.addWordHashes = function(newWordHashes) {
        if (newWordHashes && Object.keys(newWordHashes).length) {
            wordHashes = {...wordHashes, ...newWordHashes }
        }
    };

    // show dictionary on word hover
    $(document).on('click', '.lln-word', function(e){
        e.preventDefault();
        var $this = $(this);
        if (e.shiftKey) {
            openExternalDict($this);

            // clear selection
            if (window.getSelection) {window.getSelection().removeAllRanges();
            } else if (document.selection) {
                document.selection.empty();
            }

            return;
        }

        let action = lln.setMan.getOnLeftClick();

        if (action === 'speakWord' || action === 'showDictSpeak') {
            // play word
            lln.pure.speak(lln.ui.getElTextWithoutChildren($this), $this.attr('data-word-key').split('|')[2]);
        }
        if (action === 'showDictSpeak' || action === 'showDict') {
            lln.dict.showDict($this);
        }
        if (action === 'saveWord') {
            lln.savedItems.saveWordElement($this);
        }
    });

    $(document).on('contextmenu', '.lln-vertical-view .lln-word', function(e){
        var $this = $(this);
        let action = lln.setMan.getOnRightClick();

        if (action === 'speakWord' || action === 'showDictSpeak') {
            // play word
            lln.pure.speak(lln.ui.getElTextWithoutChildren($this), $this.attr('data-word-key').split('|')[2]);
        }
        if (action === 'showDictSpeak' || action === 'showDict') {
            showDict($this);
        }
        if (action === 'saveWord') {
            lln.savedItems.saveWordElement($this);
        }
        if (action === 'doNothing') {
            // do nothing - let context menu show
            return true;
        } else {
            return false;
        }
    });

    $(document).on('click', '.lln-external-dict-btn', function(e){
        e.preventDefault();
        lln.setMan.setDefaultExternalDictName($(this).attr('data-name'));
        openExternalDictUrl($(this).attr('data-url'));
    });

    obj.showDict = function($word) {
        let dictInfo = obj.getDictInfo($word);
        if (JSON.stringify(dictInfo.word) === JSON.stringify(obj.dictInfo.word) && $('.lln-dict-tooltip').hasClass('show')) {
            // same word. close dict
            $('.lln-dict-tooltip').removeClass('show');
        } else {
            obj.dictInfo = dictInfo;
            showDictPopup(
                obj.dictInfo.word,
                $word.attr('data-word-key').split('|')[2],
                lln.setMan.getTranslationLanguageCode()
            );
        }
    }

    let lastDictRequestNum = 0;
    function showDictPopup(word, sourceLang_G, translationLang_G){
        let text = word.text;

        $('.lln-dict-tooltip .def').html('<div class="dict-loader"><div class="lds-ring"><div></div><div></div><div></div><div></div></div></div>');
        positionTooltip();
        $('.lln-dict-tooltip').addClass('show');
        lln.vidMan.pause();

        $(`.lln-dict-tooltip .lln-word-save-buttons`).addClass('lln-hidden');
        $(".lln-word-save-buttons .lln-external-dicts-container").html('');

        if (!sourceLang_G || !translationLang_G) {
            util.fuck("UI: dictLookup(): empty sl or tl");
            return;
        }

        // usage tracking.
        lln.liMan.activity("DICT");

        let f = (text || '').length % 4;
        const posTag = lln.pureText.parseToken(word.token || '').posTag || '';

        let wordHash = wordHashes[text.toLowerCase()] || '';
        let lemma = word.lemma;
        let wordKey = wordHash + '|' + (text || '').toLowerCase() + '|' + (lemma || '').toLowerCase() + '|' + posTag + '|' + sourceLang_G + '|' + translationLang_G + '|' + f;

        lastDictRequestNum += 1;
        let thisDictRequestNum = lastDictRequestNum;

        CF_RPC("getDictCached", wordKey, function(result) {
            if (thisDictRequestNum === lastDictRequestNum) {
                if(result.status === 'success') {
                    gotDictData(result.data.html);
                } else {
                    gotDictData(false);
                }
            }
        });

        function gotDictData(html) {
            // fixme: show a message for API failure
            // lln_i18n.notAvailable or something.
            let dictHtml = html || '';
            let examplesHtml = lln.pureText.getWordExamplesHtml(lemma || text, 30);

            if (!examplesHtml.trim() && !dictHtml.trim()) { // if html is empty
                dictHtml = `<div class="lln-no-translation centered">${lln_i18n.translationNotFound}</div>`;
            } else if (!dictHtml.trim()) { // if html is empty
                dictHtml = `<div class="lln-no-translation">${lln_i18n.translationNotFound}</div>`;
            }

            $('.lln-dict-tooltip .def').html(`<div class="def-word">${dictHtml}${examplesHtml}</div>`);

            // set word color in picker
            const wordColor = lln.savedItems.getWordColor(obj.dictInfo.word.key);
            $(`.lln-dict-tooltip .lln-word-save-buttons [data-color="${wordColor}"]`).addClass('active').siblings().removeClass('active');
            $(`.lln-dict-tooltip .lln-word-save-buttons`).removeClass('lln-hidden');

            generateExternalDictButtonsHtml(sourceLang_G, translationLang_G, lemma || text);

            if (lln.liMan.proFeaturesEnabled) {
                $(".lln-word-save-buttons-wrap").removeClass('tippy').css('opacity', 1);
            } else {
                $(".lln-word-save-buttons-wrap").addClass('tippy').css('opacity', 0.5);
            }
            $('.lln-dict-tooltip').addClass('show');
            positionTooltip();
        }
    }

    function positionTooltip(){
        if (!__LLN_ACTIVE) { return; }

        var $tt = $('.lln-dict-tooltip');
        if (!obj.dictInfo.inVerticalView) {
            // horizontal view
            var bottom = $('.lln-subs').offset().top - 20;
            var centerX = obj.dictInfo.x;

            $tt.css({
                top: (bottom - 10) + 'px',
                left: (centerX - $tt.width() / 2) + 'px',
                bottom: 'auto',
                right: 'auto',
                transform: 'translateY(-100%)'
            });
            $tt.removeClass('right');

            let left = $tt[0].getBoundingClientRect().left;
            let right = $tt[0].getBoundingClientRect().right;
            let ww = $(window).width();

            if (left < 10) {
                $tt.css('left', (parseInt($tt.css('left')) - left + 10) + 'px');
            } else if (right > ww - 10) {
                $tt.css('left', (parseInt($tt.css('left')) + (ww - right) - 10) + 'px');
            }

            let top = $tt[0].getBoundingClientRect().top;
            if (top < 30) {
                $tt.css('top', (parseInt($tt.css('top')) - top + 30) + 'px');
            }
        } else {
            // in vertical view
            $tt.css({
                top: (obj.dictInfo.y) + 'px',
                left: (obj.dictInfo.x - $tt.width() - 10) + 'px',
                bottom: 'auto',
                right: 'auto',
                transform: 'translateY(-50%)',
            });
            $tt.addClass('right');

            // move dictionary inside the screen
            let top = $tt[0].getBoundingClientRect().top;
            let btm = $tt[0].getBoundingClientRect().bottom;
            let wh = $(window).height();

            if (top < 40) {
                $tt.css('top', (parseInt($tt.css('top')) - top + 40) + 'px');
            } else if (btm > wh - 10) {
                $tt.css('top', (parseInt($tt.css('top')) + (wh - btm) - 10) + 'px');
            }
        }
        $tt.find('.def').scrollTop(0);
    }

    function popupCenter(url, title, w, h) {
        // Fixes dual-screen position                         Most browsers      Firefox
        var dualScreenLeft = window.screenLeft ? window.screenLeft : window.screenX;
        var dualScreenTop = window.screenTop ? window.screenTop : window.screenY;

        var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = (width - w) / 2  + dualScreenLeft;
        var top = (height - h) / 2 + dualScreenTop;
        var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

        // Puts focus on the newWindow
        if (window.focus) newWindow.focus();
    }

    // extract dict information for a given lln-word dom element
    obj.getDictInfo = function($word) {
        let dictInfo = {};
        // save active subIndex
        let $sub = $word.closest('.lln-vertical-view-sub, .lln-subs');
        // have to keep sub index separately, because jquery is losing track of an element
        dictInfo.subIndex = parseInt($sub.attr('data-index'));

        dictInfo.inVerticalView = $word.closest('.lln-vertical-view').length > 0;
        dictInfo.inVerticalViewSavedItems = $word.closest('#lln-vertical-view-saved-items').length > 0;
        if (dictInfo.inVerticalViewSavedItems) {
            dictInfo.savedItemKey = $word.closest('.lln-vertical-view-sub').attr('data-item-key');
            dictInfo.savedItemData = JSON.parse(decodeURIComponent($word.closest('.lln-vertical-view-sub').attr('data-item-data')) || '{}');
        } else {
            dictInfo.savedItemKey = undefined;
            dictInfo.savedItemData = undefined;
        }

        let text = lln.ui.getElTextWithoutChildren($word);
        let lemma = (lln.pureText.parseToken($word.attr('data-token') || '').lemma) || lln.ui.getElTextWithoutChildren($word);
        if (lemma === text) {
            lemma = ''; // clear lemma if equal to text
        }

        if (dictInfo.inVerticalView) {
            dictInfo.x = $sub[0].getBoundingClientRect().left;
        } else {
            dictInfo.x = $word[0].getBoundingClientRect().left + $word.width() / 2;
        }
        dictInfo.y = $word[0].getBoundingClientRect().top + $word.height() / 2;

        dictInfo.word = {
            key: $word.attr('data-word-key'),
            text: text,
            lemma: lemma,
            token: $word.attr('data-token'),
            tokenIndex: $word.attr('data-token-index'),
            i: $word.index()
        };

        return dictInfo;
    }

    function generateExternalDictButtonsHtml(sl, tl, word) {
        getExternalDicts(sl, tl, function(externalDicts){
            let buttonsHtml = '';
            // server external dicts
            for (let dict of externalDicts) {
                buttonsHtml += `<div class="lln-external-dict-btn tippy" data-name="${dict.name}" data-tippy-content="${dict.name}" data-url="${dict.url.replace('{q}', word)}" data-dict-type="${dict.info.type || ''}">${dict.info.symbol}</div>`;
            }
            // user-defined external dicts
            let index = 1;
            for (let url of (lln.setMan.getUserDefinedDictUrls() || '').split('\n')){
                if (url.trim().length) {
                    buttonsHtml += `<div class="lln-external-dict-btn tippy" data-name="User-defined ${index}" data-tippy-content="User-defined ${index}" data-url="${url.replace('WORD', word)}" data-dict-type="user-defined">U${index}</div>`;
                    index += 1;
                }
            }
            $(".lln-word-save-buttons .lln-external-dicts-container").html(buttonsHtml);
        });
    }

    let externalDicts = { // cache external dicts
        // sl_tl: []
    };
    function getExternalDicts(sl, tl, callback){
        let cacheKey = sl + '_' + tl;
        if (externalDicts[cacheKey]) {
            callback(externalDicts[cacheKey]);
        } else {
            $.get( "https://us-central1-nlle-b0128.cloudfunctions.net/getExtDicts", {
                sl: sl,
                tl: tl
            }, function(response) {
                externalDicts[cacheKey] = response.externalDicts;
                callback(externalDicts[cacheKey]);
            });
        }
    }

    function openExternalDict($word) {
        let dictInfo = obj.getDictInfo($word);

        let dictName = lln.setMan.getDefaultExternalDictName();

        let sourceLang_G = $word.attr('data-word-key').split('|')[2];
        let translationLang_G = lln.setMan.getTranslationLanguageCode();
        let text = dictInfo.word.text;
        let lemma = dictInfo.word.lemma;

        if (dictName.indexOf('User-defined') > -1) {
            // handle user-defined dict
            const dictIndex = parseInt(dictName.replace('User-defined', '').trim()) - 1;
            const dictUrl = ((lln.setMan.getUserDefinedDictUrls() || '').split('\n')[dictIndex] || '').replace('WORD', lemma || text);
            openExternalDictUrl(dictUrl);
            return;
        }

        getExternalDicts(sourceLang_G, translationLang_G, function(externalDicts) {
            if (externalDicts.length) {
                let dicts = externalDicts.filter(d => d.name === dictName);
                if (dicts.length) {
                    popupCenter(dicts[0].url.replace('{q}', lemma || text), dictName, 950, 680);
                } else {
                    // take any dict
                    popupCenter(externalDicts[0].url.replace('{q}', lemma || text), dictName, 950, 680);
                }
            } else {
                alert(`The language you are learning does not support any external dictionaries.`)
            }
        });
    }

    function openExternalDictUrl(dictUrl){
        if (dictUrl.toLowerCase().indexOf('http') === -1) {
            alert("User-defined dictionary URL format is not correct. It should start with 'http' or 'https'.")
        } else {
            popupCenter(dictUrl, 'Dictionary', 950, 680);
        }
    }

    obj.testDictSpeed = function() {
        let keys = [];
        let timings = [];
        let i = 0;
        for (let sub of lln.subMan.subtitlesNLP) {
            for (let token of sub) {
                if (lln.pureText.parseToken(token).isWord){
                    let lemma = lln.pureText.parseToken(token).lemma;
                    let text = lln.pureText.parseToken(token).text;
                    let f = (text || '').length % 4;
                    let translationLang_G = lln.setMan.getTranslationLanguageCode();
                    let sourceLang_G = lln.subMan.subLangCode_G;
                    const posTag = lln.pureText.parseToken(token || '').posTag || '';
                    let wordHash = wordHashes[text.toLowerCase()] || '';
                    let wordKey = wordHash + '|' + (text || '').toLowerCase() + '|' + (lemma || '').toLowerCase() + '|' + posTag + '|' + sourceLang_G + '|' + translationLang_G + '|' + f;
                    keys.push(wordKey);
                }
            }
        }
        // console.log('keys', keys.map(k=>'http://35.246.229.73/dictLookup?key=' + k).join('\n'));
        let interval = setInterval(function(){
            if (i >= keys.length) {
                clearInterval(interval);
                // console.log('TIMINGS:');
                // console.log(timings);
                return;
            }
            let wordKey = keys[i];
            let startTime = Date.now();


            CF_RPC("getDictCached", wordKey, function(result) {
                if(result.status === 'success') {
                    // console.log('test', i, 'of', keys.length, 'took', (Date.now() - startTime));
                    timings.push((Date.now() - startTime));
                } else {
                    timings.push(-1);
                }
                if (i % 100 === 0) {
                    // console.log(JSON.stringify(timings));
                }
            });
            i += 1;
        }, 120);
    };

    return obj;
};

PureFunctions = function(lln) {

    var obj = {};

/*
    // fixme: move to a suitable place
    function getCountryNumFromIp() {
        util.log('getCountryNumFromIp');
        $.get({url: "https://ipapi.co/json"}, function (result) {
            // These should be ok, but haven't checked carefully..
            // var CountryTranslate = {
            //     "Australia": "23",
            //     "Brazil": "29",
            //     "Canada": "33",
            //     "Czech Republic": "307",
            //     "France": "45",
            //     "Germany": "39",
            //     "Hong Kong": "331",
            //     "Hungary": "334",
            //     "India": "337",
            //     "Israel": "336",
            //     "Italy": "269",
            //     "Japan": "267",
            //     "Lithuania": "357",
            //     "Netherlands": "67",
            //     "Poland": "392",
            //     "Russia": "402",
            //     "Singapore": "408",
            //     "Slovakia": "412",
            //     "Spain": "270",
            //     "Sweeden": "73",
            //     "Thailand": "425",
            //     "United Kingdom": "46",
            //     "United States": "78"
            // };

            var countryName = result.country_name;
            // var countryNum = 'other';
            // if (CountryTranslate.hasOwnProperty(countryName)) {
            //     util.log("NOTE: User is apparently in the list of supported countries. ");
            //     util.log(countryName);
            //     // countryNum = CountryTranslate[countryName];
            // } else {
            //     util.log("NOTE: User is NOT in the list of supported countries. ");
            //     util.log(countryName);
            //     // Do something sensible.
            // }

            // $('.lln-options').attr('data-countryNumFromIp', countryNum);
            var lang = (result.languages || '').split(',');
            // fixme: this must be broken now:
            if (lang.length && $('#destLanguage option[value="' + lang[0] +'"]').length) {
                    $('#destLanguage').val(lang[0]);
            }

            // util.log('getCountryNumFromIp', countryName, countryNum, lang[0]);
        });
    }
*/

    // speak word
    // chrome bugfix
    setTimeout(function(){window.speechSynthesis.getVoices();}, 5000);

    obj.speak = function (text, lang) {

        checkTypes(arguments, "string,string");

        $('#llnPlayWord source').attr('src',
            `https://us-central1-nlle-b0128.cloudfunctions.net/getWordTTS?` +
            `langCode_G=${encodeURIComponent(lang)}&text=${encodeURIComponent(text)}&f=${(text.length % 4)}`
        );

        try {
            $('#llnPlayWord').get(0).load();
            $('#llnPlayWord').get(0).play();
        }
        catch (error) {}
    };

    // Returns a valid internal use language code, or else false if
    // there is no valid mapping.
    // Internal use language codes are google language codes
    obj.cleanLangCode = function(langCode) {

        checkTypes(arguments, "string|false");

        // util.log("Value passed " + langCode);

        if(langCode === false) {
            return false;
        }

        // lower case it

        langCode = langCode.toLowerCase().trim();

        // map language codes to Google translate codes
    
        // Second part of these codes needs to be capitalised.
        if(langCode === "zh-cn") { return "zh-CN"}
        if(langCode === "zh-tw") { return "zh-TW"}

        // Netflix Dari code to Farsi.. won't work very well.
        if(langCode === "fa-af") { return "fa"}

        // Try the irregular netflix to google translate mappings
        if(langCode in obj.netflixToGoogleLangCodes) {
            return obj.netflixToGoogleLangCodes[langCode];
        }

        // For other codes with a '-' and a country, like browser codes 'en-US', take the first part.
        langCode = langCode.split("-")[0];

        if(langCode in obj.googleCodeToLanguageName) {
            // Already valid
            return langCode;
        }

        // maybe it was a three letter code, convert to two letter code
        if(langCode in obj.threeToTwoLangCodeMap) {
            if(obj.threeToTwoLangCodeMap[langCode] in obj.googleCodeToLanguageName) {
                return obj.threeToTwoLangCodeMap[langCode];
            }
        }

        // maybe it was another code we discovered
        if(langCode in obj.customLangCodeMap) {
            // Yeah
            return obj.customLangCodeMap[langCode];
        }

        // Couldn't find any suitable mapping

        return false;
    }

    obj.customLangCodeMap = {
        // Add some stuff here
    };

    obj.isRTL = function (langCode) {

        checkTypes(arguments, "string");

        return (langCode == 'he' || langCode == 'iw' || langCode == 'ar' || langCode == 'fa');
    };

    // This is MAP from ISO 639-2/B to ISO 639-1 as described in the standard
    // http://www.loc.gov/standards/iso639-2/php/code_list.php
    obj.threeToTwoLangCodeMap = {
        "aar": "aa",
        "abk": "ab",
        "afr": "af",
        "aka": "ak",
        "alb": "sq",
        "amh": "am",
        "ara": "ar",
        "arg": "an",
        "arm": "hy",
        "asm": "as",
        "ava": "av",
        "ave": "ae",
        "aym": "ay",
        "aze": "az",
        "bak": "ba",
        "bam": "bm",
        "baq": "eu",
        "bel": "be",
        "ben": "bn",
        "bih": "bh",
        "bis": "bi",
        "bos": "bs",
        "bre": "br",
        "bul": "bg",
        "bur": "my",
        "cat": "ca",
        "cha": "ch",
        "che": "ce",
        "chi": "zh",
        "chu": "cu",
        "chv": "cv",
        "cor": "kw",
        "cos": "co",
        "cre": "cr",
        "cze": "cs",
        "dan": "da",
        "div": "dv",
        "dut": "nl",
        "dzo": "dz",
        "eng": "en",
        "epo": "eo",
        "est": "et",
        "ewe": "ee",
        "fao": "fo",
        "fij": "fj",
        "fin": "fi",
        "fre": "fr",
        "fry": "fy",
        "ful": "ff",
        "geo": "ka",
        "ger": "de",
        "gla": "gd",
        "gle": "ga",
        "glg": "gl",
        "glv": "gv",
        "gre": "el",
        "grn": "gn",
        "guj": "gu",
        "hat": "ht",
        "hau": "ha",
        "heb": "iw",
        "her": "hz",
        "hin": "hi",
        "hmo": "ho",
        "hrv": "hr",
        "hun": "hu",
        "ibo": "ig",
        "ice": "is",
        "ido": "io",
        "iii": "ii",
        "iku": "iu",
        "ile": "ie",
        "ina": "ia",
        "ind": "id",
        "ipk": "ik",
        "ita": "it",
        "jav": "jv",
        "jpn": "ja",
        "kal": "kl",
        "kan": "kn",
        "kas": "ks",
        "kau": "kr",
        "kaz": "kk",
        "khm": "km",
        "kik": "ki",
        "kin": "rw",
        "kir": "ky",
        "kom": "kv",
        "kon": "kg",
        "kor": "ko",
        "kua": "kj",
        "kur": "ku",
        "lao": "lo",
        "lat": "la",
        "lav": "lv",
        "lim": "li",
        "lin": "ln",
        "lit": "lt",
        "ltz": "lb",
        "lub": "lu",
        "lug": "lg",
        "mac": "mk",
        "mah": "mh",
        "mal": "ml",
        "mao": "mi",
        "mar": "mr",
        "may": "ms",
        "mlg": "mg",
        "mlt": "mt",
        "mon": "mn",
        "nau": "na",
        "nav": "nv",
        "nbl": "nr",
        "nde": "nd",
        "ndo": "ng",
        "nep": "ne",
        "nno": "nn",
        "nob": "nb",
        "nor": "no",
        "nya": "ny",
        "oci": "oc",
        "oji": "oj",
        "ori": "or",
        "orm": "om",
        "oss": "os",
        "pan": "pa",
        "per": "fa",
        "pli": "pi",
        "pol": "pl",
        "por": "pt",
        "pus": "ps",
        "que": "qu",
        "roh": "rm",
        "rum": "ro",
        "run": "rn",
        "rus": "ru",
        "sag": "sg",
        "san": "sa",
        "sin": "si",
        "slo": "sk",
        "slv": "sl",
        "sme": "se",
        "smo": "sm",
        "sna": "sn",
        "snd": "sd",
        "som": "so",
        "sot": "st",
        "spa": "es",
        "srd": "sc",
        "srp": "sr",
        "ssw": "ss",
        "sun": "su",
        "swa": "sw",
        "swe": "sv",
        "tah": "ty",
        "tam": "ta",
        "tat": "tt",
        "tel": "te",
        "tgk": "tg",
        "tgl": "tl",
        "tha": "th",
        "tib": "bo",
        "tir": "ti",
        "ton": "to",
        "tsn": "tn",
        "tso": "ts",
        "tuk": "tk",
        "tur": "tr",
        "twi": "tw",
        "uig": "ug",
        "ukr": "uk",
        "urd": "ur",
        "uzb": "uz",
        "ven": "ve",
        "vie": "vi",
        "vol": "vo",
        "wel": "cy",
        "wln": "wa",
        "wol": "wo",
        "xho": "xh",
        "yid": "yi",
        "yor": "yo",
        "zha": "za",
        "zul": "zu"
    };

    obj.googleLangs =
    {
        "Afrikaans": "af",
        "Albanian": "sq",
        "Amharic": "am",
        "Arabic": "ar",
        "Armenian": "hy",
        "Azeerbaijani": "az",
        "Basque": "eu",
        "Belarusian": "be",
        "Bengali": "bn",
        "Bosnian": "bs",
        "Bulgarian": "bg",
        "Catalan": "ca",
        "Cebuano": "ceb", //  (ISO-639-2)
        "Chinese (Simplified)": "zh-cn", //  (BCP-47)
        "Chinese (Traditional)": "zh-tw", //  (BCP-47)
        "Corsican": "co",
        "Croatian": "hr",
        "Czech": "cs",
        "Danish": "da",
        "Dutch": "nl",
        "English": "en",
        "Esperanto": "eo",
        "Estonian": "et",
        "Finnish": "fi",
        "French": "fr",
        "Frisian": "fy",
        "Galician": "gl",
        "Georgian": "ka",
        "German": "de",
        "Greek": "el",
        "Gujarati": "gu",
        "Haitian Creole": "ht",
        "Hausa": "ha",
        "Hawaiian": "haw", //  (ISO-639-2)
        "Hebrew": "iw",
        "Hindi": "hi",
        "Hmong": "hmn", // (ISO-639-2)
        "Hungarian": "hu",
        "Icelandic": "is",
        "Igbo": "ig",
        "Indonesian": "id",
        "Irish": "ga",
        "Italian": "it",
        "Japanese": "ja",
        "Javanese": "jw",
        "Kannada": "kn",
        "Kazakh": "kk",
        "Khmer": "km",
        "Korean": "ko",
        "Kurdish": "ku",
        "Kyrgyz": "ky",
        "Lao": "lo",
        "Latin": "la",
        "Latvian": "lv",
        "Lithuanian": "lt",
        "Luxembourgish": "lb",
        "Macedonian": "mk",
        "Malagasy": "mg",
        "Malay": "ms",
        "Malayalam": "ml",
        "Maltese": "mt",
        "Maori": "mi",
        "Marathi": "mr",
        "Mongolian": "mn",
        "Myanmar (Burmese)": "my",
        "Nepali": "ne",
        "Norwegian": "no",
        "Nyanja (Chichewa)": "ny",
        "Pashto": "ps",
        "Persian": "fa",
        "Polish": "pl",
        "Portuguese (Portugal, Brazil)": "pt",
        "Punjabi": "pa",
        "Romanian": "ro",
        "Russian": "ru",
        "Samoan": "sm",
        "Scots Gaelic": "gd",
        "Serbian": "sr",
        "Sesotho": "st",
        "Shona": "sn",
        "Sindhi": "sd",
        "Sinhala (Sinhalese)": "si",
        "Slovak": "sk",
        "Slovenian": "sl",
        "Somali": "so",
        "Spanish": "es",
        "Sundanese": "su",
        "Swahili": "sw",
        "Swedish": "sv",
        "Tagalog (Filipino)": "tl",
        "Tajik": "tg",
        "Tamil": "ta",
        "Telugu": "te",
        "Thai": "th",
        "Turkish": "tr",
        "Ukrainian": "uk",
        "Urdu": "ur",
        "Uzbek": "uz",
        "Vietnamese": "vi",
        "Welsh": "cy",
        "Xhosa": "xh",
        "Yiddish": "yi",
        "Yoruba": "yo",
        "Zulu": "zu"
    };

    // todo: add rare language native names too
    obj.googleCodeToLanguageName =
    {
        "af": "Afrikaans",
        "sq": "Albanian",
        "am": "Amharic",
        "ar": "العربية (Arabic)",
        "hy": "Armenian",
        "az": "Azeerbaijani",
        "eu": "Basque",
        "be": "Belarusian",
        "bn": "বাংলা (Bengali)",
        "bs": "bosanski (Bosnian)",
        "bg": "български (Bulgarian)",
        "ca": "català (Catalan)",
        "ceb": "Cebuano",
        "zh-CN": "中文 普通话 (Chinese Simplified)",
        "zh-TW": "中文 国语 (Chinese Traditional)",
        "co": "Corsican",
        "hr": "Hrvatski (Croatian)",
        "cs": "čeština (Czech)",
        "da": "dansk (Danish)",
        "nl": "Nederlands (Dutch)",
        "en": "English",
        "eo": "Esperanto",
        "et": "eesti keel (Estonian)",
        "fi": "suomi (Finnish)",
        "fr": "français (French)",
        "fy": "Frisian",
        "gl": "Galician",
        "ka": "Georgian",
        "de": "Deutsch (German)",
        "el": "ελληνικά (Greek)",
        "gu": "Gujarati",
        "ht": "Kreyòl ayisyen (Haitian Creole)",
        "ha": "Hausa",
        "haw": "Hawaiian",
        "iw": "עברית (Hebrew)",
        "hi": "हिन्दी (Hindi)",
        "hmn": "Hmong",
        "hu": "magyar (Hungarian)",
        "is": "Íslenska (Icelandic)",
        "ig": "Igbo",
        "id": "Bahasa (Indonesian)",
        "ga": "Irish",
        "it": "italiano (Italian)",
        "ja": "日本語 (Japanese)",
        "jw": "Javanese",
        "kn": "Kannada",
        "kk": "Kazakh",
        "km": "Khmer",
        "ko": "한국어 (Korean)",
        "ku": "Kurdish",
        "ky": "Kyrgyz",
        "lo": "Lao",
        "la": "Latin",
        "lv": "latviešu valoda (Latvian)",
        "lt": "lietuvių kalba (Lithuanian)",
        "lb": "Luxembourgish",
        "mk": "Macedonian",
        "mg": "Fiteny Malagasy (Malagasy)",
        "ms": "Bahasa melayu (Malay)",
        "ml": "Malayalam",
        "mt": "Malti (Maltese)",
        "mi": "Maori",
        "mr": "Marathi",
        "mn": "Mongolian",
        "my": "Myanmar (Burmese)",
        "ne": "Nepali",
        "no": "Norsk (Norwegian)",
        "ny": "Nyanja (Chichewa)",
        "ps": "Pashto",
        "fa": "فارسى (Persian)",
        "pl": "polski (Polish)",
        "pt": "português (Portuguese)",
        "pa": "Punjabi",
        "ro": "limba română (Romanian)",
        "ru": "Русский (Russian)",
        "sm": "Samoan",
        "gd": "Scots Gaelic",
        "sr": "српски (Serbian)",
        "st": "Sesotho",
        "sn": "Shona",
        "sd": "Sindhi",
        "si": "Sinhala (Sinhalese)",
        "sk": "slovenčina (Slovak)",
        "sl": "slovenščina (Slovenian)",
        "so": "Somali",
        "es": "español (Spanish)",
        "su": "Sundanese",
        "sw": "Kiswahili (Swahili)",
        "sv": "Svenska (Swedish)",
        "tl": "Tagalog (Filipino)",
        "tg": "Tajik",
        "ta": "தமிழ் (Tamil)",
        "te": "తెలుగు (Telugu)",
        "th": "ภาษาไทย (Thai)",
        "tr": "Türkçe (Turkish)",
        "uk": "Українська (Ukrainian)",
        "ur": "اردو (Urdu)",
        "uz": "Uzbek",
        "vi": "tiếng việt (Vietnamese)",
        "cy": "Cymraeg (Welsh)",
        "xh": "Xhosa",
        "yi": "Yiddish",
        "yo": "Yoruba",
        "zu": "Zulu"
    };

    obj.bingCodes =
        {
        "af":"Afrikaans",
        "ar":"Arabic",
        "bn-BD":"Bangla",
        "bs-Latn":"Bosnian (Latin)",
        "bg":"Bulgarian",
        "yue":"Cantonese (Traditional)",
        "ca":"Catalan",
        "zh-CHS":"Chinese (Simplified)",
        "zh-CHT":"Chinese (Traditional)",
        "hr":"Croatian",
        "cs":"Czech",
        "da":"Danish",
        "nl":"Dutch",
        "en":"English",
        "et":"Estonian",
        "fj":"Fijian",
        "fil":"Filipino",
        "fi":"Finnish",
        "fr":"French",
        "de":"German",
        "el":"Greek",
        "ht":"Haitian Creole",
        "he":"Hebrew",
        "hi":"Hindi",
        "mww":"Hmong Daw",
        "hu":"Hungarian",
        "is":"Icelandic",
        "id":"Indonesian",
        "it":"Italian",
        "ja":"Japanese",
        "sw":"Kiswahili",
        "tlh":"Klingon",
        "tlh-Qaak":"Klingon (plqaD)",
        "ko":"Korean",
        "lv":"Latvian",
        "lt":"Lithuanian",
        "mg":"Malagasy",
        "ms":"Malay (Latin)",
        "mt":"Maltese",
        "no":"Norwegian Bokmål",
        "fa":"Persian",
        "pl":"Polish",
        "pt":"Portuguese",
        "otq":"Querétaro Otomi",
        "ro":"Romanian",
        "ru":"Russian",
        "sm":"Samoan",
        "sr-Cyrl":"Serbian (Cyrillic)",
        "sr-Latn":"Serbian (Latin)",
        "sk":"Slovak",
        "sl":"Slovenian",
        "es":"Spanish",
        "sv":"Swedish",
        "ty":"Tahitian",
        "ta":"Tamil",
        "te":"Telugu",
        "th":"Thai",
        "to":"Tongan",
        "tr":"Turkish",
        "uk":"Ukrainian",
        "ur":"Urdu",
        "vi":"Vietnamese",
        "cy":"Welsh",
        "yua":"Yucatec Maya"
    };

    obj.gtranslateBingMapping =
        {
        "bs":"bs-Latn",
        "zh-CN":"zh-CHS",
        "zh-TW":"zh-CHT",
        "iw":"he",
        "hmn":"mww",
        "sr":"sr-Latn"
    };

    // NOTE: lower cased some google langauge codes
    // I guess google translate doesn't mind

    obj.netflixToGoogleLangCodes =
    {
        "he": "iw", // "he" doens't actually work for google translate..
        "ach": false,// Acoli
        "ar-eg": "ar",
        "ar-lb": "ar",
        "ar-sy": "ar",
        "ar-ps": "ar",
        "arc": false, // Aramaic: Semitic language now spoken by smaller numbers of people in scattered locations.
        "bm": false, // Bambara
        "ba": false, // Bashkir
        "qaa": false, // Bulbovian
        "ce": false, // Chechen
        "chy": false, // Cheyenne
        "zh": "zh-CN", // Chinese (Mandarin) for spoken content // fixme, could be an issue
        "yue": false, // Chinese (Cantonese) for spoken content
        "zh-hans": "zh-CN", // Chinese (Simplified) for written text
        "zh-hant": "zh-TW", // Chinese (Traditional) for written text
        "fa-af": "fa", // Dari
        "din": false, // Dinka
        "dz": false, // Dzongkha
        "efi": false, // Efik
        "elx": false, // Elamite
        "en-gb": "en",
        "fo": "da", // Mapping to Danish
        "fil": "tl",
        "nl-be": "nl",
        "fr-ca": "fr",
        "nan": false, // Hokkien
        "iu": false, // Inuktitut
        "jam": false, // Jamaican Patois
        "jv": "jw", // Javanese
        "khm": "km", // Khmer
        "ki": false, // Kikuyu
        "rw": false, // Kinyarwanda
        "laj": false, // Lango
        "ln": false, // Lingala
        "mas": false, // Maasai
        "poz": false, // Malayo-Polynesian
        "myn": false, // Maya
        "men": false, // Mende
        "new": false, // Newari
        "zxx": false, // None -- interesting.
        "nn": "no",
        "nb": "no",
        "pt-br": "pt",
        "rm": false, // Romansh
        "rom": false, // Romany
        "smi": false, // Sami
        "sa": false, // Sanskrit
        "sr-cyrl": "sr",
        "sr-latn": "sr",
        "son": false, // Songhai
        "es-es": "es",
        "gsw": "de", // Mapping Swiss-German to German
        "tmh": false, // Tamashek
        "bo": false, // Tibetan
        "to": false, // Tonga
        "tyv": false, // Tuvan
        "uga": false, // Ugaritic
        "wo": false, // Wolof
        "zap": false // Zapotec
    };

    // fixme: these should match up with the ones in the catalogue, currently they don't
    //obj.twoDigitCodesToNames = {"AF":"Afghanistan","AX":"Åland Islands","AL":"Albania","DZ":"Algeria","AS":"American Samoa","AD":"Andorra","AO":"Angola","AI":"Anguilla","AQ":"Antarctica","AG":"Antigua and Barbuda","AR":"Argentina","AM":"Armenia","AW":"Aruba","AU":"Australia","AT":"Austria","AZ":"Azerbaijan","BS":"Bahamas","BH":"Bahrain","BD":"Bangladesh","BB":"Barbados","BY":"Belarus","BE":"Belgium","BZ":"Belize","BJ":"Benin","BM":"Bermuda","BT":"Bhutan","BO":"Bolivia, Plurinational State of","BQ":"Bonaire, Sint Eustatius and Saba","BA":"Bosnia and Herzegovina","BW":"Botswana","BV":"Bouvet Island","BR":"Brazil","IO":"British Indian Ocean Territory","BN":"Brunei Darussalam","BG":"Bulgaria","BF":"Burkina Faso","BI":"Burundi","KH":"Cambodia","CM":"Cameroon","CA":"Canada","CV":"Cape Verde","KY":"Cayman Islands","CF":"Central African Republic","TD":"Chad","CL":"Chile","CN":"China","CX":"Christmas Island","CC":"Cocos (Keeling) Islands","CO":"Colombia","KM":"Comoros","CG":"Congo","CD":"Congo, the Democratic Republic of the","CK":"Cook Islands","CR":"Costa Rica","CI":"Côte d'Ivoire","HR":"Croatia","CU":"Cuba","CW":"Curaçao","CY":"Cyprus","CZ":"Czech Republic","DK":"Denmark","DJ":"Djibouti","DM":"Dominica","DO":"Dominican Republic","EC":"Ecuador","EG":"Egypt","SV":"El Salvador","GQ":"Equatorial Guinea","ER":"Eritrea","EE":"Estonia","ET":"Ethiopia","FK":"Falkland Islands (Malvinas)","FO":"Faroe Islands","FJ":"Fiji","FI":"Finland","FR":"France","GF":"French Guiana","PF":"French Polynesia","TF":"French Southern Territories","GA":"Gabon","GM":"Gambia","GE":"Georgia","DE":"Germany","GH":"Ghana","GI":"Gibraltar","GR":"Greece","GL":"Greenland","GD":"Grenada","GP":"Guadeloupe","GU":"Guam","GT":"Guatemala","GG":"Guernsey","GN":"Guinea","GW":"Guinea-Bissau","GY":"Guyana","HT":"Haiti","HM":"Heard Island and McDonald Islands","VA":"Holy See (Vatican City State)","HN":"Honduras","HK":"Hong Kong","HU":"Hungary","IS":"Iceland","IN":"India","ID":"Indonesia","IR":"Iran, Islamic Republic of","IQ":"Iraq","IE":"Ireland","IM":"Isle of Man","IL":"Israel","IT":"Italy","JM":"Jamaica","JP":"Japan","JE":"Jersey","JO":"Jordan","KZ":"Kazakhstan","KE":"Kenya","KI":"Kiribati","KP":"Korea, Democratic People's Republic of","KR":"Korea, Republic of","KW":"Kuwait","KG":"Kyrgyzstan","LA":"Lao People's Democratic Republic","LV":"Latvia","LB":"Lebanon","LS":"Lesotho","LR":"Liberia","LY":"Libya","LI":"Liechtenstein","LT":"Lithuania","LU":"Luxembourg","MO":"Macao","MK":"Macedonia, the Former Yugoslav Republic of","MG":"Madagascar","MW":"Malawi","MY":"Malaysia","MV":"Maldives","ML":"Mali","MT":"Malta","MH":"Marshall Islands","MQ":"Martinique","MR":"Mauritania","MU":"Mauritius","YT":"Mayotte","MX":"Mexico","FM":"Micronesia, Federated States of","MD":"Moldova, Republic of","MC":"Monaco","MN":"Mongolia","ME":"Montenegro","MS":"Montserrat","MA":"Morocco","MZ":"Mozambique","MM":"Myanmar","NA":"Namibia","NR":"Nauru","NP":"Nepal","NL":"Netherlands","NC":"New Caledonia","NZ":"New Zealand","NI":"Nicaragua","NE":"Niger","NG":"Nigeria","NU":"Niue","NF":"Norfolk Island","MP":"Northern Mariana Islands","NO":"Norway","OM":"Oman","PK":"Pakistan","PW":"Palau","PS":"Palestine, State of","PA":"Panama","PG":"Papua New Guinea","PY":"Paraguay","PE":"Peru","PH":"Philippines","PN":"Pitcairn","PL":"Poland","PT":"Portugal","PR":"Puerto Rico","QA":"Qatar","RE":"Réunion","RO":"Romania","RU":"Russian Federation","RW":"Rwanda","BL":"Saint Barthélemy","SH":"Saint Helena, Ascension and Tristan da Cunha","KN":"Saint Kitts and Nevis","LC":"Saint Lucia","MF":"Saint Martin (French part)","PM":"Saint Pierre and Miquelon","VC":"Saint Vincent and the Grenadines","WS":"Samoa","SM":"San Marino","ST":"Sao Tome and Principe","SA":"Saudi Arabia","SN":"Senegal","RS":"Serbia","SC":"Seychelles","SL":"Sierra Leone","SG":"Singapore","SX":"Sint Maarten (Dutch part)","SK":"Slovakia","SI":"Slovenia","SB":"Solomon Islands","SO":"Somalia","ZA":"South Africa","GS":"South Georgia and the South Sandwich Islands","SS":"South Sudan","ES":"Spain","LK":"Sri Lanka","SD":"Sudan","SR":"Suriname","SJ":"Svalbard and Jan Mayen","SZ":"Swaziland","SE":"Sweden","CH":"Switzerland","SY":"Syrian Arab Republic","TW":"Taiwan, Province of China","TJ":"Tajikistan","TZ":"Tanzania, United Republic of","TH":"Thailand","TL":"Timor-Leste","TG":"Togo","TK":"Tokelau","TO":"Tonga","TT":"Trinidad and Tobago","TN":"Tunisia","TR":"Turkey","TM":"Turkmenistan","TC":"Turks and Caicos Islands","TV":"Tuvalu","UG":"Uganda","UA":"Ukraine","AE":"United Arab Emirates","GB":"United Kingdom","US":"United States","UM":"United States Minor Outlying Islands","UY":"Uruguay","UZ":"Uzbekistan","VU":"Vanuatu","VE":"Venezuela, Bolivarian Republic of","VN":"Viet Nam","VG":"Virgin Islands, British","VI":"Virgin Islands, U.S.","WF":"Wallis and Futuna","EH":"Western Sahara","YE":"Yemen","ZM":"Zambia","ZW":"Zimbabwe"};

    // edited list to match catalogue:
    obj.twoDigitCodesToNames = {"AF":"Afghanistan","AX":"Åland Islands","AL":"Albania","DZ":"Algeria","AS":"American Samoa","AD":"Andorra","AO":"Angola","AI":"Anguilla","AQ":"Antarctica","AG":"Antigua and Barbuda","AR":"Argentina","AM":"Armenia","AW":"Aruba","AU":"Australia","AT":"Austria","AZ":"Azerbaijan","BS":"Bahamas","BH":"Bahrain","BD":"Bangladesh","BB":"Barbados","BY":"Belarus","BE":"Belgium","BZ":"Belize","BJ":"Benin","BM":"Bermuda","BT":"Bhutan","BO":"Bolivia, Plurinational State of","BQ":"Bonaire, Sint Eustatius and Saba","BA":"Bosnia and Herzegovina","BW":"Botswana","BV":"Bouvet Island","BR":"Brazil","IO":"British Indian Ocean Territory","BN":"Brunei Darussalam","BG":"Bulgaria","BF":"Burkina Faso","BI":"Burundi","KH":"Cambodia","CM":"Cameroon","CA":"Canada","CV":"Cabo Verde","KY":"Cayman Islands","CF":"Central African Republic","TD":"Chad","CL":"Chile","CN":"China","CX":"Christmas Island","CC":"Cocos (Keeling) Islands","CO":"Colombia","KM":"Comoros","CG":"Congo","CD":"Congo, the Democratic Republic of the","CK":"Cook Islands","CR":"Costa Rica","CI":"Cote dIvoire","HR":"Croatia","CU":"Cuba","CW":"Curaçao","CY":"Cyprus","CZ":"Czech Republic","DK":"Denmark","DJ":"Djibouti","DM":"Dominica","DO":"Dominican Republic","EC":"Ecuador","EG":"Egypt","SV":"El Salvador","GQ":"Equatorial Guinea","ER":"Eritrea","EE":"Estonia","ET":"Ethiopia","FK":"Falkland Islands (Malvinas)","FO":"Faroe Islands","FJ":"Fiji","FI":"Finland","FR":"France","GF":"French Guiana","PF":"French Polynesia","TF":"French Southern Territories","GA":"Gabon","GM":"Gambia","GE":"Georgia","DE":"Germany","GH":"Ghana","GI":"Gibraltar","GR":"Greece","GL":"Greenland","GD":"Grenada","GP":"Guadeloupe","GU":"Guam","GT":"Guatemala","GG":"Guernsey","GN":"Guinea","GW":"Guinea-Bissau","GY":"Guyana","HT":"Haiti","HM":"Heard Island and McDonald Islands","VA":"Holy See (Vatican City State)","HN":"Honduras","HK":"Hong Kong","HU":"Hungary","IS":"Iceland","IN":"India","ID":"Indonesia","IR":"Iran, Islamic Republic of","IQ":"Iraq","IE":"Ireland","IM":"Isle of Man","IL":"Israel","IT":"Italy","JM":"Jamaica","JP":"Japan","JE":"Jersey","JO":"Jordan","KZ":"Kazakhstan","KE":"Kenya","KI":"Kiribati","KP":"Korea, Democratic People's Republic of","KR":"South Korea","KW":"Kuwait","KG":"Kyrgyzstan","LA":"Lao Peoples Democratic Republic","LV":"Latvia","LB":"Lebanon","LS":"Lesotho","LR":"Liberia","LY":"Libya","LI":"Liechtenstein","LT":"Lithuania","LU":"Luxembourg","MO":"Macao","MK":"Macedonia","MG":"Madagascar","MW":"Malawi","MY":"Malaysia","MV":"Maldives","ML":"Mali","MT":"Malta","MH":"Marshall Islands","MQ":"Martinique","MR":"Mauritania","MU":"Mauritius","YT":"Mayotte","MX":"Mexico","FM":"Micronesia","MD":"Moldova, Republic of","MC":"Monaco","MN":"Mongolia","ME":"Montenegro","MS":"Montserrat","MA":"Morocco","MZ":"Mozambique","MM":"Myanmar","NA":"Namibia","NR":"Nauru","NP":"Nepal","NL":"Netherlands","NC":"New Caledonia","NZ":"New Zealand","NI":"Nicaragua","NE":"Niger","NG":"Nigeria","NU":"Niue","NF":"Norfolk Island","MP":"Northern Mariana Islands","NO":"Norway","OM":"Oman","PK":"Pakistan","PW":"Palau","PS":"Palestine, State of","PA":"Panama","PG":"Papua New Guinea","PY":"Paraguay","PE":"Peru","PH":"Philippines","PN":"Pitcairn","PL":"Poland","PT":"Portugal","PR":"Puerto Rico","QA":"Qatar","RE":"Réunion","RO":"Romania","RU":"Russia","RW":"Rwanda","BL":"Saint Barthélemy","SH":"Saint Helena","KN":"Saint Kitts and Nevis","LC":"Saint Lucia","MF":"Saint Martin (French part)","PM":"Saint Pierre and Miquelon","VC":"Saint Vincent","WS":"Samoa","SM":"San Marino","ST":"Sao Tome and Principe","SA":"Saudi Arabia","SN":"Senegal","RS":"Serbia","SC":"Seychelles","SL":"Sierra Leone","SG":"Singapore","SX":"Sint Maarten (Dutch part)","SK":"Slovakia","SI":"Slovenia","SB":"Solomon Islands","SO":"Somalia","ZA":"South Africa","GS":"South Georgia and the South Sandwich Islands","SS":"South Sudan","ES":"Spain","LK":"Sri Lanka","SD":"Sudan","SR":"Suriname","SJ":"Svalbard and Jan Mayen","SZ":"Swaziland","SE":"Sweden","CH":"Switzerland","SY":"Syrian Arab Republic","TW":"Taiwan, Province of China","TJ":"Tajikistan","TZ":"Tanzania","TH":"Thailand","TL":"Timor-Leste","TG":"Togo","TK":"Tokelau","TO":"Tonga","TT":"Trinidad and Tobago","TN":"Tunisia","TR":"Turkey","TM":"Turkmenistan","TC":"Turks and Caicos Islands","TV":"Tuvalu","UG":"Uganda","UA":"Ukraine","AE":"United Arab Emirates","GB":"United Kingdom","US":"United States","UM":"United States Minor Outlying Islands","UY":"Uruguay","UZ":"Uzbekistan","VU":"Vanuatu","VE":"Venezuela, Bolivarian Republic of","VN":"Viet Nam","VG":"Virgin Islands, British","VI":"Virgin Islands, U.S.","WF":"Wallis and Futuna","EH":"Western Sahara","YE":"Yemen","ZM":"Zambia","ZW":"Zimbabwe"};

    // XOR stuff

    obj.x_en = function(key, data) {
        data = xor_encrypt(key, data);
        return b64_encode(data);
    };

    // encrypt decrypt
    // https://github.com/KyleBanks/XOREncryption/blob/master/JavaScript/XOREncryption.js
    obj.x = function (input) {
        var key = ['A', 'B', 'Q']; //Can be any chars, and any size array
        var output = [];
        
        for (var i = 0; i < input.length; i++) {
            var charCode = input.charCodeAt(i) ^ key[i % key.length].charCodeAt(0);
            output.push(String.fromCharCode(charCode));
        }
        return output.join("");
    }
    
    return obj

}

PureText = function(lln) {

    var obj = {};

/*

{
    512: { 
        begin: xxxx,
        end: xxxx,
        text: xxxx
    },
    512: { 
        begin: xxxx,
        end: xxxx,
        text: xxxx
    }
}

send source subs 
returns annotated source subs (tokenised text), machine translations

request translations( [index1, index2, index3] )
returns:
{
    512: xxxx,
    513: xyz
}

request 

annotatedSourceSubs: {
    512: { 
        begin: xxxx,
        end: xxxx,
        text: xxxx
        tokens: [ token1, token2, token3 ]
    },
    512: { 
        begin: xxxx,
        end: xxxx,
        text: xxxx
    }
}
mTranslations: {
    512: xxxx,
    513: xyz
}

already tokenized...

savedWords

renderHTML(index) {
    for word in sub:
        if: recommended words
        if: hard words (greyed out)
        if: saved words (green or red)

*/

    obj.stripWord = function(w) {

        checkTypes(arguments, "string");

        // This is a nasty lazy kludge
        // This handles the case when we want to stem words with appostrophies
        // Just break the word on the appostrophe, and return the longer part.
        var appostroIndex = w.indexOf("'");
        if (w.length && appostroIndex > -1) { // if appos
            var firstPart = w.slice(0, appostroIndex);
            var secondPart = w.slice(appostroIndex + 1);
            if (firstPart.length > secondPart.length) {
                return firstPart;
            }
            else {
                return secondPart;
            }
        } else {
            return w;
        }
    };

    obj.fixCaps = function(text) {

        checkTypes(arguments, "string");

        // If we encounter 2 consecutive uppercase letters, we return lower-case text
        // otherwise, we keep capitalization, for best translation.
        // Solves the problem of mostly-uppercase subtitles having bad translations, like:
        // "Mike: WELL, ASIDE FROM THE HEATED COMMENTS..."
        if (text == text.toUpperCase()) {
            return text.toLowerCase();
        } else {
            var utext = text.toUpperCase();
            var consecutiveUppercaseLetters = 0;
            for (var i = 0; i < text.length; i++) {
                if (text[i] === utext[i]) {
                    if (consecutiveUppercaseLetters > 4) {
                        return text.toLowerCase();
                    } else {
                        consecutiveUppercaseLetters++;
                    }
                } else {
                    consecutiveUppercaseLetters = 0;
                }
            }
            return text;
        }
    };

    // Found this guy in the UI module, seems unused..
    function notInBrackets(text) {

        checkTypes(arguments, "string");

        var txt = text.trim();
        if (txt[0] == '[' && txt[1] == ']' && txt.indexOf('[') == 1 && txt.indexOf(']') == 1) {
            return false;
        } else {
            return true;
        }
    }

    obj.stringifyToken = function(token) {
        return (token.text || '') + '🟃' +
            ((token.lemma !== token.text) ? (token.lemma || '') : '') + '🟃' +
            (token.posTag || '')  + '🟃' +
            ''  + '🟃' +
            (token.translit || '');
    };

    obj.parseToken = function(tokenAsText) {
        const tokenData = tokenAsText.split('🟃');
        let ret = {
            text: tokenData[0],
            isWord: tokenData[2] && tokenData[2] !== 'PUNCT',
            lemma: tokenData[1] || tokenData[0],
            posTag: tokenData[2] || ''
        };
        if (tokenData.length >= 5) {
            ret.translit = tokenData[4];
        }
        return ret;
    };

    // clean subtitle text
    // google langCode?
    // verticalView true : false
    // vocabSize - number
    // container: 'subs', 'vv', or 'saved_items'
    obj.subToHtml = function(container, text, langCode_G, verticalView, vocabSize, isSaved, checkRelevant, savedWordKey, serverTokens) {

        // checkTypes(arguments, "string,string,boolean,number,boolean,boolean,string,string");

        // remove newlines
        let txt = text.replace(/(?:\r\n|\r|\n)/g, ' ');
        // split to tokens

        let tokens = [];
        if (serverTokens && serverTokens.length) {
            // returns {text: ..., isWord: ..., lemma: ..., posTag: ...}
            tokens = serverTokens.map(t => obj.parseToken(t));
        } else {
            // shouldn't happen
            tokens = [{text: text}];
            if (Math.random() > 0.95 && lln.subMan.subtitlesNLP.length) {
                util.fuck(`subToHtml: NLP token missing, but subtitlesNLP are not empty. len: ${lln.subMan.subtitlesNLP.length}, container: ${container}, langCode_G: ${langCode_G}, isSaved: ${isSaved}, movieId: ${lln.subMan.data.movieId}, tt: ${lln.subMan.data.textTrackType}, ttId: ${lln.subMan.data.activeTextTrackDownloadbleId}`);
            }
            // returns just {text: ..., isWord: ...}
            // tokens = lln.pureText.splitWords(text, langCode_G);
        }

        // returns [ { text: "dog", isWord: true }]
        var outputHTML = '';

        for (const [tokenIndex, token] of tokens.entries()) {
            if (token.isWord) {

                const text = lln.pureText.stripWord(token.text.toLowerCase()); // get the longer part if appostrophe

                // stem to see if it's relevant
                const wordLemma = (token.lemma || '').toLowerCase();
                let irrelevant = false;
                if (checkRelevant && !isRelevantWord(wordLemma, vocabSize)) {
                    irrelevant = true;
                }
                const key = `WORD|${wordLemma}|${langCode_G}`;
                let color = lln.savedItems.getWordColor(key);
                if (color !== 'C0') {
                    color = `data-color="${color}"`;
                } else {
                    color = '';
                }
                // add transliterations
                let translit = '';
                if (langCode_G === 'ja') {
                    if (lln.setMan.getTransliterations() === 'ORIG+ROMAJI') {
                        translit = `<span class="translit">${' ' + lln.pureText.toRomaji(token.translit)}</span>`;
                    } else if (lln.setMan.getTransliterations() === 'ORIG+HIRAGANA') {
                        const tl = lln.pureText.toHiragana(token.translit);
                        if (tl !== token.text) {
                            translit = `<span class="translit">${tl}</span>`;
                        }
                    }
                }
                const saved = (key === savedWordKey) ? 'saved' : '';
                const subEvents = 'onmousedown="event.stopPropagation();" ontouchstart="event.stopPropagation();"';
                // if relevant, don't add class irrelevant
                outputHTML += `<span data-token="${obj.stringifyToken(token)}" data-token-index="${tokenIndex}" data-word-key="${key}" ${color} class="lln-word ${irrelevant ? 'irrelevant' : ''} ${saved} ${translit ? 'with-translit' : ''}" ${lln.verticalView ? '' : subEvents}>${translit}${token.text}</span>`;
            }
            else {
                outputHTML += `${token.text}`;
            }
        }

        // Add RTL 'bookends'
        if (lln.pure.isRTL(langCode_G)) {
            outputHTML = `&rlm;${outputHTML}&rlm;`;
        }

        outputHTML += ` <span class="${container !== 'vv' ? 'lln-hover-tooltip top-left' : ''} lln-hover-tooltip-one-liner lln-star-sub-btn ${isSaved ? 'active' : ''}"> 
                            ${container === 'subs' ? `<span class="tt">${lln_i18n.saveSubtitle}</span>` : ''}
                            ${container === 'saved_items' ? `<span class="tt">${lln_i18n.removeSubtitle}</span>` : ''}
                        </span>`;

        return outputHTML;
    };

    // checks word frequency in frequency list
    //
    function isRelevantWord(wordLemma, vocabSize) {

        // removed stemmer
        return true;
/*
        let word = wordLemma || wordStem; // todo: check languages?

        if(vocabSize == -1) {
            // 'infinite' vocab size
            return true;
        }
        // Snowball or wordlist not loaded
        if(stem.wordlist === null) {
            return true;
        }

        if(!word) { return true; }
        // numbers are relevant:
        if(! isNaN(parseInt(word))) { return true; }
        return ((stem.wordlist || {}).hasOwnProperty(word) && stem.wordlist[word] < vocabSize);
*/
    }

    obj.toRomaji = function(str) {
        return wanakana.toRomaji(str);
    };

    obj.toHiragana = function(str) {
        return wanakana.toHiragana(str);
    };

    obj.getWordExamplesHtml = function(lemma, maxExamples) {
        let htmlArr = [];
        let numFound = 0;
        if (lln.subMan.subtitlesNLP) {
            let i = 0;
            for (let sub of lln.subMan.subtitlesNLP) {

                // We have enough examples
                if(numFound >= maxExamples) { break; }

                let tokens = sub.map(t=>obj.parseToken(t));
                let matchingTokens = tokens.filter(t => t.lemma.toLowerCase() === lemma.toLowerCase() || t.text.toLowerCase() === lemma.toLowerCase());
                if (matchingTokens.length) {
                    // we found usage example
                    numFound += 1;
                    for (let tok of matchingTokens) {
                        tok.match = true;
                    }
                    const example = tokens.map(t => t.match ? `<span style="text-decoration: underline; color: rgb(120, 171, 116);">${t.text}</span>` : t.text).join('');
                    const exampleHtml = `<div class="lln-word-example" data-sub-index="${i}">${example}</div>`;
                    if (!htmlArr.includes(exampleHtml)) {
                        htmlArr.push(exampleHtml);
                    }
                }
                i += 1;
            }
        }

        if (numFound > 1) {
            return `<div class="lln-word-examples">
                        <div class="lln-word-examples-title">
                            ${lln_i18n.usageExamples} (${numFound}): 
                        </div>
                        ${htmlArr.join('')}
                    </div>`;
        } else {
            return '';
        }

    }

    obj.findWordOccurrences = function(word, subTokens) {
        let found = [];
        let i = 0;
        for (sub of subTokens) {
            for (tokenStr of sub) {
                if (obj.parseToken(tokenStr).lemma === (word || '').toLowerCase()) {
                    found.push(sub);
                    continue;
                }
            }
            if (i > 20) { // find up to 20 subs
                break;
            }
        }
        return found;
    };

    return obj;

};

// wanakana japanese language analysis library (https://github.com/WaniKani/WanaKana)

!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.wanakana={})}(this,function(t){"use strict";var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function n(t,e){return t(e={exports:{}},e.exports),e.exports}var r=n(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),o=Object.freeze({default:r,__moduleExports:r}),i=n(function(t){var e=t.exports={version:"2.5.5"};"number"==typeof __e&&(__e=e)}),u=Object.freeze({default:i,__moduleExports:i,version:i.version}),a=function(t){return"object"==typeof t?null!==t:"function"==typeof t},c=Object.freeze({default:a,__moduleExports:a}),f=c&&a||c,s=function(t){if(!f(t))throw TypeError(t+" is not an object!");return t},l=Object.freeze({default:s,__moduleExports:s}),h=function(t){try{return!!t()}catch(t){return!0}},d=Object.freeze({default:h,__moduleExports:h}),v=d&&h||d,p=!v(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),y=Object.freeze({default:p,__moduleExports:p}),g=o&&r||o,_=g.document,m=f(_)&&f(_.createElement),b=function(t){return m?_.createElement(t):{}},E=Object.freeze({default:b,__moduleExports:b}),O=y&&p||y,j=E&&b||E,w=!O&&!v(function(){return 7!=Object.defineProperty(j("div"),"a",{get:function(){return 7}}).a}),x=Object.freeze({default:w,__moduleExports:w}),S=function(t,e){if(!f(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!f(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!f(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!f(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")},A=Object.freeze({default:S,__moduleExports:S}),M=l&&s||l,z=x&&w||x,N=A&&S||A,P=Object.defineProperty,k=O?Object.defineProperty:function(t,e,n){if(M(t),e=N(e,!0),M(n),z)try{return P(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t},L={f:k},F=Object.freeze({default:L,__moduleExports:L,f:k}),I=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},R=Object.freeze({default:I,__moduleExports:I}),T=F&&L||F,C=R&&I||R,W=O?function(t,e,n){return T.f(t,e,C(1,n))}:function(t,e,n){return t[e]=n,t},U=Object.freeze({default:W,__moduleExports:W}),K={}.hasOwnProperty,B=function(t,e){return K.call(t,e)},D=Object.freeze({default:B,__moduleExports:B}),V=0,G=Math.random(),J=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++V+G).toString(36))},H=Object.freeze({default:J,__moduleExports:J}),Y=U&&W||U,q=D&&B||D,X=H&&J||H,$=u&&i||u,Q=n(function(t){var e=X("src"),n=Function.toString,r=(""+n).split("toString");$.inspectSource=function(t){return n.call(t)},(t.exports=function(t,n,o,i){var u="function"==typeof o;u&&(q(o,"name")||Y(o,"name",n)),t[n]!==o&&(u&&(q(o,e)||Y(o,e,t[n]?""+t[n]:r.join(n+""))),t===g?t[n]=o:i?t[n]?t[n]=o:Y(t,n,o):(delete t[n],Y(t,n,o)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[e]||n.call(this)})}),Z=Object.freeze({default:Q,__moduleExports:Q}),tt=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t},et=Object.freeze({default:tt,__moduleExports:tt}),nt=et&&tt||et,rt=function(t,e,n){if(nt(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}},ot=Object.freeze({default:rt,__moduleExports:rt}),it=Z&&Q||Z,ut=ot&&rt||ot,at=function(t,e,n){var r,o,i,u,a=t&at.F,c=t&at.G,f=t&at.P,s=t&at.B,l=c?g:t&at.S?g[e]||(g[e]={}):(g[e]||{}).prototype,h=c?$:$[e]||($[e]={}),d=h.prototype||(h.prototype={});for(r in c&&(n=e),n)i=((o=!a&&l&&void 0!==l[r])?l:n)[r],u=s&&o?ut(i,g):f&&"function"==typeof i?ut(Function.call,i):i,l&&it(l,r,i,t&at.U),h[r]!=i&&Y(h,r,u),f&&d[r]!=i&&(d[r]=i)};g.core=$,at.F=1,at.G=2,at.S=4,at.P=8,at.B=16,at.W=32,at.U=64,at.R=128;for(var ct,ft=at,st=Object.freeze({default:ft,__moduleExports:ft}),lt=X("typed_array"),ht=X("view"),dt=!(!g.ArrayBuffer||!g.DataView),vt=dt,pt=0,yt="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");9>pt;)(ct=g[yt[pt++]])?(Y(ct.prototype,lt,!0),Y(ct.prototype,ht,!0)):vt=!1;var gt={ABV:dt,CONSTR:vt,TYPED:lt,VIEW:ht},_t=Object.freeze({default:gt,__moduleExports:gt,ABV:gt.ABV,CONSTR:gt.CONSTR,TYPED:gt.TYPED,VIEW:gt.VIEW}),mt=Object.freeze({default:!1,__moduleExports:!1}),bt=function(t,e,n){for(var r in e)it(t,r,e[r],n);return t},Et=Object.freeze({default:bt,__moduleExports:bt}),Ot=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t},jt=Object.freeze({default:Ot,__moduleExports:Ot}),wt=Math.ceil,xt=Math.floor,St=function(t){return isNaN(t=+t)?0:(t>0?xt:wt)(t)},At=Object.freeze({default:St,__moduleExports:St}),Mt=At&&St||At,zt=Math.min,Nt=function(t){return t>0?zt(Mt(t),9007199254740991):0},Pt=Object.freeze({default:Nt,__moduleExports:Nt}),kt=Pt&&Nt||Pt,Lt=function(t){if(void 0===t)return 0;var e=Mt(t),n=kt(e);if(e!==n)throw RangeError("Wrong length!");return n},Ft=Object.freeze({default:Lt,__moduleExports:Lt}),It={}.toString,Rt=function(t){return It.call(t).slice(8,-1)},Tt=Object.freeze({default:Rt,__moduleExports:Rt}),Ct=Tt&&Rt||Tt,Wt=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==Ct(t)?t.split(""):Object(t)},Ut=Object.freeze({default:Wt,__moduleExports:Wt}),Kt=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t},Bt=Object.freeze({default:Kt,__moduleExports:Kt}),Dt=Ut&&Wt||Ut,Vt=Bt&&Kt||Bt,Gt=function(t){return Dt(Vt(t))},Jt=Object.freeze({default:Gt,__moduleExports:Gt}),Ht=Math.max,Yt=Math.min,qt=function(t,e){return 0>(t=Mt(t))?Ht(t+e,0):Yt(t,e)},Xt=Object.freeze({default:qt,__moduleExports:qt}),$t=Jt&&Gt||Jt,Qt=Xt&&qt||Xt,Zt=function(t){return function(e,n,r){var o,i=$t(e),u=kt(i.length),a=Qt(r,u);if(t&&n!=n){for(;u>a;)if((o=i[a++])!=o)return!0}else for(;u>a;a++)if((t||a in i)&&i[a]===n)return t||a||0;return!t&&-1}},te=Object.freeze({default:Zt,__moduleExports:Zt}),ee=g["__core-js_shared__"]||(g["__core-js_shared__"]={}),ne=function(t){return ee[t]||(ee[t]={})},re=Object.freeze({default:ne,__moduleExports:ne}),oe=re&&ne||re,ie=oe("keys"),ue=function(t){return ie[t]||(ie[t]=X(t))},ae=Object.freeze({default:ue,__moduleExports:ue}),ce=te&&Zt||te,fe=ae&&ue||ae,se=ce(!1),le=fe("IE_PROTO"),he=function(t,e){var n,r=$t(t),o=0,i=[];for(n in r)n!=le&&q(r,n)&&i.push(n);for(;e.length>o;)q(r,n=e[o++])&&(~se(i,n)||i.push(n));return i},de=Object.freeze({default:he,__moduleExports:he}),ve="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),pe=Object.freeze({default:ve,__moduleExports:ve}),ye=de&&he||de,ge=pe&&ve||pe,_e=ge.concat("length","prototype"),me=Object.getOwnPropertyNames||function(t){return ye(t,_e)},be={f:me},Ee=Object.freeze({default:be,__moduleExports:be,f:me}),Oe=function(t){return Object(Vt(t))},je=Object.freeze({default:Oe,__moduleExports:Oe}),we=je&&Oe||je,xe=function(t){for(var e=we(this),n=kt(e.length),r=arguments.length,o=Qt(r>1?arguments[1]:void 0,n),i=r>2?arguments[2]:void 0,u=void 0===i?n:Qt(i,n);u>o;)e[o++]=t;return e},Se=Object.freeze({default:xe,__moduleExports:xe}),Ae=n(function(t){var e=oe("wks"),n=g.Symbol,r="function"==typeof n;(t.exports=function(t){return e[t]||(e[t]=r&&n[t]||(r?n:X)("Symbol."+t))}).store=e}),Me=Object.freeze({default:Ae,__moduleExports:Ae}),ze=Me&&Ae||Me,Ne=T.f,Pe=ze("toStringTag"),ke=function(t,e,n){t&&!q(t=n?t:t.prototype,Pe)&&Ne(t,Pe,{configurable:!0,value:e})},Le=Object.freeze({default:ke,__moduleExports:ke}),Fe=mt,Ie=_t&&gt||_t,Re=Et&&bt||Et,Te=jt&&Ot||jt,Ce=Ft&&Lt||Ft,We=Ee&&be||Ee,Ue=Se&&xe||Se,Ke=Le&&ke||Le,Be=n(function(t,e){var n=We.f,r=T.f,o="prototype",i="Wrong index!",u=g.ArrayBuffer,a=g.DataView,c=g.Math,f=g.RangeError,s=g.Infinity,l=u,h=c.abs,d=c.pow,p=c.floor,y=c.log,_=c.LN2,m=O?"_b":"buffer",b=O?"_l":"byteLength",E=O?"_o":"byteOffset";function j(t,e,n){var r,o,i,u=Array(n),a=8*n-e-1,c=(1<<a)-1,f=c>>1,l=23===e?d(2,-24)-d(2,-77):0,v=0,g=0>t||0===t&&0>1/t?1:0;for((t=h(t))!=t||t===s?(o=t!=t?1:0,r=c):(r=p(y(t)/_),1>t*(i=d(2,-r))&&(r--,i*=2),2>(t+=1>r+f?l*d(2,1-f):l/i)*i||(r++,i/=2),c>r+f?1>r+f?(o=t*d(2,f-1)*d(2,e),r=0):(o=(t*i-1)*d(2,e),r+=f):(o=0,r=c));e>=8;u[v++]=255&o,o/=256,e-=8);for(r=r<<e|o,a+=e;a>0;u[v++]=255&r,r/=256,a-=8);return u[--v]|=128*g,u}function w(t,e,n){var r,o=8*n-e-1,i=(1<<o)-1,u=i>>1,a=o-7,c=n-1,f=t[c--],l=127&f;for(f>>=7;a>0;l=256*l+t[c],c--,a-=8);for(r=l&(1<<-a)-1,l>>=-a,a+=e;a>0;r=256*r+t[c],c--,a-=8);if(0===l)l=1-u;else{if(l===i)return r?NaN:f?-s:s;r+=d(2,e),l-=u}return(f?-1:1)*r*d(2,l-e)}function x(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function S(t){return[255&t]}function A(t){return[255&t,t>>8&255]}function M(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function z(t){return j(t,52,8)}function N(t){return j(t,23,4)}function P(t,e,n){r(t[o],e,{get:function(){return this[n]}})}function k(t,e,n,r){var o=Ce(+n);if(o+e>t[b])throw f(i);var u=o+t[E],a=t[m]._b.slice(u,u+e);return r?a:a.reverse()}function L(t,e,n,r,o,u){var a=Ce(+n);if(a+e>t[b])throw f(i);for(var c=t[m]._b,s=a+t[E],l=r(+o),h=0;e>h;h++)c[s+h]=l[u?h:e-h-1]}if(Ie.ABV){if(!v(function(){u(1)})||!v(function(){new u(-1)})||v(function(){return new u,new u(1.5),new u(NaN),"ArrayBuffer"!=u.name})){for(var F,I=(u=function(t){return Te(this,u),new l(Ce(t))})[o]=l[o],R=n(l),C=0;R.length>C;)(F=R[C++])in u||Y(u,F,l[F]);Fe||(I.constructor=u)}var W=new a(new u(2)),U=a[o].setInt8;W.setInt8(0,2147483648),W.setInt8(1,2147483649),!W.getInt8(0)&&W.getInt8(1)||Re(a[o],{setInt8:function(t,e){U.call(this,t,e<<24>>24)},setUint8:function(t,e){U.call(this,t,e<<24>>24)}},!0)}else u=function(t){Te(this,u,"ArrayBuffer");var e=Ce(t);this._b=Ue.call(Array(e),0),this[b]=e},a=function(t,e,n){Te(this,a,"DataView"),Te(t,u,"DataView");var r=t[b],o=Mt(e);if(0>o||o>r)throw f("Wrong offset!");if(o+(n=void 0===n?r-o:kt(n))>r)throw f("Wrong length!");this[m]=t,this[E]=o,this[b]=n},O&&(P(u,"byteLength","_l"),P(a,"buffer","_b"),P(a,"byteLength","_l"),P(a,"byteOffset","_o")),Re(a[o],{getInt8:function(t){return k(this,1,t)[0]<<24>>24},getUint8:function(t){return k(this,1,t)[0]},getInt16:function(t){var e=k(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=k(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return x(k(this,4,t,arguments[1]))},getUint32:function(t){return x(k(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return w(k(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return w(k(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){L(this,1,t,S,e)},setUint8:function(t,e){L(this,1,t,S,e)},setInt16:function(t,e){L(this,2,t,A,e,arguments[2])},setUint16:function(t,e){L(this,2,t,A,e,arguments[2])},setInt32:function(t,e){L(this,4,t,M,e,arguments[2])},setUint32:function(t,e){L(this,4,t,M,e,arguments[2])},setFloat32:function(t,e){L(this,4,t,N,e,arguments[2])},setFloat64:function(t,e){L(this,8,t,z,e,arguments[2])}});Ke(u,"ArrayBuffer"),Ke(a,"DataView"),Y(a[o],Ie.VIEW,!0),e.ArrayBuffer=u,e.DataView=a}),De=Object.freeze({default:Be,__moduleExports:Be}),Ve=ze("species"),Ge=function(t,e){var n,r=M(t).constructor;return void 0===r||void 0==(n=M(r)[Ve])?e:nt(n)},Je=Object.freeze({default:Ge,__moduleExports:Ge}),He=ze("species"),Ye=function(t){var e=g[t];O&&e&&!e[He]&&T.f(e,He,{configurable:!0,get:function(){return this}})},qe=Object.freeze({default:Ye,__moduleExports:Ye}),Xe=st&&ft||st,$e=De&&Be||De,Qe=Je&&Ge||Je,Ze=qe&&Ye||qe,tn=g.ArrayBuffer,en=$e.ArrayBuffer,nn=$e.DataView,rn=Ie.ABV&&tn.isView,on=en.prototype.slice,un=Ie.VIEW;Xe(Xe.G+Xe.W+Xe.F*(tn!==en),{ArrayBuffer:en}),Xe(Xe.S+Xe.F*!Ie.CONSTR,"ArrayBuffer",{isView:function(t){return rn&&rn(t)||f(t)&&un in t}}),Xe(Xe.P+Xe.U+Xe.F*v(function(){return!new en(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==on&&void 0===e)return on.call(M(this),t);for(var n=M(this).byteLength,r=Qt(t,n),o=Qt(void 0===e?n:e,n),i=new(Qe(this,en))(kt(o-r)),u=new nn(this),a=new nn(i),c=0;o>r;)a.setUint8(c++,u.getUint8(r++));return i}}),Ze("ArrayBuffer");var an=ze("toStringTag"),cn="Arguments"==Ct(function(){return arguments}()),fn=function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),an))?n:cn?Ct(e):"Object"==(r=Ct(e))&&"function"==typeof e.callee?"Arguments":r},sn=Object.freeze({default:fn,__moduleExports:fn}),ln={},hn=Object.freeze({default:ln,__moduleExports:ln}),dn=hn&&ln||hn,vn=ze("iterator"),pn=Array.prototype,yn=function(t){return void 0!==t&&(dn.Array===t||pn[vn]===t)},gn=Object.freeze({default:yn,__moduleExports:yn}),_n=Object.keys||function(t){return ye(t,ge)},mn=Object.freeze({default:_n,__moduleExports:_n}),bn=mn&&_n||mn,En=O?Object.defineProperties:function(t,e){M(t);for(var n,r=bn(e),o=r.length,i=0;o>i;)T.f(t,n=r[i++],e[n]);return t},On=Object.freeze({default:En,__moduleExports:En}),jn=g.document,wn=jn&&jn.documentElement,xn=Object.freeze({default:wn,__moduleExports:wn}),Sn=On&&En||On,An=xn&&wn||xn,Mn=fe("IE_PROTO"),zn=function(){},Nn=function(){var t,e=j("iframe"),n=ge.length;for(e.style.display="none",An.appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),Nn=t.F;n--;)delete Nn.prototype[ge[n]];return Nn()},Pn=Object.create||function(t,e){var n;return null!==t?(zn.prototype=M(t),n=new zn,zn.prototype=null,n[Mn]=t):n=Nn(),void 0===e?n:Sn(n,e)},kn=Object.freeze({default:Pn,__moduleExports:Pn}),Ln=fe("IE_PROTO"),Fn=Object.prototype,In=Object.getPrototypeOf||function(t){return t=we(t),q(t,Ln)?t[Ln]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?Fn:null},Rn=Object.freeze({default:In,__moduleExports:In}),Tn=sn&&fn||sn,Cn=ze("iterator"),Wn=$.getIteratorMethod=function(t){if(void 0!=t)return t[Cn]||t["@@iterator"]||dn[Tn(t)]},Un=Object.freeze({default:Wn,__moduleExports:Wn}),Kn=Array.isArray||function(t){return"Array"==Ct(t)},Bn=Object.freeze({default:Kn,__moduleExports:Kn}),Dn=Bn&&Kn||Bn,Vn=ze("species"),Gn=function(t){var e;return Dn(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!Dn(e.prototype)||(e=void 0),f(e)&&null===(e=e[Vn])&&(e=void 0)),void 0===e?Array:e},Jn=Object.freeze({default:Gn,__moduleExports:Gn}),Hn=Jn&&Gn||Jn,Yn=function(t,e){return new(Hn(t))(e)},qn=Object.freeze({default:Yn,__moduleExports:Yn}),Xn=qn&&Yn||qn,$n=function(t,e){var n=1==t,r=2==t,o=3==t,i=4==t,u=6==t,a=5==t||u,c=e||Xn;return function(e,f,s){for(var l,h,d=we(e),v=Dt(d),p=ut(f,s,3),y=kt(v.length),g=0,_=n?c(e,y):r?c(e,0):void 0;y>g;g++)if((a||g in v)&&(h=p(l=v[g],g,d),t))if(n)_[g]=h;else if(h)switch(t){case 3:return!0;case 5:return l;case 6:return g;case 2:_.push(l)}else if(i)return!1;return u?-1:o||i?i:_}},Qn=Object.freeze({default:$n,__moduleExports:$n}),Zn=ze("unscopables"),tr=Array.prototype;void 0==tr[Zn]&&Y(tr,Zn,{});var er=function(t){tr[Zn][t]=!0},nr=Object.freeze({default:er,__moduleExports:er}),rr=function(t,e){return{value:e,done:!!t}},or=Object.freeze({default:rr,__moduleExports:rr}),ir=kn&&Pn||kn,ur={};Y(ur,ze("iterator"),function(){return this});var ar=function(t,e,n){t.prototype=ir(ur,{next:C(1,n)}),Ke(t,e+" Iterator")},cr=Object.freeze({default:ar,__moduleExports:ar}),fr=cr&&ar||cr,sr=Rn&&In||Rn,lr=ze("iterator"),hr=!([].keys&&"next"in[].keys()),dr=function(){return this},vr=function(t,e,n,r,o,i,u){fr(n,e,r);var a,c,f,s=function(t){if(!hr&&t in v)return v[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},l=e+" Iterator",h="values"==o,d=!1,v=t.prototype,p=v[lr]||v["@@iterator"]||o&&v[o],y=p||s(o),g=o?h?s("entries"):y:void 0,_="Array"==e&&v.entries||p;if(_&&(f=sr(_.call(new t)))!==Object.prototype&&f.next&&(Ke(f,l,!0),Fe||"function"==typeof f[lr]||Y(f,lr,dr)),h&&p&&"values"!==p.name&&(d=!0,y=function(){return p.call(this)}),Fe&&!u||!hr&&!d&&v[lr]||Y(v,lr,y),dn[e]=y,dn[l]=dr,o)if(a={values:h?y:s("values"),keys:i?y:s("keys"),entries:g},u)for(c in a)c in v||it(v,c,a[c]);else Xe(Xe.P+Xe.F*(hr||d),e,a);return a},pr=Object.freeze({default:vr,__moduleExports:vr}),yr=nr&&er||nr,gr=or&&rr||or,_r=pr&&vr||pr,mr=_r(Array,"Array",function(t,e){this._t=$t(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return t&&t.length>n?gr(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]]):(this._t=void 0,gr(1))},"values");dn.Arguments=dn.Array,yr("keys"),yr("values"),yr("entries");var br=ze("iterator"),Er=!1;try{[7][br]().return=function(){Er=!0}}catch(t){}var Or=function(t,e){if(!e&&!Er)return!1;var n=!1;try{var r=[7],o=r[br]();o.next=function(){return{done:n=!0}},r[br]=function(){return o},t(r)}catch(t){}return n},jr=Object.freeze({default:Or,__moduleExports:Or}),wr=[].copyWithin||function(t,e){var n=we(this),r=kt(n.length),o=Qt(t,r),i=Qt(e,r),u=arguments.length>2?arguments[2]:void 0,a=Math.min((void 0===u?r:Qt(u,r))-i,r-o),c=1;for(o>i&&i+a>o&&(c=-1,i+=a-1,o+=a-1);a-- >0;)i in n?n[o]=n[i]:delete n[o],o+=c,i+=c;return n},xr=Object.freeze({default:wr,__moduleExports:wr}),Sr={}.propertyIsEnumerable,Ar={f:Sr},Mr=Object.freeze({default:Ar,__moduleExports:Ar,f:Sr}),zr=Mr&&Ar||Mr,Nr=Object.getOwnPropertyDescriptor,Pr=O?Nr:function(t,e){if(t=$t(t),e=N(e,!0),z)try{return Nr(t,e)}catch(t){}if(q(t,e))return C(!zr.f.call(t,e),t[e])},kr={f:Pr},Lr=Object.freeze({default:kr,__moduleExports:kr,f:Pr}),Fr=gn&&yn||gn,Ir=Un&&Wn||Un,Rr=Qn&&$n||Qn,Tr=jr&&Or||jr,Cr=xr&&wr||xr,Wr=Lr&&kr||Lr,Ur=n(function(t){if(O){var e=Fe,n=g,r=v,o=Xe,i=Ie,u=ut,a=Te,c=C,s=Y,l=Re,h=Mt,d=kt,p=Ce,y=Qt,_=N,m=q,b=Tn,E=f,j=we,w=Fr,x=ir,S=sr,A=We.f,M=Ir,z=X,P=ze,k=Rr,L=ce,F=Qe,I=mr,R=dn,W=Tr,U=Ze,K=Ue,B=Cr,D=T,V=Wr,G=D.f,J=V.f,H=n.RangeError,$=n.TypeError,Q=n.Uint8Array,Z=Array.prototype,tt=$e.ArrayBuffer,et=$e.DataView,nt=k(0),rt=k(2),ot=k(3),it=k(4),at=k(5),ct=k(6),ft=L(!0),st=L(!1),lt=I.values,ht=I.keys,dt=I.entries,vt=Z.lastIndexOf,pt=Z.reduce,yt=Z.reduceRight,gt=Z.join,_t=Z.sort,mt=Z.slice,bt=Z.toString,Et=Z.toLocaleString,Ot=P("iterator"),jt=P("toStringTag"),wt=z("typed_constructor"),xt=z("def_constructor"),St=i.CONSTR,At=i.TYPED,zt=i.VIEW,Nt=k(1,function(t,e){return Rt(F(t,t[xt]),e)}),Pt=r(function(){return 1===new Q(new Uint16Array([1]).buffer)[0]}),Lt=!!Q&&!!Q.prototype.set&&r(function(){new Q(1).set({})}),Ft=function(t,e){var n=h(t);if(0>n||n%e)throw H("Wrong offset!");return n},It=function(t){if(E(t)&&At in t)return t;throw $(t+" is not a typed array!")},Rt=function(t,e){if(!(E(t)&&wt in t))throw $("It is not a typed array constructor!");return new t(e)},Tt=function(t,e){return Ct(F(t,t[xt]),e)},Ct=function(t,e){for(var n=0,r=e.length,o=Rt(t,r);r>n;)o[n]=e[n++];return o},Wt=function(t,e,n){G(t,e,{get:function(){return this._d[n]}})},Ut=function(t){var e,n,r,o,i,a,c=j(t),f=arguments.length,s=f>1?arguments[1]:void 0,l=void 0!==s,h=M(c);if(void 0!=h&&!w(h)){for(a=h.call(c),r=[],e=0;!(i=a.next()).done;e++)r.push(i.value);c=r}for(l&&f>2&&(s=u(s,arguments[2],2)),e=0,n=d(c.length),o=Rt(this,n);n>e;e++)o[e]=l?s(c[e],e):c[e];return o},Kt=function(){for(var t=0,e=arguments.length,n=Rt(this,e);e>t;)n[t]=arguments[t++];return n},Bt=!!Q&&r(function(){Et.call(new Q(1))}),Dt=function(){return Et.apply(Bt?mt.call(It(this)):It(this),arguments)},Vt={copyWithin:function(t,e){return B.call(It(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return it(It(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return K.apply(It(this),arguments)},filter:function(t){return Tt(this,rt(It(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return at(It(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return ct(It(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){nt(It(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return st(It(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return ft(It(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return gt.apply(It(this),arguments)},lastIndexOf:function(t){return vt.apply(It(this),arguments)},map:function(t){return Nt(It(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return pt.apply(It(this),arguments)},reduceRight:function(t){return yt.apply(It(this),arguments)},reverse:function(){for(var t,e=It(this).length,n=Math.floor(e/2),r=0;n>r;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return ot(It(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return _t.call(It(this),t)},subarray:function(t,e){var n=It(this),r=n.length,o=y(t,r);return new(F(n,n[xt]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,d((void 0===e?r:y(e,r))-o))}},Gt=function(t,e){return Tt(this,mt.call(It(this),t,e))},Jt=function(t){It(this);var e=Ft(arguments[1],1),n=this.length,r=j(t),o=d(r.length),i=0;if(o+e>n)throw H("Wrong length!");for(;o>i;)this[e+i]=r[i++]},Ht={entries:function(){return dt.call(It(this))},keys:function(){return ht.call(It(this))},values:function(){return lt.call(It(this))}},Yt=function(t,e){return E(t)&&t[At]&&"symbol"!=typeof e&&e in t&&+e+""==e+""},qt=function(t,e){return Yt(t,e=_(e,!0))?c(2,t[e]):J(t,e)},Xt=function(t,e,n){return!(Yt(t,e=_(e,!0))&&E(n)&&m(n,"value"))||m(n,"get")||m(n,"set")||n.configurable||m(n,"writable")&&!n.writable||m(n,"enumerable")&&!n.enumerable?G(t,e,n):(t[e]=n.value,t)};St||(V.f=qt,D.f=Xt),o(o.S+o.F*!St,"Object",{getOwnPropertyDescriptor:qt,defineProperty:Xt}),r(function(){bt.call({})})&&(bt=Et=function(){return gt.call(this)});var $t=l({},Vt);l($t,Ht),s($t,Ot,Ht.values),l($t,{slice:Gt,set:Jt,constructor:function(){},toString:bt,toLocaleString:Dt}),Wt($t,"buffer","b"),Wt($t,"byteOffset","o"),Wt($t,"byteLength","l"),Wt($t,"length","e"),G($t,jt,{get:function(){return this[At]}}),t.exports=function(t,u,c,f){var l=t+((f=!!f)?"Clamped":"")+"Array",h="get"+t,v="set"+t,y=n[l],g=y||{},_=y&&S(y),m={},O=y&&y.prototype,j=function(t,e){G(t,e,{get:function(){return function(t,e){var n=t._d;return n.v[h](e*u+n.o,Pt)}(this,e)},set:function(t){return function(t,e,n){var r=t._d;f&&(n=0>(n=Math.round(n))?0:n>255?255:255&n),r.v[v](e*u+r.o,n,Pt)}(this,e,t)},enumerable:!0})};!y||!i.ABV?(y=c(function(t,e,n,r){a(t,y,l,"_d");var o,i,c,f,h=0,v=0;if(E(e)){if(!(e instanceof tt||"ArrayBuffer"==(f=b(e))||"SharedArrayBuffer"==f))return At in e?Ct(y,e):Ut.call(y,e);o=e,v=Ft(n,u);var g=e.byteLength;if(void 0===r){if(g%u)throw H("Wrong length!");if(0>(i=g-v))throw H("Wrong length!")}else if((i=d(r)*u)+v>g)throw H("Wrong length!");c=i/u}else c=p(e),o=new tt(i=c*u);for(s(t,"_d",{b:o,o:v,l:i,e:c,v:new et(o)});c>h;)j(t,h++)}),O=y.prototype=x($t),s(O,"constructor",y)):r(function(){y(1)})&&r(function(){new y(-1)})&&W(function(t){new y,new y(null),new y(1.5),new y(t)},!0)||(y=c(function(t,e,n,r){var o;return a(t,y,l),E(e)?e instanceof tt||"ArrayBuffer"==(o=b(e))||"SharedArrayBuffer"==o?void 0!==r?new g(e,Ft(n,u),r):void 0!==n?new g(e,Ft(n,u)):new g(e):At in e?Ct(y,e):Ut.call(y,e):new g(p(e))}),nt(_!==Function.prototype?A(g).concat(A(_)):A(g),function(t){t in y||s(y,t,g[t])}),y.prototype=O,e||(O.constructor=y));var w=O[Ot],M=!!w&&("values"==w.name||void 0==w.name),z=Ht.values;s(y,wt,!0),s(O,At,l),s(O,zt,!0),s(O,xt,y),(f?new y(1)[jt]==l:jt in O)||G(O,jt,{get:function(){return l}}),m[l]=y,o(o.G+o.W+o.F*(y!=g),m),o(o.S,l,{BYTES_PER_ELEMENT:u}),o(o.S+o.F*r(function(){g.of.call(y,1)}),l,{from:Ut,of:Kt}),"BYTES_PER_ELEMENT"in O||s(O,"BYTES_PER_ELEMENT",u),o(o.P,l,Vt),U(l),o(o.P+o.F*Lt,l,{set:Jt}),o(o.P+o.F*!M,l,Ht),e||O.toString==bt||(O.toString=bt),o(o.P+o.F*r(function(){new y(1).slice()}),l,{slice:Gt}),o(o.P+o.F*(r(function(){return[1,2].toLocaleString()!=new y([1,2]).toLocaleString()})||!r(function(){O.toLocaleString.call([1,2])})),l,{toLocaleString:Dt}),R[l]=M?w:z,e||M||s(O,Ot,z)}}else t.exports=function(){}}),Kr=Object.freeze({default:Ur,__moduleExports:Ur}),Br=Kr&&Ur||Kr;Br("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}}),Br("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}}),Br("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0),Br("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}}),Br("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}}),Br("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}}),Br("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}}),Br("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}}),Br("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}});var Dr=function(t,e,n,r){try{return r?e(M(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&M(o.call(t)),e}},Vr=Object.freeze({default:Dr,__moduleExports:Dr}),Gr=Vr&&Dr||Vr,Jr=n(function(t){var e={},n={},r=t.exports=function(t,r,o,i,u){var a,c,f,s,l=u?function(){return t}:Ir(t),h=ut(o,i,r?2:1),d=0;if("function"!=typeof l)throw TypeError(t+" is not iterable!");if(Fr(l)){for(a=kt(t.length);a>d;d++)if((s=r?h(M(c=t[d])[0],c[1]):h(t[d]))===e||s===n)return s}else for(f=l.call(t);!(c=f.next()).done;)if((s=Gr(f,h,c.value,r))===e||s===n)return s};r.BREAK=e,r.RETURN=n}),Hr=Object.freeze({default:Jr,__moduleExports:Jr}),Yr=n(function(t){var e=X("meta"),n=T.f,r=0,o=Object.isExtensible||function(){return!0},i=!v(function(){return o(Object.preventExtensions({}))}),u=function(t){n(t,e,{value:{i:"O"+ ++r,w:{}}})},a=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!f(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!q(t,e)){if(!o(t))return"F";if(!n)return"E";u(t)}return t[e].i},getWeak:function(t,n){if(!q(t,e)){if(!o(t))return!0;if(!n)return!1;u(t)}return t[e].w},onFreeze:function(t){return i&&a.NEED&&o(t)&&!q(t,e)&&u(t),t}}}),qr=Object.freeze({default:Yr,__moduleExports:Yr,KEY:Yr.KEY,NEED:Yr.NEED,fastKey:Yr.fastKey,getWeak:Yr.getWeak,onFreeze:Yr.onFreeze}),Xr=function(t,e){if(!f(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t},$r=Object.freeze({default:Xr,__moduleExports:Xr}),Qr=Hr&&Jr||Hr,Zr=qr&&Yr||qr,to=$r&&Xr||$r,eo=T.f,no=Zr.fastKey,ro=O?"_s":"size",oo=function(t,e){var n,r=no(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n},io={getConstructor:function(t,e,n,r){var o=t(function(t,i){Te(t,o,e,"_i"),t._t=e,t._i=ir(null),t._f=void 0,t._l=void 0,t[ro]=0,void 0!=i&&Qr(i,n,t[r],t)});return Re(o.prototype,{clear:function(){for(var t=to(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[ro]=0},delete:function(t){var n=to(this,e),r=oo(n,t);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[ro]--}return!!r},forEach:function(t){to(this,e);for(var n,r=ut(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!oo(to(this,e),t)}}),O&&eo(o.prototype,"size",{get:function(){return to(this,e)[ro]}}),o},def:function(t,e,n){var r,o,i=oo(t,e);return i?i.v=n:(t._l=i={i:o=no(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[ro]++,"F"!==o&&(t._i[o]=i)),t},getEntry:oo,setStrong:function(t,e,n){_r(t,e,function(t,n){this._t=to(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?gr(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,gr(1))},n?"entries":"values",!n,!0),Ze(e)}},uo=Object.freeze({default:io,__moduleExports:io,getConstructor:io.getConstructor,def:io.def,getEntry:io.getEntry,setStrong:io.setStrong}),ao=function(t,e){if(M(t),!f(e)&&null!==e)throw TypeError(e+": can't set as prototype!")},co={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=ut(Function.call,Wr.f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return ao(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:ao},fo=Object.freeze({default:co,__moduleExports:co,set:co.set,check:co.check}),so=fo&&co||fo,lo=so.set,ho=function(t,e,n){var r,o=e.constructor;return o!==n&&"function"==typeof o&&(r=o.prototype)!==n.prototype&&f(r)&&lo&&lo(t,r),t},vo=Object.freeze({default:ho,__moduleExports:ho}),po=vo&&ho||vo,yo=function(t,e,n,r,o,i){var u=g[t],a=u,c=o?"set":"add",s=a&&a.prototype,l={},h=function(t){var e=s[t];it(s,t,"delete"==t?function(t){return!(i&&!f(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(i&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return i&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof a&&(i||s.forEach&&!v(function(){(new a).entries().next()}))){var d=new a,p=d[c](i?{}:-0,1)!=d,y=v(function(){d.has(1)}),_=Tr(function(t){new a(t)}),m=!i&&v(function(){for(var t=new a,e=5;e--;)t[c](e,e);return!t.has(-0)});_||((a=e(function(e,n){Te(e,a,t);var r=po(new u,e,a);return void 0!=n&&Qr(n,o,r[c],r),r})).prototype=s,s.constructor=a),(y||m)&&(h("delete"),h("has"),o&&h("get")),(m||p)&&h(c),i&&s.clear&&delete s.clear}else a=r.getConstructor(e,t,o,c),Re(a.prototype,n),Zr.NEED=!0;return Ke(a,t),l[t]=a,Xe(Xe.G+Xe.W+Xe.F*(a!=u),l),i||r.setStrong(a,t,o),a},go=Object.freeze({default:yo,__moduleExports:yo}),_o=uo&&io||uo,mo=go&&yo||go,bo=(mo("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=_o.getEntry(to(this,"Map"),t);return e&&e.v},set:function(t,e){return _o.def(to(this,"Map"),0===t?0:t,e)}},_o,!0),mo("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return _o.def(to(this,"Set"),t=0===t?0:t,t)}},_o),Object.getOwnPropertySymbols),Eo={f:bo},Oo=Object.freeze({default:Eo,__moduleExports:Eo,f:bo}),jo=Oo&&Eo||Oo,wo=Object.assign,xo=!wo||v(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=wo({},t)[n]||Object.keys(wo({},e)).join("")!=r})?function(t,e){for(var n=we(t),r=arguments.length,o=1,i=jo.f,u=zr.f;r>o;)for(var a,c=Dt(arguments[o++]),f=i?bn(c).concat(i(c)):bn(c),s=f.length,l=0;s>l;)u.call(c,a=f[l++])&&(n[a]=c[a]);return n}:wo,So=Object.freeze({default:xo,__moduleExports:xo}),Ao=Zr.getWeak,Mo=Rr(5),zo=Rr(6),No=0,Po=function(t){return t._l||(t._l=new ko)},ko=function(){this.a=[]},Lo=function(t,e){return Mo(t.a,function(t){return t[0]===e})};ko.prototype={get:function(t){var e=Lo(this,t);if(e)return e[1]},has:function(t){return!!Lo(this,t)},set:function(t,e){var n=Lo(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=zo(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}};var Fo={getConstructor:function(t,e,n,r){var o=t(function(t,i){Te(t,o,e,"_i"),t._t=e,t._i=No++,t._l=void 0,void 0!=i&&Qr(i,n,t[r],t)});return Re(o.prototype,{delete:function(t){if(!f(t))return!1;var n=Ao(t);return!0===n?Po(to(this,e)).delete(t):n&&q(n,this._i)&&delete n[this._i]},has:function(t){if(!f(t))return!1;var n=Ao(t);return!0===n?Po(to(this,e)).has(t):n&&q(n,this._i)}}),o},def:function(t,e,n){var r=Ao(M(e),!0);return!0===r?Po(t).set(e,n):r[t._i]=n,t},ufstore:Po},Io=Object.freeze({default:Fo,__moduleExports:Fo,getConstructor:Fo.getConstructor,def:Fo.def,ufstore:Fo.ufstore}),Ro=So&&xo||So,To=Io&&Fo||Io;n(function(t){var e,n=Rr(0),r=Zr.getWeak,o=Object.isExtensible,i=To.ufstore,u={},a=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},c={get:function(t){if(f(t)){var e=r(t);return!0===e?i(to(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return To.def(to(this,"WeakMap"),t,e)}},s=t.exports=mo("WeakMap",a,c,To,!0,!0);v(function(){return 7!=(new s).set((Object.freeze||Object)(u),7).get(u)})&&(e=To.getConstructor(a,"WeakMap"),Ro(e.prototype,c),Zr.NEED=!0,n(["delete","has","get","set"],function(t){var n=s.prototype,r=n[t];it(n,t,function(n,i){if(f(n)&&!o(n)){this._f||(this._f=new e);var u=this._f[t](n,i);return"set"==t?this:u}return r.call(this,n,i)})}))});mo("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return To.def(to(this,"WeakSet"),t,!0)}},To,!1,!0);var Co=(g.Reflect||{}).apply,Wo=Function.apply;Xe(Xe.S+Xe.F*!v(function(){Co(function(){})}),"Reflect",{apply:function(t,e,n){var r=nt(t),o=M(n);return Co?Co(r,e,o):Wo.call(r,e,o)}});var Uo=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)},Ko=Object.freeze({default:Uo,__moduleExports:Uo}),Bo=Ko&&Uo||Ko,Do=[].slice,Vo={},Go=Function.bind||function(t){var e=nt(this),n=Do.call(arguments,1),r=function(){var o=n.concat(Do.call(arguments));return this instanceof r?function(t,e,n){if(!(e in Vo)){for(var r=[],o=0;e>o;o++)r[o]="a["+o+"]";Vo[e]=Function("F,a","return new F("+r.join(",")+")")}return Vo[e](t,n)}(e,o.length,o):Bo(e,o,t)};return f(e.prototype)&&(r.prototype=e.prototype),r},Jo=Object.freeze({default:Go,__moduleExports:Go}),Ho=Jo&&Go||Jo,Yo=(g.Reflect||{}).construct,qo=v(function(){function t(){}return!(Yo(function(){},[],t)instanceof t)}),Xo=!v(function(){Yo(function(){})});Xe(Xe.S+Xe.F*(qo||Xo),"Reflect",{construct:function(t,e){nt(t),M(e);var n=3>arguments.length?t:nt(arguments[2]);if(Xo&&!qo)return Yo(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(Ho.apply(t,r))}var o=n.prototype,i=ir(f(o)?o:Object.prototype),u=Function.apply.call(t,i,e);return f(u)?u:i}}),Xe(Xe.S+Xe.F*v(function(){Reflect.defineProperty(T.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){M(t),e=N(e,!0),M(n);try{return T.f(t,e,n),!0}catch(t){return!1}}});var $o=Wr.f;Xe(Xe.S,"Reflect",{deleteProperty:function(t,e){var n=$o(M(t),e);return!(n&&!n.configurable)&&delete t[e]}}),Xe(Xe.S,"Reflect",{get:function t(e,n){var r,o,i=3>arguments.length?e:arguments[2];return M(e)===i?e[n]:(r=Wr.f(e,n))?q(r,"value")?r.value:void 0!==r.get?r.get.call(i):void 0:f(o=sr(e))?t(o,n,i):void 0}}),Xe(Xe.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return Wr.f(M(t),e)}}),Xe(Xe.S,"Reflect",{getPrototypeOf:function(t){return sr(M(t))}}),Xe(Xe.S,"Reflect",{has:function(t,e){return e in t}});var Qo=Object.isExtensible;Xe(Xe.S,"Reflect",{isExtensible:function(t){return M(t),!Qo||Qo(t)}});var Zo=g.Reflect,ti=Zo&&Zo.ownKeys||function(t){var e=We.f(M(t)),n=jo.f;return n?e.concat(n(t)):e},ei=Object.freeze({default:ti,__moduleExports:ti}),ni=ei&&ti||ei;Xe(Xe.S,"Reflect",{ownKeys:ni});var ri=Object.preventExtensions;Xe(Xe.S,"Reflect",{preventExtensions:function(t){M(t);try{return ri&&ri(t),!0}catch(t){return!1}}}),Xe(Xe.S,"Reflect",{set:function t(e,n,r){var o,i,u=4>arguments.length?e:arguments[3],a=Wr.f(M(e),n);if(!a){if(f(i=sr(e)))return t(i,n,r,u);a=C(0)}if(q(a,"value")){if(!1===a.writable||!f(u))return!1;if(o=Wr.f(u,n)){if(o.get||o.set||!1===o.writable)return!1;o.value=r,T.f(u,n,o)}else T.f(u,n,C(0,r));return!0}return void 0!==a.set&&(a.set.call(u,r),!0)}}),so&&Xe(Xe.S,"Reflect",{setPrototypeOf:function(t,e){so.check(t,e);try{return so.set(t,e),!0}catch(t){return!1}}});var oi,ii,ui,ai=g.process,ci=g.setImmediate,fi=g.clearImmediate,si=g.MessageChannel,li=g.Dispatch,hi=0,di={},vi=function(){var t=+this;if(di.hasOwnProperty(t)){var e=di[t];delete di[t],e()}},pi=function(t){vi.call(t.data)};ci&&fi||(ci=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return di[++hi]=function(){Bo("function"==typeof t?t:Function(t),e)},oi(hi),hi},fi=function(t){delete di[t]},"process"==Ct(ai)?oi=function(t){ai.nextTick(ut(vi,t,1))}:li&&li.now?oi=function(t){li.now(ut(vi,t,1))}:si?(ui=(ii=new si).port2,ii.port1.onmessage=pi,oi=ut(ui.postMessage,ui,1)):g.addEventListener&&"function"==typeof postMessage&&!g.importScripts?(oi=function(t){g.postMessage(t+"","*")},g.addEventListener("message",pi,!1)):oi="onreadystatechange"in j("script")?function(t){An.appendChild(j("script")).onreadystatechange=function(){An.removeChild(this),vi.call(t)}}:function(t){setTimeout(ut(vi,t,1),0)});var yi={set:ci,clear:fi},gi=Object.freeze({default:yi,__moduleExports:yi,set:yi.set,clear:yi.clear}),_i=gi&&yi||gi,mi=_i.set,bi=g.MutationObserver||g.WebKitMutationObserver,Ei=g.process,Oi=g.Promise,ji="process"==Ct(Ei),wi=function(){var t,e,n,r=function(){var r,o;for(ji&&(r=Ei.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(ji)n=function(){Ei.nextTick(r)};else if(!bi||g.navigator&&g.navigator.standalone)if(Oi&&Oi.resolve){var o=Oi.resolve();n=function(){o.then(r)}}else n=function(){mi.call(g,r)};else{var i=!0,u=document.createTextNode("");new bi(r).observe(u,{characterData:!0}),n=function(){u.data=i=!i}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}},xi=Object.freeze({default:wi,__moduleExports:wi});var Si,Ai,Mi,zi,Ni=function(t){return new function(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=nt(e),this.reject=nt(n)}(t)},Pi={f:Ni},ki=Object.freeze({default:Pi,__moduleExports:Pi,f:Ni}),Li=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}},Fi=Object.freeze({default:Li,__moduleExports:Li}),Ii=ki&&Pi||ki,Ri=function(t,e){if(M(t),f(e)&&e.constructor===t)return e;var n=Ii.f(t);return(0,n.resolve)(e),n.promise},Ti=Object.freeze({default:Ri,__moduleExports:Ri}),Ci=Fi&&Li||Fi,Wi=Ti&&Ri||Ti,Ui=_i.set,Ki=(xi&&wi||xi)(),Bi=g.TypeError,Di=g.process,Vi=g.Promise,Gi="process"==Tn(Di),Ji=function(){},Hi=Ai=Ii.f,Yi=!!function(){try{var t=Vi.resolve(1),e=(t.constructor={})[ze("species")]=function(t){t(Ji,Ji)};return(Gi||"function"==typeof PromiseRejectionEvent)&&t.then(Ji)instanceof e}catch(t){}}(),qi=function(t){var e;return!(!f(t)||"function"!=typeof(e=t.then))&&e},Xi=function(t,e){if(!t._n){t._n=!0;var n=t._c;Ki(function(){for(var r=t._v,o=1==t._s,i=0,u=function(e){var n,i,u,a=o?e.ok:e.fail,c=e.resolve,f=e.reject,s=e.domain;try{a?(o||(2==t._h&&Zi(t),t._h=1),!0===a?n=r:(s&&s.enter(),n=a(r),s&&(s.exit(),u=!0)),n===e.promise?f(Bi("Promise-chain cycle")):(i=qi(n))?i.call(n,c,f):c(n)):f(r)}catch(t){s&&!u&&s.exit(),f(t)}};n.length>i;)u(n[i++]);t._c=[],t._n=!1,e&&!t._h&&$i(t)})}},$i=function(t){Ui.call(g,function(){var e,n,r,o=t._v,i=Qi(t);if(i&&(e=Ci(function(){Gi?Di.emit("unhandledRejection",o,t):(n=g.onunhandledrejection)?n({promise:t,reason:o}):(r=g.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=Gi||Qi(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},Qi=function(t){return 1!==t._h&&0===(t._a||t._c).length},Zi=function(t){Ui.call(g,function(){var e;Gi?Di.emit("rejectionHandled",t):(e=g.onrejectionhandled)&&e({promise:t,reason:t._v})})},tu=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),Xi(e,!0))},eu=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw Bi("Promise can't be resolved itself");(e=qi(t))?Ki(function(){var r={_w:n,_d:!1};try{e.call(t,ut(eu,r,1),ut(tu,r,1))}catch(t){tu.call(r,t)}}):(n._v=t,n._s=1,Xi(n,!1))}catch(t){tu.call({_w:n,_d:!1},t)}}};Yi||(Vi=function(t){Te(this,Vi,"Promise","_h"),nt(t),Si.call(this);try{t(ut(eu,this,1),ut(tu,this,1))}catch(t){tu.call(this,t)}},(Si=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=Re(Vi.prototype,{then:function(t,e){var n=Hi(Qe(this,Vi));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=Gi?Di.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&Xi(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),Mi=function(){var t=new Si;this.promise=t,this.resolve=ut(eu,t,1),this.reject=ut(tu,t,1)},Ii.f=Hi=function(t){return t===Vi||t===zi?new Mi(t):Ai(t)}),Xe(Xe.G+Xe.W+Xe.F*!Yi,{Promise:Vi}),Ke(Vi,"Promise"),Ze("Promise"),zi=$.Promise,Xe(Xe.S+Xe.F*!Yi,"Promise",{reject:function(t){var e=Hi(this);return(0,e.reject)(t),e.promise}}),Xe(Xe.S+Xe.F*(Fe||!Yi),"Promise",{resolve:function(t){return Wi(Fe&&this===zi?Vi:this,t)}}),Xe(Xe.S+Xe.F*!(Yi&&Tr(function(t){Vi.all(t).catch(Ji)})),"Promise",{all:function(t){var e=this,n=Hi(e),r=n.resolve,o=n.reject,i=Ci(function(){var n=[],i=0,u=1;Qr(t,!1,function(t){var a=i++,c=!1;n.push(void 0),u++,e.resolve(t).then(function(t){c||(c=!0,n[a]=t,--u||r(n))},o)}),--u||r(n)});return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=Hi(e),r=n.reject,o=Ci(function(){Qr(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}});var nu={f:ze},ru=Object.freeze({default:nu,__moduleExports:nu,f:ze}),ou=ru&&nu||ru,iu=T.f,uu=function(t){var e=$.Symbol||($.Symbol=Fe?{}:g.Symbol||{});"_"==t.charAt(0)||t in e||iu(e,t,{value:ou.f(t)})},au=Object.freeze({default:uu,__moduleExports:uu}),cu=function(t){var e=bn(t),n=jo.f;if(n)for(var r,o=n(t),i=zr.f,u=0;o.length>u;)i.call(t,r=o[u++])&&e.push(r);return e},fu=Object.freeze({default:cu,__moduleExports:cu}),su=We.f,lu={}.toString,hu="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],du=function(t){return hu&&"[object Window]"==lu.call(t)?function(t){try{return su(t)}catch(t){return hu.slice()}}(t):su($t(t))},vu={f:du},pu=Object.freeze({default:vu,__moduleExports:vu,f:du}),yu=au&&uu||au,gu=fu&&cu||fu,_u=pu&&vu||pu,mu=Zr.KEY,bu=Wr.f,Eu=T.f,Ou=_u.f,ju=g.Symbol,wu=g.JSON,xu=wu&&wu.stringify,Su=ze("_hidden"),Au=ze("toPrimitive"),Mu={}.propertyIsEnumerable,zu=oe("symbol-registry"),Nu=oe("symbols"),Pu=oe("op-symbols"),ku=Object.prototype,Lu="function"==typeof ju,Fu=g.QObject,Iu=!Fu||!Fu.prototype||!Fu.prototype.findChild,Ru=O&&v(function(){return 7!=ir(Eu({},"a",{get:function(){return Eu(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=bu(ku,e);r&&delete ku[e],Eu(t,e,n),r&&t!==ku&&Eu(ku,e,r)}:Eu,Tu=function(t){var e=Nu[t]=ir(ju.prototype);return e._k=t,e},Cu=Lu&&"symbol"==typeof ju.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof ju},Wu=function(t,e,n){return t===ku&&Wu(Pu,e,n),M(t),e=N(e,!0),M(n),q(Nu,e)?(n.enumerable?(q(t,Su)&&t[Su][e]&&(t[Su][e]=!1),n=ir(n,{enumerable:C(0,!1)})):(q(t,Su)||Eu(t,Su,C(1,{})),t[Su][e]=!0),Ru(t,e,n)):Eu(t,e,n)},Uu=function(t,e){M(t);for(var n,r=gu(e=$t(e)),o=0,i=r.length;i>o;)Wu(t,n=r[o++],e[n]);return t},Ku=function(t){var e=Mu.call(this,t=N(t,!0));return!(this===ku&&q(Nu,t)&&!q(Pu,t))&&(!(e||!q(this,t)||!q(Nu,t)||q(this,Su)&&this[Su][t])||e)},Bu=function(t,e){if(t=$t(t),e=N(e,!0),t!==ku||!q(Nu,e)||q(Pu,e)){var n=bu(t,e);return!n||!q(Nu,e)||q(t,Su)&&t[Su][e]||(n.enumerable=!0),n}},Du=function(t){for(var e,n=Ou($t(t)),r=[],o=0;n.length>o;)q(Nu,e=n[o++])||e==Su||e==mu||r.push(e);return r},Vu=function(t){for(var e,n=t===ku,r=Ou(n?Pu:$t(t)),o=[],i=0;r.length>i;)!q(Nu,e=r[i++])||n&&!q(ku,e)||o.push(Nu[e]);return o};Lu||(it((ju=function(){if(this instanceof ju)throw TypeError("Symbol is not a constructor!");var t=X(arguments.length>0?arguments[0]:void 0),e=function(n){this===ku&&e.call(Pu,n),q(this,Su)&&q(this[Su],t)&&(this[Su][t]=!1),Ru(this,t,C(1,n))};return O&&Iu&&Ru(ku,t,{configurable:!0,set:e}),Tu(t)}).prototype,"toString",function(){return this._k}),Wr.f=Bu,T.f=Wu,We.f=_u.f=Du,zr.f=Ku,jo.f=Vu,O&&!Fe&&it(ku,"propertyIsEnumerable",Ku,!0),ou.f=function(t){return Tu(ze(t))}),Xe(Xe.G+Xe.W+Xe.F*!Lu,{Symbol:ju});for(var Gu="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),Ju=0;Gu.length>Ju;)ze(Gu[Ju++]);for(var Hu=bn(ze.store),Yu=0;Hu.length>Yu;)yu(Hu[Yu++]);Xe(Xe.S+Xe.F*!Lu,"Symbol",{for:function(t){return q(zu,t+="")?zu[t]:zu[t]=ju(t)},keyFor:function(t){if(!Cu(t))throw TypeError(t+" is not a symbol!");for(var e in zu)if(zu[e]===t)return e},useSetter:function(){Iu=!0},useSimple:function(){Iu=!1}}),Xe(Xe.S+Xe.F*!Lu,"Object",{create:function(t,e){return void 0===e?ir(t):Uu(ir(t),e)},defineProperty:Wu,defineProperties:Uu,getOwnPropertyDescriptor:Bu,getOwnPropertyNames:Du,getOwnPropertySymbols:Vu}),wu&&Xe(Xe.S+Xe.F*(!Lu||v(function(){var t=ju();return"[null]"!=xu([t])||"{}"!=xu({a:t})||"{}"!=xu(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(f(e)||void 0!==t)&&!Cu(t))return Dn(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!Cu(e))return e}),r[1]=e,xu.apply(wu,r)}}),ju.prototype[Au]||Y(ju.prototype,Au,ju.prototype.valueOf),Ke(ju,"Symbol"),Ke(Math,"Math",!0),Ke(g.JSON,"JSON",!0);var qu=function(t,e){var n=($.Object||{})[t]||Object[t],r={};r[t]=e(n),Xe(Xe.S+Xe.F*v(function(){n(1)}),"Object",r)},Xu=Object.freeze({default:qu,__moduleExports:qu}),$u=Xu&&qu||Xu,Qu=Zr.onFreeze;$u("freeze",function(t){return function(e){return t&&f(e)?t(Qu(e)):e}});var Zu=Zr.onFreeze;$u("seal",function(t){return function(e){return t&&f(e)?t(Zu(e)):e}});var ta=Zr.onFreeze;$u("preventExtensions",function(t){return function(e){return t&&f(e)?t(ta(e)):e}}),$u("isFrozen",function(t){return function(e){return!f(e)||!!t&&t(e)}}),$u("isSealed",function(t){return function(e){return!f(e)||!!t&&t(e)}}),$u("isExtensible",function(t){return function(e){return!!f(e)&&(!t||t(e))}});var ea=Wr.f;$u("getOwnPropertyDescriptor",function(){return function(t,e){return ea($t(t),e)}}),$u("getPrototypeOf",function(){return function(t){return sr(we(t))}}),$u("keys",function(){return function(t){return bn(we(t))}}),$u("getOwnPropertyNames",function(){return _u.f}),Xe(Xe.S+Xe.F,"Object",{assign:Ro});var na=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e},ra=Object.freeze({default:na,__moduleExports:na});Xe(Xe.S,"Object",{is:ra&&na||ra}),Xe(Xe.S,"Object",{setPrototypeOf:so.set});var oa=Function.prototype,ia=/^\s*function ([^ (]*)/;"name"in oa||O&&(0,T.f)(oa,"name",{configurable:!0,get:function(){try{return(""+this).match(ia)[1]}catch(t){return""}}}),Xe(Xe.S,"String",{raw:function(t){for(var e=$t(t.raw),n=kt(e.length),r=arguments.length,o=[],i=0;n>i;)o.push(e[i++]+""),r>i&&o.push(arguments[i]+"");return o.join("")}});var ua=String.fromCharCode,aa=String.fromCodePoint;Xe(Xe.S+Xe.F*(!!aa&&1!=aa.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,o=0;r>o;){if(e=+arguments[o++],Qt(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(65536>e?ua(e):ua(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}});var ca=function(t){return function(e,n){var r,o,i=Vt(e)+"",u=Mt(n),a=i.length;return 0>u||u>=a?t?"":void 0:55296>(r=i.charCodeAt(u))||r>56319||u+1===a||56320>(o=i.charCodeAt(u+1))||o>57343?t?i.charAt(u):r:t?i.slice(u,u+2):o-56320+(r-55296<<10)+65536}},fa=Object.freeze({default:ca,__moduleExports:ca}),sa=(fa&&ca||fa)(!1);Xe(Xe.P,"String",{codePointAt:function(t){return sa(this,t)}});var la=function(t){var e=Vt(this)+"",n="",r=Mt(t);if(0>r||r==1/0)throw RangeError("Count can't be negative");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(n+=e);return n},ha=Object.freeze({default:la,__moduleExports:la}),da=ha&&la||ha;Xe(Xe.P,"String",{repeat:da});var va=ze("match"),pa=function(t){var e;return f(t)&&(void 0!==(e=t[va])?!!e:"RegExp"==Ct(t))},ya=Object.freeze({default:pa,__moduleExports:pa}),ga=ya&&pa||ya,_a=function(t,e,n){if(ga(e))throw TypeError("String#"+n+" doesn't accept regex!");return Vt(t)+""},ma=Object.freeze({default:_a,__moduleExports:_a}),ba=ze("match"),Ea=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[ba]=!1,!"/./"[t](e)}catch(t){}}return!0},Oa=Object.freeze({default:Ea,__moduleExports:Ea}),ja=ma&&_a||ma,wa=Oa&&Ea||Oa,xa="".startsWith;Xe(Xe.P+Xe.F*wa("startsWith"),"String",{startsWith:function(t){var e=ja(this,t,"startsWith"),n=kt(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=t+"";return xa?xa.call(e,r,n):e.slice(n,n+r.length)===r}});var Sa="".endsWith;Xe(Xe.P+Xe.F*wa("endsWith"),"String",{endsWith:function(t){var e=ja(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=kt(e.length),o=void 0===n?r:Math.min(kt(n),r),i=t+"";return Sa?Sa.call(e,i,o):e.slice(o-i.length,o)===i}});Xe(Xe.P+Xe.F*wa("includes"),"String",{includes:function(t){return!!~ja(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}});var Aa=function(){var t=M(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e},Ma=Object.freeze({default:Aa,__moduleExports:Aa});O&&"g"!=/./g.flags&&T.f(RegExp.prototype,"flags",{configurable:!0,get:Ma&&Aa||Ma});var za=function(t,e,n){var r=ze(t),o=n(Vt,r,""[t]),i=o[0],u=o[1];v(function(){var e={};return e[r]=function(){return 7},7!=""[t](e)})&&(it(String.prototype,t,i),Y(RegExp.prototype,r,2==e?function(t,e){return u.call(t,this,e)}:function(t){return u.call(t,this)}))},Na=Object.freeze({default:za,__moduleExports:za}),Pa=Na&&za||Na;Pa("match",1,function(t,e,n){return[function(n){var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):RegExp(n)[e](r+"")},n]}),Pa("replace",2,function(t,e,n){return[function(r,o){var i=t(this),u=void 0==r?void 0:r[e];return void 0!==u?u.call(r,i,o):n.call(i+"",r,o)},n]}),Pa("split",2,function(t,e,n){var r=ga,o=n,i=[].push;if("".split(/.?/).length){var u=void 0===/()??/.exec("")[1];n=function(t,e){var n=this+"";if(void 0===t&&0===e)return[];if(!r(t))return o.call(n,t,e);var a,c,f,s,l,h=[],d=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),v=0,p=void 0===e?4294967295:e>>>0,y=RegExp(t.source,d+"g");for(u||(a=RegExp("^"+y.source+"$(?!\\s)",d));(c=y.exec(n))&&((f=c.index+c[0].length)<=v||(h.push(n.slice(v,c.index)),!u&&c.length>1&&c[0].replace(a,function(){for(l=1;arguments.length-2>l;l++)void 0===arguments[l]&&(c[l]=void 0)}),c.length>1&&n.length>c.index&&i.apply(h,c.slice(1)),s=c[0].length,v=f,p>h.length));)y.lastIndex===c.index&&y.lastIndex++;return v===n.length?!s&&y.test("")||h.push(""):h.push(n.slice(v)),h.length>p?h.slice(0,p):h}}else 0;return[function(r,o){var i=t(this),u=void 0==r?void 0:r[e];return void 0!==u?u.call(r,i,o):n.call(i+"",r,o)},n]}),Pa("search",1,function(t,e,n){return[function(n){var r=t(this),o=void 0==n?void 0:n[e];return void 0!==o?o.call(n,r):RegExp(n)[e](r+"")},n]});var ka=function(t,e,n){e in t?T.f(t,e,C(0,n)):t[e]=n},La=Object.freeze({default:ka,__moduleExports:ka}),Fa=La&&ka||La;Xe(Xe.S+Xe.F*!Tr(function(t){}),"Array",{from:function(t){var e,n,r,o,i=we(t),u="function"==typeof this?this:Array,a=arguments.length,c=a>1?arguments[1]:void 0,f=void 0!==c,s=0,l=Ir(i);if(f&&(c=ut(c,a>2?arguments[2]:void 0,2)),void 0==l||u==Array&&Fr(l))for(n=new u(e=kt(i.length));e>s;s++)Fa(n,s,f?c(i[s],s):i[s]);else for(o=l.call(i),n=new u;!(r=o.next()).done;s++)Fa(n,s,f?Gr(o,c,[r.value,s],!0):r.value);return n.length=s,n}}),Xe(Xe.S+Xe.F*v(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)Fa(n,t,arguments[t++]);return n.length=e,n}}),Xe(Xe.P,"Array",{copyWithin:Cr}),yr("copyWithin");var Ia=Rr(5),Ra=!0;"find"in[]&&Array(1).find(function(){Ra=!1}),Xe(Xe.P+Xe.F*Ra,"Array",{find:function(t){return Ia(this,t,arguments.length>1?arguments[1]:void 0)}}),yr("find");var Ta=Rr(6),Ca=!0;"findIndex"in[]&&Array(1).findIndex(function(){Ca=!1}),Xe(Xe.P+Xe.F*Ca,"Array",{findIndex:function(t){return Ta(this,t,arguments.length>1?arguments[1]:void 0)}}),yr("findIndex"),Xe(Xe.P,"Array",{fill:Ue}),yr("fill");var Wa=g.isFinite;Xe(Xe.S,"Number",{isFinite:function(t){return"number"==typeof t&&Wa(t)}});var Ua=Math.floor,Ka=function(t){return!f(t)&&isFinite(t)&&Ua(t)===t},Ba=Object.freeze({default:Ka,__moduleExports:Ka}),Da=Ba&&Ka||Ba;Xe(Xe.S,"Number",{isInteger:Da});var Va=Math.abs;Xe(Xe.S,"Number",{isSafeInteger:function(t){return Da(t)&&9007199254740991>=Va(t)}}),Xe(Xe.S,"Number",{isNaN:function(t){return t!=t}}),Xe(Xe.S,"Number",{EPSILON:Math.pow(2,-52)}),Xe(Xe.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991}),Xe(Xe.S,"Number",{MAX_SAFE_INTEGER:9007199254740991});var Ga=Math.log1p||function(t){return(t=+t)>-1e-8&&1e-8>t?t-t*t/2:Math.log(1+t)},Ja=Object.freeze({default:Ga,__moduleExports:Ga}),Ha=Ja&&Ga||Ja,Ya=Math.sqrt,qa=Math.acosh;Xe(Xe.S+Xe.F*!(qa&&710==Math.floor(qa(Number.MAX_VALUE))&&qa(1/0)==1/0),"Math",{acosh:function(t){return 1>(t=+t)?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:Ha(t-1+Ya(t-1)*Ya(t+1))}});var Xa=Math.asinh;Xe(Xe.S+Xe.F*!(Xa&&1/Xa(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?0>e?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}});var $a=Math.atanh;Xe(Xe.S+Xe.F*!($a&&0>1/$a(-0)),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}});var Qa=Math.sign||function(t){return 0==(t=+t)||t!=t?t:0>t?-1:1},Za=Object.freeze({default:Qa,__moduleExports:Qa}),tc=Za&&Qa||Za;Xe(Xe.S,"Math",{cbrt:function(t){return tc(t=+t)*Math.pow(Math.abs(t),1/3)}}),Xe(Xe.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}});var ec=Math.exp;Xe(Xe.S,"Math",{cosh:function(t){return(ec(t=+t)+ec(-t))/2}});var nc=Math.expm1,rc=!nc||nc(10)>22025.465794806718||22025.465794806718>nc(10)||-2e-17!=nc(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&1e-6>t?t+t*t/2:Math.exp(t)-1}:nc,oc=Object.freeze({default:rc,__moduleExports:rc}),ic=oc&&rc||oc;Xe(Xe.S+Xe.F*(ic!=Math.expm1),"Math",{expm1:ic});var uc=Math.pow,ac=uc(2,-52),cc=uc(2,-23),fc=uc(2,127)*(2-cc),sc=uc(2,-126),lc=Math.fround||function(t){var e,n,r=Math.abs(t),o=tc(t);return sc>r?o*(r/sc/cc+1/ac-1/ac)*sc*cc:(n=(e=(1+cc/ac)*r)-(e-r))>fc||n!=n?o*(1/0):o*n},hc=Object.freeze({default:lc,__moduleExports:lc});Xe(Xe.S,"Math",{fround:hc&&lc||hc});var dc=Math.abs;Xe(Xe.S,"Math",{hypot:function(t,e){for(var n,r,o=0,i=0,u=arguments.length,a=0;u>i;)(n=dc(arguments[i++]))>a?(o=o*(r=a/n)*r+1,a=n):o+=n>0?(r=n/a)*r:n;return a===1/0?1/0:a*Math.sqrt(o)}});var vc=Math.imul;Xe(Xe.S+Xe.F*v(function(){return-5!=vc(4294967295,5)||2!=vc.length}),"Math",{imul:function(t,e){var n=+t,r=+e,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}}),Xe(Xe.S,"Math",{log1p:Ha}),Xe(Xe.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}}),Xe(Xe.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}}),Xe(Xe.S,"Math",{sign:tc});var pc=Math.exp;Xe(Xe.S+Xe.F*v(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return 1>Math.abs(t=+t)?(ic(t)-ic(-t))/2:(pc(t-1)-pc(-t-1))*(Math.E/2)}});var yc=Math.exp;Xe(Xe.S,"Math",{tanh:function(t){var e=ic(t=+t),n=ic(-t);return e==1/0?1:n==1/0?-1:(e-n)/(yc(t)+yc(-t))}}),Xe(Xe.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}});var gc=ce(!0);Xe(Xe.P,"Array",{includes:function(t){return gc(this,t,arguments.length>1?arguments[1]:void 0)}}),yr("includes");var _c=zr.f,mc=function(t){return function(e){for(var n,r=$t(e),o=bn(r),i=o.length,u=0,a=[];i>u;)_c.call(r,n=o[u++])&&a.push(t?[n,r[n]]:r[n]);return a}},bc=Object.freeze({default:mc,__moduleExports:mc}),Ec=bc&&mc||bc,Oc=Ec(!1);Xe(Xe.S,"Object",{values:function(t){return Oc(t)}});var jc=Ec(!0);Xe(Xe.S,"Object",{entries:function(t){return jc(t)}}),Xe(Xe.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=$t(t),o=Wr.f,i=ni(r),u={},a=0;i.length>a;)void 0!==(n=o(r,e=i[a++]))&&Fa(u,e,n);return u}});var wc=function(t,e,n,r){var o=Vt(t)+"",i=o.length,u=void 0===n?" ":n+"",a=kt(e);if(i>=a||""==u)return o;var c=a-i,f=da.call(u,Math.ceil(c/u.length));return f.length>c&&(f=f.slice(0,c)),r?f+o:o+f},xc=Object.freeze({default:wc,__moduleExports:wc}),Sc=g.navigator,Ac=Sc&&Sc.userAgent||"",Mc=Object.freeze({default:Ac,__moduleExports:Ac}),zc=xc&&wc||xc,Nc=Mc&&Ac||Mc;Xe(Xe.P+Xe.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(Nc),"String",{padStart:function(t){return zc(this,t,arguments.length>1?arguments[1]:void 0,!0)}}),Xe(Xe.P+Xe.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(Nc),"String",{padEnd:function(t){return zc(this,t,arguments.length>1?arguments[1]:void 0,!1)}});var Pc=[].slice,kc=function(t){return function(e,n){var r=arguments.length>2,o=!!r&&Pc.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,o)}:e,n)}};Xe(Xe.G+Xe.B+Xe.F*/MSIE .\./.test(Nc),{setTimeout:kc(g.setTimeout),setInterval:kc(g.setInterval)}),Xe(Xe.G+Xe.B,{setImmediate:_i.set,clearImmediate:_i.clear});for(var Lc=ze("iterator"),Fc=ze("toStringTag"),Ic=dn.Array,Rc={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},Tc=bn(Rc),Cc=0;Tc.length>Cc;Cc++){var Wc,Uc=Tc[Cc],Kc=Rc[Uc],Bc=g[Uc],Dc=Bc&&Bc.prototype;if(Dc&&(Dc[Lc]||Y(Dc,Lc,Ic),Dc[Fc]||Y(Dc,Fc,Uc),dn[Uc]=Ic,Kc))for(Wc in mr)Dc[Wc]||it(Dc,Wc,mr[Wc],!0)}n(function(t){!function(e){var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},u=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",f=e.regeneratorRuntime;if(f)t.exports=f;else{(f=e.regeneratorRuntime=t.exports).wrap=m;var s="suspendedStart",l="suspendedYield",h="executing",d="completed",v={},p={};p[u]=function(){return this};var y=Object.getPrototypeOf,g=y&&y(y(N([])));g&&g!==r&&o.call(g,u)&&(p=g);var _=j.prototype=E.prototype=Object.create(p);O.prototype=_.constructor=j,j.constructor=O,j[c]=O.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===O||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,j):(t.__proto__=j,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(_),t},f.awrap=function(t){return{__await:t}},w(x.prototype),x.prototype[a]=function(){return this},f.AsyncIterator=x,f.async=function(t,e,n,r){var o=new x(m(t,e,n,r));return f.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},w(_),_[c]="Generator",_[u]=function(){return this},_.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},f.values=N,z.prototype={constructor:z,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(M),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return a.type="throw",a.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],a=u.completion;if("root"===u.tryLoc)return r("end");if(this.prev>=u.tryLoc){var c=o.call(u,"catchLoc"),f=o.call(u,"finallyLoc");if(c&&f){if(u.catchLoc>this.prev)return r(u.catchLoc,!0);if(u.finallyLoc>this.prev)return r(u.finallyLoc)}else if(c){if(u.catchLoc>this.prev)return r(u.catchLoc,!0)}else{if(!f)throw Error("try statement without catch or finally");if(u.finallyLoc>this.prev)return r(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(this.prev>=r.tryLoc&&o.call(r,"finallyLoc")&&r.finallyLoc>this.prev){var i=r;break}}!i||"break"!==t&&"continue"!==t||i.tryLoc>e||e>i.finallyLoc||(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),M(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;M(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:N(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function m(t,e,n,r){var o=Object.create((e&&e.prototype instanceof E?e:E).prototype),i=new z(r||[]);return o._invoke=function(t,e,n){var r=s;return function(o,i){if(r===h)throw Error("Generator is already running");if(r===d){if("throw"===o)throw i;return P()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var a=S(u,n);if(a){if(a===v)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===s)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var c=b(t,e,n);if("normal"===c.type){if(r=n.done?d:l,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=d,n.method="throw",n.arg=c.arg)}}}(t,n,i),o}function b(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function E(){}function O(){}function j(){}function w(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function x(t){function n(e,r,i,u){var a=b(t[e],t,r);if("throw"!==a.type){var c=a.arg,f=c.value;return f&&"object"==typeof f&&o.call(f,"__await")?Promise.resolve(f.__await).then(function(t){n("next",t,i,u)},function(t){n("throw",t,i,u)}):Promise.resolve(f).then(function(t){c.value=t,i(c)},u)}u(a.arg)}var r;"object"==typeof e.process&&e.process.domain&&(n=e.process.domain.bind(n)),this._invoke=function(t,e){function o(){return new Promise(function(r,o){n(t,e,r,o)})}return r=r?r.then(o,o):o()}}function S(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,S(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=b(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function M(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function z(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function N(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:P}}function P(){return{value:n,done:!0}}}("object"==typeof e?e:"object"==typeof window?window:"object"==typeof self?self:e)});var Vc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Gc=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&a.return&&a.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),Jc=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);t.length>e;e++)n[e]=t[e];return n}return Array.from(t)};function Hc(t){return null===t?"null":t!==Object(t)?void 0===t?"undefined":Vc(t):{}.toString.call(t).slice(8,-1).toLowerCase()}function Yc(t){return"string"!==Hc(t)||!t.length}function qc(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments[1],n=arguments[2];if(Yc(t))return!1;var r=t.charCodeAt(0);return r>=e&&n>=r}var Xc={HIRAGANA:"toHiragana",KATAKANA:"toKatakana"},$c={HEPBURN:"hepburn"},Qc={useObsoleteKana:!1,passRomaji:!1,upcaseKatakana:!1,ignoreCase:!1,IMEMode:!1,romanization:$c.HEPBURN},Zc=65,tf=90,ef=12353,nf=12438,rf=12449,of=12540,uf=19968,af=40879,cf=12540,ff=12539,sf=[65377,65381],lf=[[12288,12351],sf,[12539,12540],[65281,65295],[65306,65311],[65339,65343],[65371,65376],[65504,65518]],hf=[].concat([[12352,12447],[12448,12543],sf,[65382,65439]],lf,[[65313,65338],[65345,65370],[65296,65305],[19968,40959],[13312,19903]]),df=[[0,127]].concat([[256,257],[274,275],[298,299],[332,333],[362,363]]),vf=[[32,47],[58,63],[91,96],[123,126]].concat([[8216,8217],[8220,8221]]);function pf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return hf.some(function(e){var n=Gc(e,2);return qc(t,n[0],n[1])})}function yf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments[1],n="regexp"===Hc(e);return!Yc(t)&&[].concat(Jc(t)).every(function(t){var r=pf(t);return n?r||e.test(t):r})}var gf=function(){return Object.assign({},Qc,arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})};function _f(t,e,n){var r=e;function o(t,e){var i=t.charAt(0);return function t(e,r,i,u){if(!r)return n||1===Object.keys(e).length?e[""]?[[i,u,e[""]]]:[]:[[i,u,null]];if(1===Object.keys(e).length)return[[i,u,e[""]]].concat(o(r,u));var a=function(t,e){if(void 0!==t[e])return Object.assign({"":t[""]+e},t[e])}(e,r.charAt(0));if(void 0===a)return[[i,u,e[""]]].concat(o(r,u));return t(a,r.slice(1),i,u+1)}(Object.assign({"":i},r[i]),t.slice(1),e,e+1)}return o(t,0)}function mf(t){return Object.entries(t).reduce(function(t,e){var n=Gc(e,2),r=n[0],o=n[1],i="string"===Hc(o);return t[r]=i?{"":o}:mf(o),t},{})}function bf(t,e){return e.split("").reduce(function(t,e){return void 0===t[e]&&(t[e]={}),t[e]},t)}function Ef(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={};return"object"===Hc(t)&&Object.entries(t).forEach(function(t){var n=Gc(t,2),r=n[1],o=e;n[0].split("").forEach(function(t){void 0===o[t]&&(o[t]={}),o=o[t]}),o[""]=r}),function(t){return function t(e,n){return void 0===e||"string"===Hc(e)?n:Object.entries(n).reduce(function(n,r){var o=Gc(r,2),i=o[0];return n[i]=t(e[i],o[1]),n},e)}(JSON.parse(JSON.stringify(t)),e)}}function Of(t,e){return e?"function"===Hc(e)?e(t):Ef(e)(t):t}var jf={a:"あ",i:"い",u:"う",e:"え",o:"お",k:{a:"か",i:"き",u:"く",e:"け",o:"こ"},s:{a:"さ",i:"し",u:"す",e:"せ",o:"そ"},t:{a:"た",i:"ち",u:"つ",e:"て",o:"と"},n:{a:"な",i:"に",u:"ぬ",e:"ね",o:"の"},h:{a:"は",i:"ひ",u:"ふ",e:"へ",o:"ほ"},m:{a:"ま",i:"み",u:"む",e:"め",o:"も"},y:{a:"や",u:"ゆ",o:"よ"},r:{a:"ら",i:"り",u:"る",e:"れ",o:"ろ"},w:{a:"わ",i:"ゐ",e:"ゑ",o:"を"},g:{a:"が",i:"ぎ",u:"ぐ",e:"げ",o:"ご"},z:{a:"ざ",i:"じ",u:"ず",e:"ぜ",o:"ぞ"},d:{a:"だ",i:"ぢ",u:"づ",e:"で",o:"ど"},b:{a:"ば",i:"び",u:"ぶ",e:"べ",o:"ぼ"},p:{a:"ぱ",i:"ぴ",u:"ぷ",e:"ぺ",o:"ぽ"},v:{a:"ゔぁ",i:"ゔぃ",u:"ゔ",e:"ゔぇ",o:"ゔぉ"}},wf={".":"。",",":"、",":":"：","/":"・","!":"！","?":"？","~":"〜","-":"ー","‘":"「","’":"」","“":"『","”":"』","[":"［","]":"］","(":"（",")":"）","{":"｛","}":"｝"},xf={k:"き",s:"し",t:"ち",n:"に",h:"ひ",m:"み",r:"り",g:"ぎ",z:"じ",d:"ぢ",b:"び",p:"ぴ",v:"ゔ",q:"く",f:"ふ"},Sf={ya:"ゃ",yi:"ぃ",yu:"ゅ",ye:"ぇ",yo:"ょ"},Af={a:"ぁ",i:"ぃ",u:"ぅ",e:"ぇ",o:"ぉ"},Mf={sh:"sy",ch:"ty",cy:"ty",chy:"ty",shy:"sy",j:"zy",jy:"zy",shi:"si",chi:"ti",tsu:"tu",ji:"zi",fu:"hu"},zf=Object.assign({tu:"っ",wa:"ゎ",ka:"ヵ",ke:"ヶ"},Af,Sf),Nf={yi:"い",wu:"う",ye:"いぇ",wi:"うぃ",we:"うぇ",kwa:"くぁ",whu:"う",tha:"てゃ",thu:"てゅ",tho:"てょ",dha:"でゃ",dhu:"でゅ",dho:"でょ"},Pf={wh:"う",qw:"く",q:"く",gw:"ぐ",sw:"す",ts:"つ",th:"て",tw:"と",dh:"で",dw:"ど",fw:"ふ",f:"ふ"};function kf(){var t=mf(jf),e=function(e){return bf(t,e)};return Object.entries(xf).forEach(function(t){var n=Gc(t,2),r=n[0],o=n[1];Object.entries(Sf).forEach(function(t){var n=Gc(t,2),i=n[1];e(r+n[0])[""]=o+i})}),Object.entries(wf).forEach(function(t){var n=Gc(t,2),r=n[1];e(n[0])[""]=r}),Object.entries(Pf).forEach(function(t){var n=Gc(t,2),r=n[0],o=n[1];Object.entries(Af).forEach(function(t){var n=Gc(t,2),i=n[1];e(r+n[0])[""]=o+i})}),["n","n'","xn"].forEach(function(t){e(t)[""]="ん"}),t.c=JSON.parse(JSON.stringify(t.k)),Object.entries(Mf).forEach(function(t){var n=Gc(t,2),r=n[0],o=n[1],i=r.slice(0,r.length-1),u=r.charAt(r.length-1);e(i)[u]=JSON.parse(JSON.stringify(e(o)))}),Object.entries(zf).forEach(function(t){var n,r=Gc(t,2),o=r[0],i=r[1],u=function(t){return t.charAt(t.length-1)},a=function(t){return t.slice(0,t.length-1)},c=e("x"+o);c[""]=i,e("l"+a(o))[u(o)]=c,(n=o,[].concat(Jc(Object.entries(Mf)),[["c","k"]]).reduce(function(t,e){var r=Gc(e,2),o=r[0],i=r[1];return n.startsWith(i)?t.concat(n.replace(i,o)):t},[])).forEach(function(t){["l","x"].forEach(function(n){e(n+a(t))[u(t)]=e(n+o)})})}),Object.entries(Nf).forEach(function(t){var n=Gc(t,2),r=n[1];e(n[0])[""]=r}),[].concat(Jc(Object.keys(xf)),["c","y","w","j"]).forEach(function(e){var n=t[e];n[e]=function t(e){return Object.entries(e).reduce(function(e,n){var r=Gc(n,2),o=r[0],i=r[1];return e[o]=o?t(i):"っ"+i,e},{})}(n)}),delete t.n.n,Object.freeze(JSON.parse(JSON.stringify(t)))}var Lf=null;var Ff=Ef({wi:"ゐ",we:"ゑ"});function If(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&qc(t,Zc,tf)}function Rf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&t.charCodeAt(0)===cf}function Tf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&t.charCodeAt(0)===ff}function Cf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&(!!Rf(t)||qc(t,ef,nf))}function Wf(){var t=[];return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").split("").forEach(function(e){if(Rf(e)||Tf(e))t.push(e);else if(Cf(e)){var n=e.charCodeAt(0)+(rf-ef);t.push(String.fromCharCode(n))}else t.push(e)}),t.join("")}function Uf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2],r=void 0;return n?r=e:n=Bf(r=gf(e)),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];n||(n=Bf(e));return _f(t.toLowerCase(),n,!e.IMEMode)}(t,r,n).map(function(e){var n=Gc(e,3),o=n[0],i=n[1],u=n[2];if(null===u)return t.slice(o);var a=r.IMEMode===Xc.HIRAGANA,c=r.IMEMode===Xc.KATAKANA||[].concat(Jc(t.slice(o,i))).every(If);return a||!c?u:Wf(u)}).join("")}var Kf=null;function Bf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=(null==Lf&&(Lf=kf()),Lf);return e=t.IMEMode?function(t){var e=JSON.parse(JSON.stringify(t));return e.n.n={"":"ん"},e.n[" "]={"":"ん"},e}(e):e,e=t.useObsoleteKana?Ff(e):e,t.customKanaMapping&&(null==Kf&&(Kf=Of(e,t.customKanaMapping)),e=Kf),e}var Df=[];function Vf(t){var e=Object.assign({},gf(t),{IMEMode:t.IMEMode||!0}),n=Bf(e),r=[].concat(Jc(Object.keys(n)),Jc(Object.keys(n).map(function(t){return t.toUpperCase()})));return function(t){var o=t.target;void 0!==o.value&&"true"!==o.dataset.ignoreComposition&&function(t,e,n,r,o){var i=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=void 0,o=void 0,i=void 0;if(0===e&&n.includes(t[0])){var u=function(t,e){return[""].concat(Jc(Jf(t,function(t){return e.includes(t)||!yf(t,/[0-9]/)})))}(t,n),a=Gc(u,3);r=a[0],o=a[1],i=a[2]}else if(e>0){var c=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=Jf([].concat(Jc(t.slice(0,e))).reverse(),function(t){return!yf(t)}),r=Gc(n,2),o=r[0];return[r[1].reverse().join(""),o.split("").reverse().join(""),t.slice(e)]}(t,e),f=Gc(c,3);r=f[0],o=f[1],i=f[2]}else{var s=Jf(t,function(t){return!n.includes(t)}),l=Gc(s,2);r=l[0];var h=Jf(o=l[1],function(t){return!yf(t)}),d=Gc(h,2);o=d[0],i=d[1]}return[r,o,i]}(t.value,t.selectionEnd,r),u=Gc(i,3),a=u[0],c=u[1],f=u[2],s=Uf(c,e,n);if(c!==s){var l=a.length+s.length,h=a+s+f;t.value=h,h,f.length?setTimeout(function(){return t.setSelectionRange(l,l)},1):t.setSelectionRange(l,l)}else t.value}(o,e,n,r)}}function Gf(t){var e=t.type,n=t.target,r=t.data;/Mac/.test(window.navigator&&window.navigator.platform)&&("compositionupdate"===e&&yf(r)&&(n.dataset.ignoreComposition="true"),"compositionend"===e&&(n.dataset.ignoreComposition="false"))}function Jf(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t){return!!t},n=[],r=t.length,o=0;r>o&&e(t[o],o);)n.push(t[o]),o+=1;return[n.join(""),t.slice(o)]}var Hf={input:function(t){var e=t.target;return console.log("input:",{value:e.value,selectionStart:e.selectionStart,selectionEnd:e.selectionEnd})},compositionstart:function(){return console.log("compositionstart")},compositionupdate:function(t){var e=t.target;return console.log("compositionupdate",{data:t.data,value:e.value,selectionStart:e.selectionStart,selectionEnd:e.selectionEnd})},compositionend:function(){return console.log("compositionend")}},Yf=function(t){Object.entries(Hf).forEach(function(e){var n=Gc(e,2);return t.addEventListener(n[0],n[1])})},qf=function(t){Object.entries(Hf).forEach(function(e){var n=Gc(e,2);return t.removeEventListener(n[0],n[1])})},Xf=["TEXTAREA","INPUT"],$f=0,Qf=function(){return $f+=1,""+Date.now()+$f};function Zf(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&df.some(function(e){var n=Gc(e,2);return qc(t,n[0],n[1])})}function ts(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments[1],n="regexp"===Hc(e);return!Yc(t)&&[].concat(Jc(t)).every(function(t){var r=Zf(t);return n?r||e.test(t):r})}function es(){return qc(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",rf,of)}function ns(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&(Cf(t)||es(t))}function rs(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&[].concat(Jc(t)).every(ns)}function os(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&[].concat(Jc(t)).every(Cf)}function is(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&[].concat(Jc(t)).every(es)}function us(){return qc(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",uf,af)}function as(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&[].concat(Jc(t)).every(us)}function cs(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{passKanji:!0},e=[].concat(Jc(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"")),n=!1;return t.passKanji||(n=e.some(as)),(e.some(os)||e.some(is))&&e.some(ts)&&!n}var fs=function(t,e){return Rf(t)&&1>e},ss=function(t,e){return Rf(t)&&e>0},ls=function(t){return["ヶ","ヵ"].includes(t)},hs={a:"あ",i:"い",u:"う",e:"え",o:"う"};function ds(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments[1],n=arguments[2],r="";return t.split("").reduce(function(o,i,u){if(Tf(i)||fs(i,u)||ls(i))return o.concat(i);if(r&&ss(i,u)){var a=e(r).slice(-1);return es(t[u-1])&&"o"===a&&n?o.concat("お"):o.concat(hs[a])}if(!Rf(i)&&es(i)){var c=i.charCodeAt(0)+(ef-rf),f=String.fromCharCode(c);return r=f,o.concat(f)}return r="",o.concat(i)},[]).join("")}var vs=null,ps={"あ":"a","い":"i","う":"u","え":"e","お":"o","か":"ka","き":"ki","く":"ku","け":"ke","こ":"ko","さ":"sa","し":"shi","す":"su","せ":"se","そ":"so","た":"ta","ち":"chi","つ":"tsu","て":"te","と":"to","な":"na","に":"ni","ぬ":"nu","ね":"ne","の":"no","は":"ha","ひ":"hi","ふ":"fu","へ":"he","ほ":"ho","ま":"ma","み":"mi","む":"mu","め":"me","も":"mo","ら":"ra","り":"ri","る":"ru","れ":"re","ろ":"ro","や":"ya","ゆ":"yu","よ":"yo","わ":"wa","ゐ":"wi","ゑ":"we","を":"wo","ん":"n","が":"ga","ぎ":"gi","ぐ":"gu","げ":"ge","ご":"go","ざ":"za","じ":"ji","ず":"zu","ぜ":"ze","ぞ":"zo","だ":"da","ぢ":"ji","づ":"zu","で":"de","ど":"do","ば":"ba","び":"bi","ぶ":"bu","べ":"be","ぼ":"bo","ぱ":"pa","ぴ":"pi","ぷ":"pu","ぺ":"pe","ぽ":"po","ゔぁ":"va","ゔぃ":"vi","ゔ":"vu","ゔぇ":"ve","ゔぉ":"vo"},ys={"。":".","、":",","：":":","・":"/","！":"!","？":"?","〜":"~","ー":"-","「":"‘","」":"’","『":"“","』":"”","［":"[","］":"]","（":"(","）":")","｛":"{","｝":"}","　":" "},gs=["あ","い","う","え","お","や","ゆ","よ"],_s={"ゃ":"ya","ゅ":"yu","ょ":"yo"},ms={"ぃ":"yi","ぇ":"ye"},bs={"ぁ":"a","ぃ":"i","ぅ":"u","ぇ":"e","ぉ":"o"},Es=["き","に","ひ","み","り","ぎ","び","ぴ","ゔ","く","ふ"],Os={"し":"sh","ち":"ch","じ":"j","ぢ":"j"},js={"っ":"","ゃ":"ya","ゅ":"yu","ょ":"yo","ぁ":"a","ぃ":"i","ぅ":"u","ぇ":"e","ぉ":"o"},ws={b:"b",c:"t",d:"d",f:"f",g:"g",h:"h",j:"j",k:"k",m:"m",p:"p",q:"q",r:"r",s:"s",t:"t",v:"v",w:"w",x:"x",z:"z"};function xs(){var t,e,n;return null==vs&&(t=mf(ps),e=function(e){return bf(t,e)},n=function(t,n){e(t)[""]=n},Object.entries(ys).forEach(function(t){var n=Gc(t,2),r=n[1];e(n[0])[""]=r}),[].concat(Jc(Object.entries(_s)),Jc(Object.entries(bs))).forEach(function(t){var e=Gc(t,2);n(e[0],e[1])}),Es.forEach(function(t){var r=e(t)[""][0];Object.entries(_s).forEach(function(e){var o=Gc(e,2);n(t+o[0],r+o[1])}),Object.entries(ms).forEach(function(e){var o=Gc(e,2);n(t+o[0],r+o[1])})}),Object.entries(Os).forEach(function(t){var e=Gc(t,2),r=e[0],o=e[1];Object.entries(_s).forEach(function(t){var e=Gc(t,2);n(r+e[0],o+e[1][1])}),n(r+"ぃ",o+"yi"),n(r+"ぇ",o+"e")}),t["っ"]=function t(e){return Object.entries(e).reduce(function(e,n){var r=Gc(n,2),o=r[0],i=r[1];if(o)e[o]=t(i);else{var u=i.charAt(0);e[o]=Object.keys(ws).includes(u)?ws[u]+i:i}return e},{})}(t),Object.entries(js).forEach(function(t){var e=Gc(t,2);n(e[0],e[1])}),gs.forEach(function(t){n("ん"+t,"n'"+e(t)[""])}),vs=Object.freeze(JSON.parse(JSON.stringify(t)))),vs}function Ss(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=gf(e);return function(t,e){var n=function(t){switch(t.romanization){case $c.HEPBURN:return xs();default:return{}}}(e);e.customRomajiMapping&&(null==As&&(As=Of(n,e.customRomajiMapping)),n=As);return _f(ds(t,Ss,!0),n,!e.IMEMode)}(t,n).map(function(n){var r=Gc(n,3),o=r[2];return e.upcaseKatakana&&is(t.slice(r[0],r[1]))?o.toUpperCase():o}).join("")}var As=null;function Ms(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&vf.some(function(e){var n=Gc(e,2);return qc(t,n[0],n[1])})}function zs(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return!Yc(t)&&lf.some(function(e){var n=Gc(e,2);return qc(t,n[0],n[1])})}var Ns=function(t){return" "===t},Ps=function(t){return"　"===t},ks=function(t){return/[０-９]/.test(t)},Ls=function(t){return/[0-9]/.test(t)},Fs={EN:"en",JA:"ja",EN_NUM:"englishNumeral",JA_NUM:"japaneseNumeral",EN_PUNC:"englishPunctuation",JA_PUNC:"japanesePunctuation",KANJI:"kanji",HIRAGANA:"hiragana",KATAKANA:"katakana",SPACE:"space",OTHER:"other"};function Is(t){var e=Fs.EN,n=Fs.JA,r=Fs.EN_NUM,o=Fs.JA_NUM,i=Fs.EN_PUNC,u=Fs.JA_PUNC,a=Fs.KANJI,c=Fs.HIRAGANA,f=Fs.KATAKANA,s=Fs.SPACE,l=Fs.OTHER;if(arguments.length>1&&void 0!==arguments[1]&&arguments[1])switch(!0){case ks(t):case Ls(t):return l;case Ns(t):return e;case Ms(t):return l;case Ps(t):return n;case zs(t):return l;case pf(t):return n;case Zf(t):return e;default:return l}else switch(!0){case Ps(t):case Ns(t):return s;case ks(t):return o;case Ls(t):return r;case Ms(t):return i;case zs(t):return u;case us(t):return a;case Cf(t):return c;case es(t):return f;case pf(t):return n;case Zf(t):return e;default:return l}}function Rs(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.compact,r=void 0!==n&&n,o=e.detailed,i=void 0!==o&&o;if(null==t||Yc(t))return[];var u=[].concat(Jc(t)),a=u.shift(),c=Is(a,r);return u.reduce(function(t,e){var n=Is(e,r),o=n===c;c=n;var u=e;return o&&(u=(i?t.pop().value:t.pop())+u),t.concat(i?{type:n,value:u}:u)},[a=i?{type:c,value:a}:a])}var Ts=function(t,e){return e&&!rs(t[0])},Cs=function(t,e){return!e&&!rs(t[t.length-1])},Ws=function(t,e){return e&&![].concat(Jc(e)).some(as)||!e&&rs(t)};t.bind=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!Xf.includes(t.nodeName))throw Error("Element provided to Wanakana bind() was not a valid input or textarea element.\n Received: ("+JSON.stringify(t)+")");var r=Vf(e),o=Qf();t.setAttribute("data-wanakana-id",o),t.setAttribute("lang","ja"),t.setAttribute("autoCapitalize","none"),t.setAttribute("autoCorrect","off"),t.setAttribute("autoComplete","off"),t.setAttribute("spellCheck","false"),t.addEventListener("input",r),t.addEventListener("compositionupdate",Gf),t.addEventListener("compositionend",Gf),function(t,e,n){Df=Df.concat({id:t,inputHandler:e,compositionHandler:n})}(o,r,Gf),!0===n&&Yf(t)},t.unbind=function(t){var e,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=(e=t)&&Df.find(function(t){return t.id===e.getAttribute("data-wanakana-id")});if(null==r)throw Error("Element provided to Wanakana unbind() had no listener registered.\n Received: "+JSON.stringify(t));var o,i=r.inputHandler,u=r.compositionHandler;t.removeAttribute("data-wanakana-id"),t.removeAttribute("data-ignore-composition"),t.removeEventListener("input",i),t.removeEventListener("compositionstart",u),t.removeEventListener("compositionupdate",u),t.removeEventListener("compositionend",u),o=r.id,Df=Df.filter(function(t){return t.id!==o}),!0===n&&qf(t)},t.isRomaji=ts,t.isJapanese=yf,t.isKana=rs,t.isHiragana=os,t.isKatakana=is,t.isMixed=cs,t.isKanji=as,t.toRomaji=Ss,t.toKana=Uf,t.toHiragana=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=gf(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{});return e.passRomaji?ds(t,Ss):cs(t,{passKanji:!0})?Uf(ds(t,Ss).toLowerCase(),e):ts(t)||Ms(t)?Uf(t.toLowerCase(),e):ds(t,Ss)},t.toKatakana=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=gf(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{});return e.passRomaji?Wf(t):cs(t)||ts(t)||Ms(t)?Wf(Uf(t.toLowerCase(),e)):Wf(t)},t.stripOkurigana=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.leading,r=void 0!==n&&n,o=e.matchKanji,i=void 0===o?"":o;if(!yf(t)||Ts(t,r)||Cs(t,r)||Ws(t,i))return t;var u=i||t,a=RegExp(r?"^"+Rs(u).shift():Rs(u).pop()+"$");return t.replace(a,"")},t.tokenize=Rs,t.VERSION="4.0.2",t.TO_KANA_METHODS=Xc,t.ROMANIZATIONS=$c,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=wanakana.min.js.map

PureTemplates = function(lln) {

    var obj = {};

    obj.bottomPanelTemplate = `
<div class="lln-bottom-panel" id="lln-bottom-panel" tabindex="100">
    <div id="lln-main-subs">

        <!-- subtitles, controlsm optiond -->

        <div class="debug-info" style="position: absolute; display: none;"></div>

        <div id="lln-sub-view-wrap"><canvas id="lln-sub-view" height="25"></canvas></div>

        <div id="lln-subs-content">

        </div>
            
        <div class="lln-main-right">
            <div class="lln-options-btn tippy" data-tippy-content="${lln_i18n.options}">
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" class="svg" width="28" height="28" viewBox="0 0 512 512" fill="#fff">
                    <path d="M466.895 305.125c-26.863-46.527-10.708-106.152 36.076-133.244l-50.313-87.146c-14.375 8.427-31.088 13.259-48.923 13.259-53.768 0-97.354-43.873-97.354-97.995h-100.629c0.133 16.705-4.037 33.641-12.979 49.126-26.862 46.528-86.578 62.351-133.431 35.379l-50.312 87.146c14.485 8.236 27.025 20.294 35.943 35.739 26.819 46.454 10.756 105.96-35.854 133.112l50.313 87.146c14.325-8.348 30.958-13.127 48.7-13.127 53.598 0 97.072 43.596 97.35 97.479h100.627c-0.043-16.537 4.136-33.285 12.983-48.609 26.818-46.453 86.388-62.297 133.207-35.506l50.313-87.145c-14.39-8.233-26.846-20.249-35.717-35.614zM256 359.666c-57.254 0-103.668-46.412-103.668-103.667 0-57.254 46.413-103.667 103.668-103.667s103.666 46.413 103.666 103.667c-0.001 57.255-46.412 103.667-103.666 103.667z"></path>
                </svg>
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" class="lln-error-icon" width="12" height="12" viewBox="0 0 1024 1024">
                    <path fill="#ff484f" d="M496 112c-229.76 0-416 186.24-416 416s186.24 416 416 416 416-186.24 416-416-186.24-416-416-416zM496 764c-26.528 0-48-21.504-48-48s21.472-48 48-48c26.496 0 48 21.504 48 48s-21.504 48-48 48zM544 556c0 26.496-21.504 48-48 48-26.528 0-48-21.504-48-48v-224c0-26.528 21.472-48 48-48 26.496 0 48 21.472 48 48v224z"></path>
                </svg>
            </div>
            <div class="lln-auto-pause-message tippy" id="autoPause-message" data-tippy-content="${lln_i18n.autoPause_tooltip} [Q]">
                <label>
                    <input type="checkbox" id="autoPause" ${lln.setMan.getAutoPause() ? 'checked' : ''}>
                    <span class="cslider"></span>
                    <span class="lln-label-text">
                        <span class="text">${lln_i18n.autoPause}</span>
                    </span>
                </label>
            </div>
        </div>

    </div>
</div>

    `;

    return obj;

};

Align = function(lln) {

    var obj = {};

    obj.debug = false;

    // I want to pass in an array of objects: { begin: ... , end: ... , text: ... }

    obj.addWords = function() {
/*
        jsonString = `
        {
            "name": "4642367754824225840",
            "metadata": {
              "@type": "type.googleapis.com/google.cloud.speech.v1.LongRunningRecognizeMetadata",
              "progressPercent": 100,
              "startTime": "2019-03-24T02:03:32.048012Z",
              "lastUpdateTime": "2019-03-24T02:21:12.723722Z"
            },
            "done": true,
            "response": {
              "@type": "type.googleapis.com/google.cloud.speech.v1.LongRunningRecognizeResponse",
              "results": [
                {
                  "alternatives": [
                    {
                      "transcript": "scheißen",
                      "confidence": 0.757896,
                      "words": [
                        {
                          "startTime": "72.500s",
                          "endTime": "76s",
                          "word": "scheißen"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Sieben",
                      "confidence": 0.79897565,
                      "words": [
                        {
                          "startTime": "90.200s",
                          "endTime": "92.200s",
                          "word": "Sieben"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Mein habe ich wollte Hardware weit, ich wohne in der arrow.io Lane 308 in 87 104 Albuquerque New Mexico alle Einsatzkräfte, dies ist kein Schuldeingeständnis, ich richte mich jetzt dann meine Familie.",
                      "confidence": 0.88961065,
                      "words": [
                        {
                          "startTime": "100.700s",
                          "endTime": "133.600s",
                          "word": "Mein"
                        },
                        {
                          "startTime": "133.600s",
                          "endTime": "133.800s",
                          "word": "habe"
                        },
                        {
                          "startTime": "133.800s",
                          "endTime": "133.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "133.900s",
                          "endTime": "134.500s",
                          "word": "wollte"
                        },
                        {
                          "startTime": "134.500s",
                          "endTime": "134.900s",
                          "word": "Hardware"
                        },
                        {
                          "startTime": "134.900s",
                          "endTime": "135.100s",
                          "word": "weit,"
                        },
                        {
                          "startTime": "135.100s",
                          "endTime": "135.700s",
                          "word": "ich"
                        },
                        {
                          "startTime": "135.700s",
                          "endTime": "135.900s",
                          "word": "wohne"
                        },
                        {
                          "startTime": "135.900s",
                          "endTime": "136.200s",
                          "word": "in"
                        },
                        {
                          "startTime": "136.200s",
                          "endTime": "136.300s",
                          "word": "der"
                        },
                        {
                          "startTime": "136.300s",
                          "endTime": "137.200s",
                          "word": "arrow.io"
                        },
                        {
                          "startTime": "137.200s",
                          "endTime": "137.600s",
                          "word": "Lane"
                        },
                        {
                          "startTime": "137.600s",
                          "endTime": "137.800s",
                          "word": "308"
                        },
                        {
                          "startTime": "137.800s",
                          "endTime": "138.300s",
                          "word": "in"
                        },
                        {
                          "startTime": "138.300s",
                          "endTime": "138.900s",
                          "word": "87"
                        },
                        {
                          "startTime": "138.900s",
                          "endTime": "139.500s",
                          "word": "104"
                        },
                        {
                          "startTime": "139.500s",
                          "endTime": "140s",
                          "word": "Albuquerque"
                        },
                        {
                          "startTime": "140s",
                          "endTime": "140.400s",
                          "word": "New"
                        },
                        {
                          "startTime": "140.400s",
                          "endTime": "140.500s",
                          "word": "Mexico"
                        },
                        {
                          "startTime": "140.500s",
                          "endTime": "141.600s",
                          "word": "alle"
                        },
                        {
                          "startTime": "141.600s",
                          "endTime": "142.100s",
                          "word": "Einsatzkräfte,"
                        },
                        {
                          "startTime": "142.100s",
                          "endTime": "142.700s",
                          "word": "dies"
                        },
                        {
                          "startTime": "142.700s",
                          "endTime": "142.900s",
                          "word": "ist"
                        },
                        {
                          "startTime": "142.900s",
                          "endTime": "143s",
                          "word": "kein"
                        },
                        {
                          "startTime": "143s",
                          "endTime": "143.300s",
                          "word": "Schuldeingeständnis,"
                        },
                        {
                          "startTime": "143.300s",
                          "endTime": "145.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "145.500s",
                          "endTime": "145.800s",
                          "word": "richte"
                        },
                        {
                          "startTime": "145.800s",
                          "endTime": "145.900s",
                          "word": "mich"
                        },
                        {
                          "startTime": "145.900s",
                          "endTime": "146s",
                          "word": "jetzt"
                        },
                        {
                          "startTime": "146s",
                          "endTime": "146.300s",
                          "word": "dann"
                        },
                        {
                          "startTime": "146.300s",
                          "endTime": "146.500s",
                          "word": "meine"
                        },
                        {
                          "startTime": "146.500s",
                          "endTime": "146.700s",
                          "word": "Familie."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Skyler du bist die Liebe meines Lebens. Ich hoffe, du weißt das und der Georgia du bist bald erwachsen. Es wird gewisse Dinge geben die Dinge die die Du demnächst über mich erfahren wirst, aber du sollst wissen, dass ich dabei immer nur an dich gedacht habe ganz egal wie es aussieht.",
                      "confidence": 0.88917464,
                      "words": [
                        {
                          "startTime": "151s",
                          "endTime": "155.500s",
                          "word": "Skyler"
                        },
                        {
                          "startTime": "155.500s",
                          "endTime": "157.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "157.200s",
                          "endTime": "157.500s",
                          "word": "bist"
                        },
                        {
                          "startTime": "157.500s",
                          "endTime": "157.600s",
                          "word": "die"
                        },
                        {
                          "startTime": "157.600s",
                          "endTime": "157.600s",
                          "word": "Liebe"
                        },
                        {
                          "startTime": "157.600s",
                          "endTime": "158.100s",
                          "word": "meines"
                        },
                        {
                          "startTime": "158.100s",
                          "endTime": "158.700s",
                          "word": "Lebens."
                        },
                        {
                          "startTime": "158.700s",
                          "endTime": "159.700s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "159.700s",
                          "endTime": "159.900s",
                          "word": "hoffe,"
                        },
                        {
                          "startTime": "159.900s",
                          "endTime": "160s",
                          "word": "du"
                        },
                        {
                          "startTime": "160s",
                          "endTime": "160.100s",
                          "word": "weißt"
                        },
                        {
                          "startTime": "160.100s",
                          "endTime": "160.500s",
                          "word": "das"
                        },
                        {
                          "startTime": "160.500s",
                          "endTime": "160.600s",
                          "word": "und"
                        },
                        {
                          "startTime": "160.600s",
                          "endTime": "163.200s",
                          "word": "der"
                        },
                        {
                          "startTime": "163.200s",
                          "endTime": "163.600s",
                          "word": "Georgia"
                        },
                        {
                          "startTime": "163.600s",
                          "endTime": "165.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "165.400s",
                          "endTime": "165.500s",
                          "word": "bist"
                        },
                        {
                          "startTime": "165.500s",
                          "endTime": "165.700s",
                          "word": "bald"
                        },
                        {
                          "startTime": "165.700s",
                          "endTime": "166s",
                          "word": "erwachsen."
                        },
                        {
                          "startTime": "166s",
                          "endTime": "169.600s",
                          "word": "Es"
                        },
                        {
                          "startTime": "169.600s",
                          "endTime": "169.800s",
                          "word": "wird"
                        },
                        {
                          "startTime": "169.800s",
                          "endTime": "170.300s",
                          "word": "gewisse"
                        },
                        {
                          "startTime": "170.300s",
                          "endTime": "170.600s",
                          "word": "Dinge"
                        },
                        {
                          "startTime": "170.600s",
                          "endTime": "171.300s",
                          "word": "geben"
                        },
                        {
                          "startTime": "171.300s",
                          "endTime": "171.500s",
                          "word": "die"
                        },
                        {
                          "startTime": "171.500s",
                          "endTime": "172.600s",
                          "word": "Dinge"
                        },
                        {
                          "startTime": "172.600s",
                          "endTime": "172.800s",
                          "word": "die"
                        },
                        {
                          "startTime": "172.800s",
                          "endTime": "174.100s",
                          "word": "die"
                        },
                        {
                          "startTime": "174.100s",
                          "endTime": "174.200s",
                          "word": "Du"
                        },
                        {
                          "startTime": "174.200s",
                          "endTime": "174.500s",
                          "word": "demnächst"
                        },
                        {
                          "startTime": "174.500s",
                          "endTime": "174.900s",
                          "word": "über"
                        },
                        {
                          "startTime": "174.900s",
                          "endTime": "175s",
                          "word": "mich"
                        },
                        {
                          "startTime": "175s",
                          "endTime": "175.400s",
                          "word": "erfahren"
                        },
                        {
                          "startTime": "175.400s",
                          "endTime": "175.700s",
                          "word": "wirst,"
                        },
                        {
                          "startTime": "175.700s",
                          "endTime": "178.300s",
                          "word": "aber"
                        },
                        {
                          "startTime": "178.300s",
                          "endTime": "178.700s",
                          "word": "du"
                        },
                        {
                          "startTime": "178.700s",
                          "endTime": "178.900s",
                          "word": "sollst"
                        },
                        {
                          "startTime": "178.900s",
                          "endTime": "179s",
                          "word": "wissen,"
                        },
                        {
                          "startTime": "179s",
                          "endTime": "179.500s",
                          "word": "dass"
                        },
                        {
                          "startTime": "179.500s",
                          "endTime": "179.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "179.600s",
                          "endTime": "180s",
                          "word": "dabei"
                        },
                        {
                          "startTime": "180s",
                          "endTime": "180.700s",
                          "word": "immer"
                        },
                        {
                          "startTime": "180.700s",
                          "endTime": "181s",
                          "word": "nur"
                        },
                        {
                          "startTime": "181s",
                          "endTime": "181.300s",
                          "word": "an"
                        },
                        {
                          "startTime": "181.300s",
                          "endTime": "181.500s",
                          "word": "dich"
                        },
                        {
                          "startTime": "181.500s",
                          "endTime": "181.700s",
                          "word": "gedacht"
                        },
                        {
                          "startTime": "181.700s",
                          "endTime": "182s",
                          "word": "habe"
                        },
                        {
                          "startTime": "182s",
                          "endTime": "183.200s",
                          "word": "ganz"
                        },
                        {
                          "startTime": "183.200s",
                          "endTime": "183.400s",
                          "word": "egal"
                        },
                        {
                          "startTime": "183.400s",
                          "endTime": "183.600s",
                          "word": "wie"
                        },
                        {
                          "startTime": "183.600s",
                          "endTime": "183.700s",
                          "word": "es"
                        },
                        {
                          "startTime": "183.700s",
                          "endTime": "184.100s",
                          "word": "aussieht."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Alles Gute zum Geburtstag bist du denn das ist vegetarischer Frühstücksspeck, ob du's glaubst oder nicht? Null Cholesterin und du wirst nicht bei den Unterschied schmecken, dann kommst du heute nach Hause, ich will nicht, dass er dich heute Abend wieder ausnutzt, du wirst bis 5 bezahlt, also arbeite auch bis 5. Nicht länger. Hey, hey, mein Glückwunsch und du bist spät dran schon wieder. Es gab kein heißes Wasser schon jeder darf sich eine einfache Lösung stehe früher auf dann kannst du als erster zum Duschen, ich weiß auch eine Lösung, wie wär's, wenn ihr endlich einen neuen Heißwasserboiler kauft, was hältst du denn davon zum 100.000 mal, hast du dein Echinacea genommen?",
                      "confidence": 0.912565,
                      "words": [
                        {
                          "startTime": "312.600s",
                          "endTime": "315.200s",
                          "word": "Alles"
                        },
                        {
                          "startTime": "315.200s",
                          "endTime": "315.500s",
                          "word": "Gute"
                        },
                        {
                          "startTime": "315.500s",
                          "endTime": "315.600s",
                          "word": "zum"
                        },
                        {
                          "startTime": "315.600s",
                          "endTime": "315.700s",
                          "word": "Geburtstag"
                        },
                        {
                          "startTime": "315.700s",
                          "endTime": "319.500s",
                          "word": "bist"
                        },
                        {
                          "startTime": "319.500s",
                          "endTime": "319.600s",
                          "word": "du"
                        },
                        {
                          "startTime": "319.600s",
                          "endTime": "319.800s",
                          "word": "denn"
                        },
                        {
                          "startTime": "319.800s",
                          "endTime": "319.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "319.900s",
                          "endTime": "321.600s",
                          "word": "ist"
                        },
                        {
                          "startTime": "321.600s",
                          "endTime": "322.200s",
                          "word": "vegetarischer"
                        },
                        {
                          "startTime": "322.200s",
                          "endTime": "323s",
                          "word": "Frühstücksspeck,"
                        },
                        {
                          "startTime": "323s",
                          "endTime": "324.400s",
                          "word": "ob"
                        },
                        {
                          "startTime": "324.400s",
                          "endTime": "324.500s",
                          "word": "du's"
                        },
                        {
                          "startTime": "324.500s",
                          "endTime": "324.600s",
                          "word": "glaubst"
                        },
                        {
                          "startTime": "324.600s",
                          "endTime": "324.900s",
                          "word": "oder"
                        },
                        {
                          "startTime": "324.900s",
                          "endTime": "325s",
                          "word": "nicht?"
                        },
                        {
                          "startTime": "325s",
                          "endTime": "325.400s",
                          "word": "Null"
                        },
                        {
                          "startTime": "325.400s",
                          "endTime": "326s",
                          "word": "Cholesterin"
                        },
                        {
                          "startTime": "326s",
                          "endTime": "326.100s",
                          "word": "und"
                        },
                        {
                          "startTime": "326.100s",
                          "endTime": "326.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "326.200s",
                          "endTime": "326.300s",
                          "word": "wirst"
                        },
                        {
                          "startTime": "326.300s",
                          "endTime": "326.500s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "326.500s",
                          "endTime": "326.600s",
                          "word": "bei"
                        },
                        {
                          "startTime": "326.600s",
                          "endTime": "326.700s",
                          "word": "den"
                        },
                        {
                          "startTime": "326.700s",
                          "endTime": "327.100s",
                          "word": "Unterschied"
                        },
                        {
                          "startTime": "327.100s",
                          "endTime": "327.400s",
                          "word": "schmecken,"
                        },
                        {
                          "startTime": "327.400s",
                          "endTime": "329.700s",
                          "word": "dann"
                        },
                        {
                          "startTime": "329.700s",
                          "endTime": "330.100s",
                          "word": "kommst"
                        },
                        {
                          "startTime": "330.100s",
                          "endTime": "330.100s",
                          "word": "du"
                        },
                        {
                          "startTime": "330.100s",
                          "endTime": "330.200s",
                          "word": "heute"
                        },
                        {
                          "startTime": "330.200s",
                          "endTime": "330.400s",
                          "word": "nach"
                        },
                        {
                          "startTime": "330.400s",
                          "endTime": "330.500s",
                          "word": "Hause,"
                        },
                        {
                          "startTime": "330.500s",
                          "endTime": "332.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "332.500s",
                          "endTime": "332.700s",
                          "word": "will"
                        },
                        {
                          "startTime": "332.700s",
                          "endTime": "332.900s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "332.900s",
                          "endTime": "333s",
                          "word": "dass"
                        },
                        {
                          "startTime": "333s",
                          "endTime": "333.100s",
                          "word": "er"
                        },
                        {
                          "startTime": "333.100s",
                          "endTime": "333.200s",
                          "word": "dich"
                        },
                        {
                          "startTime": "333.200s",
                          "endTime": "333.300s",
                          "word": "heute"
                        },
                        {
                          "startTime": "333.300s",
                          "endTime": "333.700s",
                          "word": "Abend"
                        },
                        {
                          "startTime": "333.700s",
                          "endTime": "333.700s",
                          "word": "wieder"
                        },
                        {
                          "startTime": "333.700s",
                          "endTime": "334.300s",
                          "word": "ausnutzt,"
                        },
                        {
                          "startTime": "334.300s",
                          "endTime": "334.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "334.400s",
                          "endTime": "334.600s",
                          "word": "wirst"
                        },
                        {
                          "startTime": "334.600s",
                          "endTime": "334.700s",
                          "word": "bis"
                        },
                        {
                          "startTime": "334.700s",
                          "endTime": "335s",
                          "word": "5"
                        },
                        {
                          "startTime": "335s",
                          "endTime": "335.400s",
                          "word": "bezahlt,"
                        },
                        {
                          "startTime": "335.400s",
                          "endTime": "335.500s",
                          "word": "also"
                        },
                        {
                          "startTime": "335.500s",
                          "endTime": "335.900s",
                          "word": "arbeite"
                        },
                        {
                          "startTime": "335.900s",
                          "endTime": "336.100s",
                          "word": "auch"
                        },
                        {
                          "startTime": "336.100s",
                          "endTime": "336.100s",
                          "word": "bis"
                        },
                        {
                          "startTime": "336.100s",
                          "endTime": "336.500s",
                          "word": "5."
                        },
                        {
                          "startTime": "336.500s",
                          "endTime": "336.600s",
                          "word": "Nicht"
                        },
                        {
                          "startTime": "336.600s",
                          "endTime": "336.900s",
                          "word": "länger."
                        },
                        {
                          "startTime": "336.900s",
                          "endTime": "340.400s",
                          "word": "Hey,"
                        },
                        {
                          "startTime": "340.400s",
                          "endTime": "342.800s",
                          "word": "hey,"
                        },
                        {
                          "startTime": "342.800s",
                          "endTime": "343.100s",
                          "word": "mein"
                        },
                        {
                          "startTime": "343.100s",
                          "endTime": "343.800s",
                          "word": "Glückwunsch"
                        },
                        {
                          "startTime": "343.800s",
                          "endTime": "344.100s",
                          "word": "und"
                        },
                        {
                          "startTime": "344.100s",
                          "endTime": "344.500s",
                          "word": "du"
                        },
                        {
                          "startTime": "344.500s",
                          "endTime": "344.700s",
                          "word": "bist"
                        },
                        {
                          "startTime": "344.700s",
                          "endTime": "344.900s",
                          "word": "spät"
                        },
                        {
                          "startTime": "344.900s",
                          "endTime": "345s",
                          "word": "dran"
                        },
                        {
                          "startTime": "345s",
                          "endTime": "346.300s",
                          "word": "schon"
                        },
                        {
                          "startTime": "346.300s",
                          "endTime": "346.600s",
                          "word": "wieder."
                        },
                        {
                          "startTime": "346.600s",
                          "endTime": "346.700s",
                          "word": "Es"
                        },
                        {
                          "startTime": "346.700s",
                          "endTime": "347s",
                          "word": "gab"
                        },
                        {
                          "startTime": "347s",
                          "endTime": "347.300s",
                          "word": "kein"
                        },
                        {
                          "startTime": "347.300s",
                          "endTime": "347.700s",
                          "word": "heißes"
                        },
                        {
                          "startTime": "347.700s",
                          "endTime": "347.800s",
                          "word": "Wasser"
                        },
                        {
                          "startTime": "347.800s",
                          "endTime": "349.200s",
                          "word": "schon"
                        },
                        {
                          "startTime": "349.200s",
                          "endTime": "349.600s",
                          "word": "jeder"
                        },
                        {
                          "startTime": "349.600s",
                          "endTime": "349.900s",
                          "word": "darf"
                        },
                        {
                          "startTime": "349.900s",
                          "endTime": "350.100s",
                          "word": "sich"
                        },
                        {
                          "startTime": "350.100s",
                          "endTime": "350.300s",
                          "word": "eine"
                        },
                        {
                          "startTime": "350.300s",
                          "endTime": "350.600s",
                          "word": "einfache"
                        },
                        {
                          "startTime": "350.600s",
                          "endTime": "350.800s",
                          "word": "Lösung"
                        },
                        {
                          "startTime": "350.800s",
                          "endTime": "352.300s",
                          "word": "stehe"
                        },
                        {
                          "startTime": "352.300s",
                          "endTime": "352.600s",
                          "word": "früher"
                        },
                        {
                          "startTime": "352.600s",
                          "endTime": "352.800s",
                          "word": "auf"
                        },
                        {
                          "startTime": "352.800s",
                          "endTime": "354.300s",
                          "word": "dann"
                        },
                        {
                          "startTime": "354.300s",
                          "endTime": "354.500s",
                          "word": "kannst"
                        },
                        {
                          "startTime": "354.500s",
                          "endTime": "354.600s",
                          "word": "du"
                        },
                        {
                          "startTime": "354.600s",
                          "endTime": "354.700s",
                          "word": "als"
                        },
                        {
                          "startTime": "354.700s",
                          "endTime": "355s",
                          "word": "erster"
                        },
                        {
                          "startTime": "355s",
                          "endTime": "355.100s",
                          "word": "zum"
                        },
                        {
                          "startTime": "355.100s",
                          "endTime": "355.500s",
                          "word": "Duschen,"
                        },
                        {
                          "startTime": "355.500s",
                          "endTime": "356.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "356.600s",
                          "endTime": "356.800s",
                          "word": "weiß"
                        },
                        {
                          "startTime": "356.800s",
                          "endTime": "357s",
                          "word": "auch"
                        },
                        {
                          "startTime": "357s",
                          "endTime": "357.300s",
                          "word": "eine"
                        },
                        {
                          "startTime": "357.300s",
                          "endTime": "357.500s",
                          "word": "Lösung,"
                        },
                        {
                          "startTime": "357.500s",
                          "endTime": "360.300s",
                          "word": "wie"
                        },
                        {
                          "startTime": "360.300s",
                          "endTime": "360.700s",
                          "word": "wär's,"
                        },
                        {
                          "startTime": "360.700s",
                          "endTime": "360.800s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "360.800s",
                          "endTime": "360.900s",
                          "word": "ihr"
                        },
                        {
                          "startTime": "360.900s",
                          "endTime": "361.400s",
                          "word": "endlich"
                        },
                        {
                          "startTime": "361.400s",
                          "endTime": "361.700s",
                          "word": "einen"
                        },
                        {
                          "startTime": "361.700s",
                          "endTime": "361.800s",
                          "word": "neuen"
                        },
                        {
                          "startTime": "361.800s",
                          "endTime": "363.200s",
                          "word": "Heißwasserboiler"
                        },
                        {
                          "startTime": "363.200s",
                          "endTime": "363.700s",
                          "word": "kauft,"
                        },
                        {
                          "startTime": "363.700s",
                          "endTime": "364.300s",
                          "word": "was"
                        },
                        {
                          "startTime": "364.300s",
                          "endTime": "364.600s",
                          "word": "hältst"
                        },
                        {
                          "startTime": "364.600s",
                          "endTime": "364.700s",
                          "word": "du"
                        },
                        {
                          "startTime": "364.700s",
                          "endTime": "364.900s",
                          "word": "denn"
                        },
                        {
                          "startTime": "364.900s",
                          "endTime": "364.900s",
                          "word": "davon"
                        },
                        {
                          "startTime": "364.900s",
                          "endTime": "366.300s",
                          "word": "zum"
                        },
                        {
                          "startTime": "366.300s",
                          "endTime": "367s",
                          "word": "100.000"
                        },
                        {
                          "startTime": "367s",
                          "endTime": "367.800s",
                          "word": "mal,"
                        },
                        {
                          "startTime": "367.800s",
                          "endTime": "371.100s",
                          "word": "hast"
                        },
                        {
                          "startTime": "371.100s",
                          "endTime": "371.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "371.200s",
                          "endTime": "371.400s",
                          "word": "dein"
                        },
                        {
                          "startTime": "371.400s",
                          "endTime": "371.900s",
                          "word": "Echinacea"
                        },
                        {
                          "startTime": "371.900s",
                          "endTime": "372.300s",
                          "word": "genommen?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Bist ja auch schon besser, was in aller Welt ist da hey, vegetarische Frühstücksspeck, wie oft noch unseren Cholesterinspiegel, glaube ich, nicht den richtigen Speck nicht dieses dieses pseudo Zeit. Pech gehabt, ist das auf das komische Zeug, das die Pflaster riecht ist das auch und wie ist das, wenn man steinalt ist, wie ist es immer ein Klugscheißer ist?",
                      "confidence": 0.8909258,
                      "words": [
                        {
                          "startTime": "372.500s",
                          "endTime": "373.900s",
                          "word": "Bist"
                        },
                        {
                          "startTime": "373.900s",
                          "endTime": "374s",
                          "word": "ja"
                        },
                        {
                          "startTime": "374s",
                          "endTime": "374.100s",
                          "word": "auch"
                        },
                        {
                          "startTime": "374.100s",
                          "endTime": "374.100s",
                          "word": "schon"
                        },
                        {
                          "startTime": "374.100s",
                          "endTime": "374.500s",
                          "word": "besser,"
                        },
                        {
                          "startTime": "374.500s",
                          "endTime": "376s",
                          "word": "was"
                        },
                        {
                          "startTime": "376s",
                          "endTime": "376.300s",
                          "word": "in"
                        },
                        {
                          "startTime": "376.300s",
                          "endTime": "376.700s",
                          "word": "aller"
                        },
                        {
                          "startTime": "376.700s",
                          "endTime": "376.800s",
                          "word": "Welt"
                        },
                        {
                          "startTime": "376.800s",
                          "endTime": "377.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "377.400s",
                          "endTime": "377.900s",
                          "word": "da"
                        },
                        {
                          "startTime": "377.900s",
                          "endTime": "378.500s",
                          "word": "hey,"
                        },
                        {
                          "startTime": "378.500s",
                          "endTime": "379.500s",
                          "word": "vegetarische"
                        },
                        {
                          "startTime": "379.500s",
                          "endTime": "380.200s",
                          "word": "Frühstücksspeck,"
                        },
                        {
                          "startTime": "380.200s",
                          "endTime": "380.500s",
                          "word": "wie"
                        },
                        {
                          "startTime": "380.500s",
                          "endTime": "380.700s",
                          "word": "oft"
                        },
                        {
                          "startTime": "380.700s",
                          "endTime": "380.800s",
                          "word": "noch"
                        },
                        {
                          "startTime": "380.800s",
                          "endTime": "381.100s",
                          "word": "unseren"
                        },
                        {
                          "startTime": "381.100s",
                          "endTime": "381.700s",
                          "word": "Cholesterinspiegel,"
                        },
                        {
                          "startTime": "381.700s",
                          "endTime": "382.500s",
                          "word": "glaube"
                        },
                        {
                          "startTime": "382.500s",
                          "endTime": "382.600s",
                          "word": "ich,"
                        },
                        {
                          "startTime": "382.600s",
                          "endTime": "383.400s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "383.400s",
                          "endTime": "383.500s",
                          "word": "den"
                        },
                        {
                          "startTime": "383.500s",
                          "endTime": "383.800s",
                          "word": "richtigen"
                        },
                        {
                          "startTime": "383.800s",
                          "endTime": "384.600s",
                          "word": "Speck"
                        },
                        {
                          "startTime": "384.600s",
                          "endTime": "384.800s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "384.800s",
                          "endTime": "385.300s",
                          "word": "dieses"
                        },
                        {
                          "startTime": "385.300s",
                          "endTime": "385.700s",
                          "word": "dieses"
                        },
                        {
                          "startTime": "385.700s",
                          "endTime": "386.200s",
                          "word": "pseudo"
                        },
                        {
                          "startTime": "386.200s",
                          "endTime": "386.500s",
                          "word": "Zeit."
                        },
                        {
                          "startTime": "386.500s",
                          "endTime": "386.800s",
                          "word": "Pech"
                        },
                        {
                          "startTime": "386.800s",
                          "endTime": "387.100s",
                          "word": "gehabt,"
                        },
                        {
                          "startTime": "387.100s",
                          "endTime": "387.900s",
                          "word": "ist"
                        },
                        {
                          "startTime": "387.900s",
                          "endTime": "388s",
                          "word": "das"
                        },
                        {
                          "startTime": "388s",
                          "endTime": "388.200s",
                          "word": "auf"
                        },
                        {
                          "startTime": "388.200s",
                          "endTime": "389.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "389.700s",
                          "endTime": "390.200s",
                          "word": "komische"
                        },
                        {
                          "startTime": "390.200s",
                          "endTime": "390.500s",
                          "word": "Zeug,"
                        },
                        {
                          "startTime": "390.500s",
                          "endTime": "390.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "390.800s",
                          "endTime": "391s",
                          "word": "die"
                        },
                        {
                          "startTime": "391s",
                          "endTime": "391.200s",
                          "word": "Pflaster"
                        },
                        {
                          "startTime": "391.200s",
                          "endTime": "391.900s",
                          "word": "riecht"
                        },
                        {
                          "startTime": "391.900s",
                          "endTime": "392.500s",
                          "word": "ist"
                        },
                        {
                          "startTime": "392.500s",
                          "endTime": "392.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "392.900s",
                          "endTime": "393.300s",
                          "word": "auch"
                        },
                        {
                          "startTime": "393.300s",
                          "endTime": "399s",
                          "word": "und"
                        },
                        {
                          "startTime": "399s",
                          "endTime": "399.100s",
                          "word": "wie"
                        },
                        {
                          "startTime": "399.100s",
                          "endTime": "399.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "399.400s",
                          "endTime": "399.600s",
                          "word": "das,"
                        },
                        {
                          "startTime": "399.600s",
                          "endTime": "400.200s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "400.200s",
                          "endTime": "400.300s",
                          "word": "man"
                        },
                        {
                          "startTime": "400.300s",
                          "endTime": "401s",
                          "word": "steinalt"
                        },
                        {
                          "startTime": "401s",
                          "endTime": "401.200s",
                          "word": "ist,"
                        },
                        {
                          "startTime": "401.200s",
                          "endTime": "401.500s",
                          "word": "wie"
                        },
                        {
                          "startTime": "401.500s",
                          "endTime": "402.100s",
                          "word": "ist"
                        },
                        {
                          "startTime": "402.100s",
                          "endTime": "402.200s",
                          "word": "es"
                        },
                        {
                          "startTime": "402.200s",
                          "endTime": "402.300s",
                          "word": "immer"
                        },
                        {
                          "startTime": "402.300s",
                          "endTime": "402.400s",
                          "word": "ein"
                        },
                        {
                          "startTime": "402.400s",
                          "endTime": "402.700s",
                          "word": "Klugscheißer"
                        },
                        {
                          "startTime": "402.700s",
                          "endTime": "403.100s",
                          "word": "ist?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ist der vegetarischen Speck?",
                      "confidence": 0.79038286,
                      "words": [
                        {
                          "startTime": "405.600s",
                          "endTime": "408s",
                          "word": "Ist"
                        },
                        {
                          "startTime": "408s",
                          "endTime": "408.100s",
                          "word": "der"
                        },
                        {
                          "startTime": "408.100s",
                          "endTime": "408.600s",
                          "word": "vegetarischen"
                        },
                        {
                          "startTime": "408.600s",
                          "endTime": "408.800s",
                          "word": "Speck?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Jetzt eh alles klar gut, bis dann. Bis dann. Jimmy, das ist die Lehre von",
                      "confidence": 0.8429059,
                      "words": [
                        {
                          "startTime": "412.700s",
                          "endTime": "428.800s",
                          "word": "Jetzt"
                        },
                        {
                          "startTime": "428.800s",
                          "endTime": "429.100s",
                          "word": "eh"
                        },
                        {
                          "startTime": "429.100s",
                          "endTime": "429.500s",
                          "word": "alles"
                        },
                        {
                          "startTime": "429.500s",
                          "endTime": "429.900s",
                          "word": "klar"
                        },
                        {
                          "startTime": "429.900s",
                          "endTime": "430.800s",
                          "word": "gut,"
                        },
                        {
                          "startTime": "430.800s",
                          "endTime": "430.900s",
                          "word": "bis"
                        },
                        {
                          "startTime": "430.900s",
                          "endTime": "431s",
                          "word": "dann."
                        },
                        {
                          "startTime": "431s",
                          "endTime": "431.800s",
                          "word": "Bis"
                        },
                        {
                          "startTime": "431.800s",
                          "endTime": "431.900s",
                          "word": "dann."
                        },
                        {
                          "startTime": "431.900s",
                          "endTime": "437.200s",
                          "word": "Jimmy,"
                        },
                        {
                          "startTime": "437.200s",
                          "endTime": "438.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "438.900s",
                          "endTime": "439.100s",
                          "word": "ist"
                        },
                        {
                          "startTime": "439.100s",
                          "endTime": "439.200s",
                          "word": "die"
                        },
                        {
                          "startTime": "439.200s",
                          "endTime": "439.400s",
                          "word": "Lehre"
                        },
                        {
                          "startTime": "439.400s",
                          "endTime": "439.800s",
                          "word": "von"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Keine",
                      "confidence": 0.806964,
                      "words": [
                        {
                          "startTime": "442.600s",
                          "endTime": "443.300s",
                          "word": "Keine"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Chemikalien Chemikalien",
                      "confidence": 0.9190642,
                      "words": [
                        {
                          "startTime": "447s",
                          "endTime": "448s",
                          "word": "Chemikalien"
                        },
                        {
                          "startTime": "448s",
                          "endTime": "449s",
                          "word": "Chemikalien"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Na, Chemie ist.",
                      "confidence": 0.6530225,
                      "words": [
                        {
                          "startTime": "450.200s",
                          "endTime": "450.600s",
                          "word": "Na,"
                        },
                        {
                          "startTime": "450.600s",
                          "endTime": "450.700s",
                          "word": "Chemie"
                        },
                        {
                          "startTime": "450.700s",
                          "endTime": "453.500s",
                          "word": "ist."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Also streng genommen ist die Chemie die Lehre von den Stoffen, aber ich sehe sie lieber als die Lehre von der Umwandlung von Stoffen überlegt euch mal folgendes Elektronen verändern, ihre Energiezustände Moleküle Moleküle verändern. Ihre Binz Elemente schließen sich zusammen und werden zu chemischen Verbindungen das ist das ist das Prinzip des Lebens nicht wahr. Es ist es ist der immerwährende Kreislauf, es ist die Vereinigung und die Auflösung und das immer und immer wieder es ist Wachstum und Zerfall und dann die Verwandlung. Es ist faszinierend wirklich stimmt mit deinem Tisch irgendwas nicht.",
                      "confidence": 0.9069516,
                      "words": [
                        {
                          "startTime": "454.800s",
                          "endTime": "455.300s",
                          "word": "Also"
                        },
                        {
                          "startTime": "455.300s",
                          "endTime": "455.700s",
                          "word": "streng"
                        },
                        {
                          "startTime": "455.700s",
                          "endTime": "455.900s",
                          "word": "genommen"
                        },
                        {
                          "startTime": "455.900s",
                          "endTime": "456.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "456.400s",
                          "endTime": "457.300s",
                          "word": "die"
                        },
                        {
                          "startTime": "457.300s",
                          "endTime": "457.600s",
                          "word": "Chemie"
                        },
                        {
                          "startTime": "457.600s",
                          "endTime": "457.900s",
                          "word": "die"
                        },
                        {
                          "startTime": "457.900s",
                          "endTime": "458.300s",
                          "word": "Lehre"
                        },
                        {
                          "startTime": "458.300s",
                          "endTime": "458.500s",
                          "word": "von"
                        },
                        {
                          "startTime": "458.500s",
                          "endTime": "458.800s",
                          "word": "den"
                        },
                        {
                          "startTime": "458.800s",
                          "endTime": "458.900s",
                          "word": "Stoffen,"
                        },
                        {
                          "startTime": "458.900s",
                          "endTime": "460.800s",
                          "word": "aber"
                        },
                        {
                          "startTime": "460.800s",
                          "endTime": "461s",
                          "word": "ich"
                        },
                        {
                          "startTime": "461s",
                          "endTime": "461.200s",
                          "word": "sehe"
                        },
                        {
                          "startTime": "461.200s",
                          "endTime": "461.300s",
                          "word": "sie"
                        },
                        {
                          "startTime": "461.300s",
                          "endTime": "461.600s",
                          "word": "lieber"
                        },
                        {
                          "startTime": "461.600s",
                          "endTime": "461.800s",
                          "word": "als"
                        },
                        {
                          "startTime": "461.800s",
                          "endTime": "462s",
                          "word": "die"
                        },
                        {
                          "startTime": "462s",
                          "endTime": "462.200s",
                          "word": "Lehre"
                        },
                        {
                          "startTime": "462.200s",
                          "endTime": "462.400s",
                          "word": "von"
                        },
                        {
                          "startTime": "462.400s",
                          "endTime": "462.700s",
                          "word": "der"
                        },
                        {
                          "startTime": "462.700s",
                          "endTime": "463.800s",
                          "word": "Umwandlung"
                        },
                        {
                          "startTime": "463.800s",
                          "endTime": "464s",
                          "word": "von"
                        },
                        {
                          "startTime": "464s",
                          "endTime": "464.500s",
                          "word": "Stoffen"
                        },
                        {
                          "startTime": "464.500s",
                          "endTime": "465.600s",
                          "word": "überlegt"
                        },
                        {
                          "startTime": "465.600s",
                          "endTime": "465.600s",
                          "word": "euch"
                        },
                        {
                          "startTime": "465.600s",
                          "endTime": "465.700s",
                          "word": "mal"
                        },
                        {
                          "startTime": "465.700s",
                          "endTime": "466.200s",
                          "word": "folgendes"
                        },
                        {
                          "startTime": "466.200s",
                          "endTime": "467.500s",
                          "word": "Elektronen"
                        },
                        {
                          "startTime": "467.500s",
                          "endTime": "469.200s",
                          "word": "verändern,"
                        },
                        {
                          "startTime": "469.200s",
                          "endTime": "471.200s",
                          "word": "ihre"
                        },
                        {
                          "startTime": "471.200s",
                          "endTime": "472.100s",
                          "word": "Energiezustände"
                        },
                        {
                          "startTime": "472.100s",
                          "endTime": "473.500s",
                          "word": "Moleküle"
                        },
                        {
                          "startTime": "473.500s",
                          "endTime": "475.100s",
                          "word": "Moleküle"
                        },
                        {
                          "startTime": "475.100s",
                          "endTime": "475.800s",
                          "word": "verändern."
                        },
                        {
                          "startTime": "475.800s",
                          "endTime": "476s",
                          "word": "Ihre"
                        },
                        {
                          "startTime": "476s",
                          "endTime": "476.400s",
                          "word": "Binz"
                        },
                        {
                          "startTime": "476.400s",
                          "endTime": "478.900s",
                          "word": "Elemente"
                        },
                        {
                          "startTime": "478.900s",
                          "endTime": "479.200s",
                          "word": "schließen"
                        },
                        {
                          "startTime": "479.200s",
                          "endTime": "479.300s",
                          "word": "sich"
                        },
                        {
                          "startTime": "479.300s",
                          "endTime": "479.500s",
                          "word": "zusammen"
                        },
                        {
                          "startTime": "479.500s",
                          "endTime": "479.900s",
                          "word": "und"
                        },
                        {
                          "startTime": "479.900s",
                          "endTime": "480.200s",
                          "word": "werden"
                        },
                        {
                          "startTime": "480.200s",
                          "endTime": "480.400s",
                          "word": "zu"
                        },
                        {
                          "startTime": "480.400s",
                          "endTime": "480.700s",
                          "word": "chemischen"
                        },
                        {
                          "startTime": "480.700s",
                          "endTime": "481.600s",
                          "word": "Verbindungen"
                        },
                        {
                          "startTime": "481.600s",
                          "endTime": "483.100s",
                          "word": "das"
                        },
                        {
                          "startTime": "483.100s",
                          "endTime": "483.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "483.400s",
                          "endTime": "484.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "484.400s",
                          "endTime": "484.500s",
                          "word": "ist"
                        },
                        {
                          "startTime": "484.500s",
                          "endTime": "484.600s",
                          "word": "das"
                        },
                        {
                          "startTime": "484.600s",
                          "endTime": "484.800s",
                          "word": "Prinzip"
                        },
                        {
                          "startTime": "484.800s",
                          "endTime": "485.100s",
                          "word": "des"
                        },
                        {
                          "startTime": "485.100s",
                          "endTime": "485.500s",
                          "word": "Lebens"
                        },
                        {
                          "startTime": "485.500s",
                          "endTime": "485.800s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "485.800s",
                          "endTime": "485.900s",
                          "word": "wahr."
                        },
                        {
                          "startTime": "485.900s",
                          "endTime": "486s",
                          "word": "Es"
                        },
                        {
                          "startTime": "486s",
                          "endTime": "486.100s",
                          "word": "ist"
                        },
                        {
                          "startTime": "486.100s",
                          "endTime": "486.400s",
                          "word": "es"
                        },
                        {
                          "startTime": "486.400s",
                          "endTime": "486.600s",
                          "word": "ist"
                        },
                        {
                          "startTime": "486.600s",
                          "endTime": "487.300s",
                          "word": "der"
                        },
                        {
                          "startTime": "487.300s",
                          "endTime": "488.100s",
                          "word": "immerwährende"
                        },
                        {
                          "startTime": "488.100s",
                          "endTime": "488.600s",
                          "word": "Kreislauf,"
                        },
                        {
                          "startTime": "488.600s",
                          "endTime": "488.800s",
                          "word": "es"
                        },
                        {
                          "startTime": "488.800s",
                          "endTime": "489.200s",
                          "word": "ist"
                        },
                        {
                          "startTime": "489.200s",
                          "endTime": "489.500s",
                          "word": "die"
                        },
                        {
                          "startTime": "489.500s",
                          "endTime": "490.200s",
                          "word": "Vereinigung"
                        },
                        {
                          "startTime": "490.200s",
                          "endTime": "490.500s",
                          "word": "und"
                        },
                        {
                          "startTime": "490.500s",
                          "endTime": "490.600s",
                          "word": "die"
                        },
                        {
                          "startTime": "490.600s",
                          "endTime": "491.100s",
                          "word": "Auflösung"
                        },
                        {
                          "startTime": "491.100s",
                          "endTime": "491.700s",
                          "word": "und"
                        },
                        {
                          "startTime": "491.700s",
                          "endTime": "491.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "491.800s",
                          "endTime": "492.200s",
                          "word": "immer"
                        },
                        {
                          "startTime": "492.200s",
                          "endTime": "492.200s",
                          "word": "und"
                        },
                        {
                          "startTime": "492.200s",
                          "endTime": "492.500s",
                          "word": "immer"
                        },
                        {
                          "startTime": "492.500s",
                          "endTime": "492.900s",
                          "word": "wieder"
                        },
                        {
                          "startTime": "492.900s",
                          "endTime": "493.600s",
                          "word": "es"
                        },
                        {
                          "startTime": "493.600s",
                          "endTime": "493.800s",
                          "word": "ist"
                        },
                        {
                          "startTime": "493.800s",
                          "endTime": "495s",
                          "word": "Wachstum"
                        },
                        {
                          "startTime": "495s",
                          "endTime": "495.500s",
                          "word": "und"
                        },
                        {
                          "startTime": "495.500s",
                          "endTime": "496.100s",
                          "word": "Zerfall"
                        },
                        {
                          "startTime": "496.100s",
                          "endTime": "496.200s",
                          "word": "und"
                        },
                        {
                          "startTime": "496.200s",
                          "endTime": "496.500s",
                          "word": "dann"
                        },
                        {
                          "startTime": "496.500s",
                          "endTime": "496.700s",
                          "word": "die"
                        },
                        {
                          "startTime": "496.700s",
                          "endTime": "497.300s",
                          "word": "Verwandlung."
                        },
                        {
                          "startTime": "497.300s",
                          "endTime": "501.200s",
                          "word": "Es"
                        },
                        {
                          "startTime": "501.200s",
                          "endTime": "501.500s",
                          "word": "ist"
                        },
                        {
                          "startTime": "501.500s",
                          "endTime": "502s",
                          "word": "faszinierend"
                        },
                        {
                          "startTime": "502s",
                          "endTime": "503.400s",
                          "word": "wirklich"
                        },
                        {
                          "startTime": "503.400s",
                          "endTime": "513.200s",
                          "word": "stimmt"
                        },
                        {
                          "startTime": "513.200s",
                          "endTime": "513.300s",
                          "word": "mit"
                        },
                        {
                          "startTime": "513.300s",
                          "endTime": "513.500s",
                          "word": "deinem"
                        },
                        {
                          "startTime": "513.500s",
                          "endTime": "513.600s",
                          "word": "Tisch"
                        },
                        {
                          "startTime": "513.600s",
                          "endTime": "514.100s",
                          "word": "irgendwas"
                        },
                        {
                          "startTime": "514.100s",
                          "endTime": "514.500s",
                          "word": "nicht."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Also Ionenbindung, wie bist du fertig Ionenbindungen Kapitel 6?",
                      "confidence": 0.8852153,
                      "words": [
                        {
                          "startTime": "515.800s",
                          "endTime": "518.100s",
                          "word": "Also"
                        },
                        {
                          "startTime": "518.100s",
                          "endTime": "519.900s",
                          "word": "Ionenbindung,"
                        },
                        {
                          "startTime": "519.900s",
                          "endTime": "520.700s",
                          "word": "wie"
                        },
                        {
                          "startTime": "520.700s",
                          "endTime": "530.100s",
                          "word": "bist"
                        },
                        {
                          "startTime": "530.100s",
                          "endTime": "530.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "530.200s",
                          "endTime": "530.500s",
                          "word": "fertig"
                        },
                        {
                          "startTime": "530.500s",
                          "endTime": "534.800s",
                          "word": "Ionenbindungen"
                        },
                        {
                          "startTime": "534.800s",
                          "endTime": "536.100s",
                          "word": "Kapitel"
                        },
                        {
                          "startTime": "536.100s",
                          "endTime": "536.400s",
                          "word": "6?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " 819 und 120 PS überlegt, das geben Sie bitte dem Autowäsche, dann kommen sie wieder emoji, also kommt nicht, er hat gekündigt.",
                      "confidence": 0.86476743,
                      "words": [
                        {
                          "startTime": "548.200s",
                          "endTime": "550s",
                          "word": "819"
                        },
                        {
                          "startTime": "550s",
                          "endTime": "550.200s",
                          "word": "und"
                        },
                        {
                          "startTime": "550.200s",
                          "endTime": "551.400s",
                          "word": "120"
                        },
                        {
                          "startTime": "551.400s",
                          "endTime": "552.200s",
                          "word": "PS"
                        },
                        {
                          "startTime": "552.200s",
                          "endTime": "553s",
                          "word": "überlegt,"
                        },
                        {
                          "startTime": "553s",
                          "endTime": "553.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "553.400s",
                          "endTime": "553.700s",
                          "word": "geben"
                        },
                        {
                          "startTime": "553.700s",
                          "endTime": "553.800s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "553.800s",
                          "endTime": "553.900s",
                          "word": "bitte"
                        },
                        {
                          "startTime": "553.900s",
                          "endTime": "554.200s",
                          "word": "dem"
                        },
                        {
                          "startTime": "554.200s",
                          "endTime": "554.800s",
                          "word": "Autowäsche,"
                        },
                        {
                          "startTime": "554.800s",
                          "endTime": "555.100s",
                          "word": "dann"
                        },
                        {
                          "startTime": "555.100s",
                          "endTime": "556.200s",
                          "word": "kommen"
                        },
                        {
                          "startTime": "556.200s",
                          "endTime": "556.300s",
                          "word": "sie"
                        },
                        {
                          "startTime": "556.300s",
                          "endTime": "556.300s",
                          "word": "wieder"
                        },
                        {
                          "startTime": "556.300s",
                          "endTime": "561.100s",
                          "word": "emoji,"
                        },
                        {
                          "startTime": "561.100s",
                          "endTime": "569.400s",
                          "word": "also"
                        },
                        {
                          "startTime": "569.400s",
                          "endTime": "570s",
                          "word": "kommt"
                        },
                        {
                          "startTime": "570s",
                          "endTime": "570.200s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "570.200s",
                          "endTime": "570.800s",
                          "word": "er"
                        },
                        {
                          "startTime": "570.800s",
                          "endTime": "570.900s",
                          "word": "hat"
                        },
                        {
                          "startTime": "570.900s",
                          "endTime": "571.500s",
                          "word": "gekündigt."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ich mache dickers Bogdan nein, wir hatten darüber geredet, aber ich habe zu wenig Leute, was soll ich machen wollte.",
                      "confidence": 0.89824855,
                      "words": [
                        {
                          "startTime": "572.800s",
                          "endTime": "573.200s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "573.200s",
                          "endTime": "573.400s",
                          "word": "mache"
                        },
                        {
                          "startTime": "573.400s",
                          "endTime": "573.700s",
                          "word": "dickers"
                        },
                        {
                          "startTime": "573.700s",
                          "endTime": "575.500s",
                          "word": "Bogdan"
                        },
                        {
                          "startTime": "575.500s",
                          "endTime": "575.900s",
                          "word": "nein,"
                        },
                        {
                          "startTime": "575.900s",
                          "endTime": "576.600s",
                          "word": "wir"
                        },
                        {
                          "startTime": "576.600s",
                          "endTime": "576.700s",
                          "word": "hatten"
                        },
                        {
                          "startTime": "576.700s",
                          "endTime": "577s",
                          "word": "darüber"
                        },
                        {
                          "startTime": "577s",
                          "endTime": "577.500s",
                          "word": "geredet,"
                        },
                        {
                          "startTime": "577.500s",
                          "endTime": "577.700s",
                          "word": "aber"
                        },
                        {
                          "startTime": "577.700s",
                          "endTime": "577.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "577.900s",
                          "endTime": "578.200s",
                          "word": "habe"
                        },
                        {
                          "startTime": "578.200s",
                          "endTime": "578.300s",
                          "word": "zu"
                        },
                        {
                          "startTime": "578.300s",
                          "endTime": "578.400s",
                          "word": "wenig"
                        },
                        {
                          "startTime": "578.400s",
                          "endTime": "578.700s",
                          "word": "Leute,"
                        },
                        {
                          "startTime": "578.700s",
                          "endTime": "579.400s",
                          "word": "was"
                        },
                        {
                          "startTime": "579.400s",
                          "endTime": "579.600s",
                          "word": "soll"
                        },
                        {
                          "startTime": "579.600s",
                          "endTime": "579.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "579.600s",
                          "endTime": "580s",
                          "word": "machen"
                        },
                        {
                          "startTime": "580s",
                          "endTime": "583.500s",
                          "word": "wollte."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Was soll ich denn machen?",
                      "confidence": 0.91341203,
                      "words": [
                        {
                          "startTime": "584.200s",
                          "endTime": "586.400s",
                          "word": "Was"
                        },
                        {
                          "startTime": "586.400s",
                          "endTime": "586.600s",
                          "word": "soll"
                        },
                        {
                          "startTime": "586.600s",
                          "endTime": "586.700s",
                          "word": "ich"
                        },
                        {
                          "startTime": "586.700s",
                          "endTime": "586.900s",
                          "word": "denn"
                        },
                        {
                          "startTime": "586.900s",
                          "endTime": "587.100s",
                          "word": "machen?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Hey Mister schön blitzblank mal wieder ne, ich hasse das Netz. Herzlichen Glückwunsch Schatz. Bin spät dran doch ehrlich Skyla, du bist flach wie ein Bügelbrett.",
                      "confidence": 0.8859332,
                      "words": [
                        {
                          "startTime": "597s",
                          "endTime": "608.600s",
                          "word": "Hey"
                        },
                        {
                          "startTime": "608.600s",
                          "endTime": "608.900s",
                          "word": "Mister"
                        },
                        {
                          "startTime": "608.900s",
                          "endTime": "611.500s",
                          "word": "schön"
                        },
                        {
                          "startTime": "611.500s",
                          "endTime": "612.100s",
                          "word": "blitzblank"
                        },
                        {
                          "startTime": "612.100s",
                          "endTime": "612.300s",
                          "word": "mal"
                        },
                        {
                          "startTime": "612.300s",
                          "endTime": "612.500s",
                          "word": "wieder"
                        },
                        {
                          "startTime": "612.500s",
                          "endTime": "612.600s",
                          "word": "ne,"
                        },
                        {
                          "startTime": "612.600s",
                          "endTime": "613.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "613.500s",
                          "endTime": "613.800s",
                          "word": "hasse"
                        },
                        {
                          "startTime": "613.800s",
                          "endTime": "614.100s",
                          "word": "das"
                        },
                        {
                          "startTime": "614.100s",
                          "endTime": "614.200s",
                          "word": "Netz."
                        },
                        {
                          "startTime": "614.200s",
                          "endTime": "642s",
                          "word": "Herzlichen"
                        },
                        {
                          "startTime": "642s",
                          "endTime": "647.400s",
                          "word": "Glückwunsch"
                        },
                        {
                          "startTime": "647.400s",
                          "endTime": "647.600s",
                          "word": "Schatz."
                        },
                        {
                          "startTime": "647.600s",
                          "endTime": "650.400s",
                          "word": "Bin"
                        },
                        {
                          "startTime": "650.400s",
                          "endTime": "650.800s",
                          "word": "spät"
                        },
                        {
                          "startTime": "650.800s",
                          "endTime": "650.900s",
                          "word": "dran"
                        },
                        {
                          "startTime": "650.900s",
                          "endTime": "653.300s",
                          "word": "doch"
                        },
                        {
                          "startTime": "653.300s",
                          "endTime": "653.800s",
                          "word": "ehrlich"
                        },
                        {
                          "startTime": "653.800s",
                          "endTime": "654.300s",
                          "word": "Skyla,"
                        },
                        {
                          "startTime": "654.300s",
                          "endTime": "655.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "655.200s",
                          "endTime": "655.500s",
                          "word": "bist"
                        },
                        {
                          "startTime": "655.500s",
                          "endTime": "655.700s",
                          "word": "flach"
                        },
                        {
                          "startTime": "655.700s",
                          "endTime": "655.800s",
                          "word": "wie"
                        },
                        {
                          "startTime": "655.800s",
                          "endTime": "656s",
                          "word": "ein"
                        },
                        {
                          "startTime": "656s",
                          "endTime": "656.400s",
                          "word": "Bügelbrett."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Siehst fantastisch aus, man sieht sie überhaupt nicht an, ich sagte doch schon ein bisschen Carmen, das ist meine Schwester Mary heute Michael Glock 22 habe ich für den Alltag, denn wenn man keine hochgeschwindigkeits Patronen verwendet, kann man die 9mm vergessen, ich habe mal gesehen, wie so eine von der Windschutzscheibe abgeprallt es ja, wenn du siehst du schon eine Waffe dann eine die was taugt Kaliber 40 ein scharfes Gerät, dead sie sie dir mal an. Ja, ich sehe dich. Komm nimm sie ja ganz schön schwer. Heidi beißt dich schon nicht. Siehst aus wie Keith Richards mit einem Glas warme Milch passt passt auch passt auch wir trinken wir trinken.",
                      "confidence": 0.9041561,
                      "words": [
                        {
                          "startTime": "657s",
                          "endTime": "658.500s",
                          "word": "Siehst"
                        },
                        {
                          "startTime": "658.500s",
                          "endTime": "658.700s",
                          "word": "fantastisch"
                        },
                        {
                          "startTime": "658.700s",
                          "endTime": "659.100s",
                          "word": "aus,"
                        },
                        {
                          "startTime": "659.100s",
                          "endTime": "659.900s",
                          "word": "man"
                        },
                        {
                          "startTime": "659.900s",
                          "endTime": "659.900s",
                          "word": "sieht"
                        },
                        {
                          "startTime": "659.900s",
                          "endTime": "660.200s",
                          "word": "sie"
                        },
                        {
                          "startTime": "660.200s",
                          "endTime": "660.600s",
                          "word": "überhaupt"
                        },
                        {
                          "startTime": "660.600s",
                          "endTime": "660.700s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "660.700s",
                          "endTime": "660.900s",
                          "word": "an,"
                        },
                        {
                          "startTime": "660.900s",
                          "endTime": "661s",
                          "word": "ich"
                        },
                        {
                          "startTime": "661s",
                          "endTime": "661.400s",
                          "word": "sagte"
                        },
                        {
                          "startTime": "661.400s",
                          "endTime": "661.700s",
                          "word": "doch"
                        },
                        {
                          "startTime": "661.700s",
                          "endTime": "661.900s",
                          "word": "schon"
                        },
                        {
                          "startTime": "661.900s",
                          "endTime": "662.100s",
                          "word": "ein"
                        },
                        {
                          "startTime": "662.100s",
                          "endTime": "662.300s",
                          "word": "bisschen"
                        },
                        {
                          "startTime": "662.300s",
                          "endTime": "665.200s",
                          "word": "Carmen,"
                        },
                        {
                          "startTime": "665.200s",
                          "endTime": "665.300s",
                          "word": "das"
                        },
                        {
                          "startTime": "665.300s",
                          "endTime": "665.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "665.400s",
                          "endTime": "665.700s",
                          "word": "meine"
                        },
                        {
                          "startTime": "665.700s",
                          "endTime": "665.800s",
                          "word": "Schwester"
                        },
                        {
                          "startTime": "665.800s",
                          "endTime": "666.300s",
                          "word": "Mary"
                        },
                        {
                          "startTime": "666.300s",
                          "endTime": "668.100s",
                          "word": "heute"
                        },
                        {
                          "startTime": "668.100s",
                          "endTime": "668.700s",
                          "word": "Michael"
                        },
                        {
                          "startTime": "668.700s",
                          "endTime": "671.200s",
                          "word": "Glock"
                        },
                        {
                          "startTime": "671.200s",
                          "endTime": "672s",
                          "word": "22"
                        },
                        {
                          "startTime": "672s",
                          "endTime": "672.400s",
                          "word": "habe"
                        },
                        {
                          "startTime": "672.400s",
                          "endTime": "672.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "672.400s",
                          "endTime": "672.500s",
                          "word": "für"
                        },
                        {
                          "startTime": "672.500s",
                          "endTime": "672.600s",
                          "word": "den"
                        },
                        {
                          "startTime": "672.600s",
                          "endTime": "672.800s",
                          "word": "Alltag,"
                        },
                        {
                          "startTime": "672.800s",
                          "endTime": "673.700s",
                          "word": "denn"
                        },
                        {
                          "startTime": "673.700s",
                          "endTime": "673.900s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "673.900s",
                          "endTime": "674.100s",
                          "word": "man"
                        },
                        {
                          "startTime": "674.100s",
                          "endTime": "674.200s",
                          "word": "keine"
                        },
                        {
                          "startTime": "674.200s",
                          "endTime": "675.400s",
                          "word": "hochgeschwindigkeits"
                        },
                        {
                          "startTime": "675.400s",
                          "endTime": "676s",
                          "word": "Patronen"
                        },
                        {
                          "startTime": "676s",
                          "endTime": "676.600s",
                          "word": "verwendet,"
                        },
                        {
                          "startTime": "676.600s",
                          "endTime": "677.200s",
                          "word": "kann"
                        },
                        {
                          "startTime": "677.200s",
                          "endTime": "677.300s",
                          "word": "man"
                        },
                        {
                          "startTime": "677.300s",
                          "endTime": "677.400s",
                          "word": "die"
                        },
                        {
                          "startTime": "677.400s",
                          "endTime": "677.800s",
                          "word": "9mm"
                        },
                        {
                          "startTime": "677.800s",
                          "endTime": "678.600s",
                          "word": "vergessen,"
                        },
                        {
                          "startTime": "678.600s",
                          "endTime": "678.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "678.900s",
                          "endTime": "679s",
                          "word": "habe"
                        },
                        {
                          "startTime": "679s",
                          "endTime": "679.100s",
                          "word": "mal"
                        },
                        {
                          "startTime": "679.100s",
                          "endTime": "679.300s",
                          "word": "gesehen,"
                        },
                        {
                          "startTime": "679.300s",
                          "endTime": "679.500s",
                          "word": "wie"
                        },
                        {
                          "startTime": "679.500s",
                          "endTime": "679.600s",
                          "word": "so"
                        },
                        {
                          "startTime": "679.600s",
                          "endTime": "679.800s",
                          "word": "eine"
                        },
                        {
                          "startTime": "679.800s",
                          "endTime": "679.900s",
                          "word": "von"
                        },
                        {
                          "startTime": "679.900s",
                          "endTime": "680.100s",
                          "word": "der"
                        },
                        {
                          "startTime": "680.100s",
                          "endTime": "680.300s",
                          "word": "Windschutzscheibe"
                        },
                        {
                          "startTime": "680.300s",
                          "endTime": "681.100s",
                          "word": "abgeprallt"
                        },
                        {
                          "startTime": "681.100s",
                          "endTime": "681.300s",
                          "word": "es"
                        },
                        {
                          "startTime": "681.300s",
                          "endTime": "681.900s",
                          "word": "ja,"
                        },
                        {
                          "startTime": "681.900s",
                          "endTime": "682.100s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "682.100s",
                          "endTime": "682.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "682.200s",
                          "endTime": "682.600s",
                          "word": "siehst"
                        },
                        {
                          "startTime": "682.600s",
                          "endTime": "684.500s",
                          "word": "du"
                        },
                        {
                          "startTime": "684.500s",
                          "endTime": "685.100s",
                          "word": "schon"
                        },
                        {
                          "startTime": "685.100s",
                          "endTime": "685.400s",
                          "word": "eine"
                        },
                        {
                          "startTime": "685.400s",
                          "endTime": "685.700s",
                          "word": "Waffe"
                        },
                        {
                          "startTime": "685.700s",
                          "endTime": "686.100s",
                          "word": "dann"
                        },
                        {
                          "startTime": "686.100s",
                          "endTime": "686.300s",
                          "word": "eine"
                        },
                        {
                          "startTime": "686.300s",
                          "endTime": "686.400s",
                          "word": "die"
                        },
                        {
                          "startTime": "686.400s",
                          "endTime": "686.500s",
                          "word": "was"
                        },
                        {
                          "startTime": "686.500s",
                          "endTime": "686.800s",
                          "word": "taugt"
                        },
                        {
                          "startTime": "686.800s",
                          "endTime": "687.800s",
                          "word": "Kaliber"
                        },
                        {
                          "startTime": "687.800s",
                          "endTime": "688.300s",
                          "word": "40"
                        },
                        {
                          "startTime": "688.300s",
                          "endTime": "690.300s",
                          "word": "ein"
                        },
                        {
                          "startTime": "690.300s",
                          "endTime": "690.700s",
                          "word": "scharfes"
                        },
                        {
                          "startTime": "690.700s",
                          "endTime": "691.100s",
                          "word": "Gerät,"
                        },
                        {
                          "startTime": "691.100s",
                          "endTime": "693.400s",
                          "word": "dead"
                        },
                        {
                          "startTime": "693.400s",
                          "endTime": "693.700s",
                          "word": "sie"
                        },
                        {
                          "startTime": "693.700s",
                          "endTime": "694s",
                          "word": "sie"
                        },
                        {
                          "startTime": "694s",
                          "endTime": "694.200s",
                          "word": "dir"
                        },
                        {
                          "startTime": "694.200s",
                          "endTime": "694.400s",
                          "word": "mal"
                        },
                        {
                          "startTime": "694.400s",
                          "endTime": "694.500s",
                          "word": "an."
                        },
                        {
                          "startTime": "694.500s",
                          "endTime": "695.300s",
                          "word": "Ja,"
                        },
                        {
                          "startTime": "695.300s",
                          "endTime": "695.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "695.400s",
                          "endTime": "695.800s",
                          "word": "sehe"
                        },
                        {
                          "startTime": "695.800s",
                          "endTime": "696s",
                          "word": "dich."
                        },
                        {
                          "startTime": "696s",
                          "endTime": "696.600s",
                          "word": "Komm"
                        },
                        {
                          "startTime": "696.600s",
                          "endTime": "696.900s",
                          "word": "nimm"
                        },
                        {
                          "startTime": "696.900s",
                          "endTime": "697.200s",
                          "word": "sie"
                        },
                        {
                          "startTime": "697.200s",
                          "endTime": "697.700s",
                          "word": "ja"
                        },
                        {
                          "startTime": "697.700s",
                          "endTime": "701.500s",
                          "word": "ganz"
                        },
                        {
                          "startTime": "701.500s",
                          "endTime": "701.700s",
                          "word": "schön"
                        },
                        {
                          "startTime": "701.700s",
                          "endTime": "702s",
                          "word": "schwer."
                        },
                        {
                          "startTime": "702s",
                          "endTime": "706.300s",
                          "word": "Heidi"
                        },
                        {
                          "startTime": "706.300s",
                          "endTime": "706.600s",
                          "word": "beißt"
                        },
                        {
                          "startTime": "706.600s",
                          "endTime": "706.700s",
                          "word": "dich"
                        },
                        {
                          "startTime": "706.700s",
                          "endTime": "706.900s",
                          "word": "schon"
                        },
                        {
                          "startTime": "706.900s",
                          "endTime": "707s",
                          "word": "nicht."
                        },
                        {
                          "startTime": "707s",
                          "endTime": "707.500s",
                          "word": "Siehst"
                        },
                        {
                          "startTime": "707.500s",
                          "endTime": "707.600s",
                          "word": "aus"
                        },
                        {
                          "startTime": "707.600s",
                          "endTime": "707.800s",
                          "word": "wie"
                        },
                        {
                          "startTime": "707.800s",
                          "endTime": "708s",
                          "word": "Keith"
                        },
                        {
                          "startTime": "708s",
                          "endTime": "708.300s",
                          "word": "Richards"
                        },
                        {
                          "startTime": "708.300s",
                          "endTime": "708.500s",
                          "word": "mit"
                        },
                        {
                          "startTime": "708.500s",
                          "endTime": "708.700s",
                          "word": "einem"
                        },
                        {
                          "startTime": "708.700s",
                          "endTime": "708.900s",
                          "word": "Glas"
                        },
                        {
                          "startTime": "708.900s",
                          "endTime": "709.200s",
                          "word": "warme"
                        },
                        {
                          "startTime": "709.200s",
                          "endTime": "709.200s",
                          "word": "Milch"
                        },
                        {
                          "startTime": "709.200s",
                          "endTime": "713.500s",
                          "word": "passt"
                        },
                        {
                          "startTime": "713.500s",
                          "endTime": "714.500s",
                          "word": "passt"
                        },
                        {
                          "startTime": "714.500s",
                          "endTime": "714.600s",
                          "word": "auch"
                        },
                        {
                          "startTime": "714.600s",
                          "endTime": "715s",
                          "word": "passt"
                        },
                        {
                          "startTime": "715s",
                          "endTime": "715.100s",
                          "word": "auch"
                        },
                        {
                          "startTime": "715.100s",
                          "endTime": "715.500s",
                          "word": "wir"
                        },
                        {
                          "startTime": "715.500s",
                          "endTime": "715.900s",
                          "word": "trinken"
                        },
                        {
                          "startTime": "715.900s",
                          "endTime": "716.500s",
                          "word": "wir"
                        },
                        {
                          "startTime": "716.500s",
                          "endTime": "716.700s",
                          "word": "trinken."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Mein Schwager kommt dein Hirn ist so groß wie Wisconsin, aber das kriegen wir noch nicht übel, du hast dein Herz am rechten Fleck rechten. Fleck, wir lieben dich mal, wir lieben Dich, nimm die Gläser auf Holz.",
                      "confidence": 0.881252,
                      "words": [
                        {
                          "startTime": "717s",
                          "endTime": "717.300s",
                          "word": "Mein"
                        },
                        {
                          "startTime": "717.300s",
                          "endTime": "717.600s",
                          "word": "Schwager"
                        },
                        {
                          "startTime": "717.600s",
                          "endTime": "718s",
                          "word": "kommt"
                        },
                        {
                          "startTime": "718s",
                          "endTime": "721s",
                          "word": "dein"
                        },
                        {
                          "startTime": "721s",
                          "endTime": "721.200s",
                          "word": "Hirn"
                        },
                        {
                          "startTime": "721.200s",
                          "endTime": "721.300s",
                          "word": "ist"
                        },
                        {
                          "startTime": "721.300s",
                          "endTime": "721.600s",
                          "word": "so"
                        },
                        {
                          "startTime": "721.600s",
                          "endTime": "721.900s",
                          "word": "groß"
                        },
                        {
                          "startTime": "721.900s",
                          "endTime": "722s",
                          "word": "wie"
                        },
                        {
                          "startTime": "722s",
                          "endTime": "722.800s",
                          "word": "Wisconsin,"
                        },
                        {
                          "startTime": "722.800s",
                          "endTime": "723.800s",
                          "word": "aber"
                        },
                        {
                          "startTime": "723.800s",
                          "endTime": "724s",
                          "word": "das"
                        },
                        {
                          "startTime": "724s",
                          "endTime": "724.200s",
                          "word": "kriegen"
                        },
                        {
                          "startTime": "724.200s",
                          "endTime": "724.300s",
                          "word": "wir"
                        },
                        {
                          "startTime": "724.300s",
                          "endTime": "724.300s",
                          "word": "noch"
                        },
                        {
                          "startTime": "724.300s",
                          "endTime": "724.500s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "724.500s",
                          "endTime": "724.900s",
                          "word": "übel,"
                        },
                        {
                          "startTime": "724.900s",
                          "endTime": "726.900s",
                          "word": "du"
                        },
                        {
                          "startTime": "726.900s",
                          "endTime": "727.200s",
                          "word": "hast"
                        },
                        {
                          "startTime": "727.200s",
                          "endTime": "727.300s",
                          "word": "dein"
                        },
                        {
                          "startTime": "727.300s",
                          "endTime": "727.600s",
                          "word": "Herz"
                        },
                        {
                          "startTime": "727.600s",
                          "endTime": "727.700s",
                          "word": "am"
                        },
                        {
                          "startTime": "727.700s",
                          "endTime": "727.800s",
                          "word": "rechten"
                        },
                        {
                          "startTime": "727.800s",
                          "endTime": "728.200s",
                          "word": "Fleck"
                        },
                        {
                          "startTime": "728.200s",
                          "endTime": "729.500s",
                          "word": "rechten."
                        },
                        {
                          "startTime": "729.500s",
                          "endTime": "729.700s",
                          "word": "Fleck,"
                        },
                        {
                          "startTime": "729.700s",
                          "endTime": "730.100s",
                          "word": "wir"
                        },
                        {
                          "startTime": "730.100s",
                          "endTime": "730.400s",
                          "word": "lieben"
                        },
                        {
                          "startTime": "730.400s",
                          "endTime": "730.500s",
                          "word": "dich"
                        },
                        {
                          "startTime": "730.500s",
                          "endTime": "730.700s",
                          "word": "mal,"
                        },
                        {
                          "startTime": "730.700s",
                          "endTime": "730.900s",
                          "word": "wir"
                        },
                        {
                          "startTime": "730.900s",
                          "endTime": "731.200s",
                          "word": "lieben"
                        },
                        {
                          "startTime": "731.200s",
                          "endTime": "731.300s",
                          "word": "Dich,"
                        },
                        {
                          "startTime": "731.300s",
                          "endTime": "731.500s",
                          "word": "nimm"
                        },
                        {
                          "startTime": "731.500s",
                          "endTime": "731.700s",
                          "word": "die"
                        },
                        {
                          "startTime": "731.700s",
                          "endTime": "732.100s",
                          "word": "Gläser"
                        },
                        {
                          "startTime": "732.100s",
                          "endTime": "732.400s",
                          "word": "auf"
                        },
                        {
                          "startTime": "732.400s",
                          "endTime": "733s",
                          "word": "Holz."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Dabei konnten wir drei Verdächtige ergreifen und in Gewahrsam nehmen, ich bin stolz darauf, dass wir wegen der ausserordentlichen Professionalität meiner Kollegen hier in Albuquerque eine erhebliche Menge Methamphetamin aus dem Verkehr ziehen konnten, gab es einen Schusswechsel. Nein, unsere Agenten haben die Verdächtigen überrascht, dann sieht man von schwerer als Lampe alle beide links entschuldige ist es wieder komisch organisiertes höchst wie viel Geld ist das etwa so viel Bargeld ist doch sicher sehr ungewöhnlich daran ist leicht verdientes Geld, bis gleich, hab ich dich mitnehmen, wenn du mal sehen will.",
                      "confidence": 0.88463944,
                      "words": [
                        {
                          "startTime": "743.100s",
                          "endTime": "743.500s",
                          "word": "Dabei"
                        },
                        {
                          "startTime": "743.500s",
                          "endTime": "743.900s",
                          "word": "konnten"
                        },
                        {
                          "startTime": "743.900s",
                          "endTime": "744s",
                          "word": "wir"
                        },
                        {
                          "startTime": "744s",
                          "endTime": "744.200s",
                          "word": "drei"
                        },
                        {
                          "startTime": "744.200s",
                          "endTime": "744.800s",
                          "word": "Verdächtige"
                        },
                        {
                          "startTime": "744.800s",
                          "endTime": "745.400s",
                          "word": "ergreifen"
                        },
                        {
                          "startTime": "745.400s",
                          "endTime": "745.600s",
                          "word": "und"
                        },
                        {
                          "startTime": "745.600s",
                          "endTime": "745.700s",
                          "word": "in"
                        },
                        {
                          "startTime": "745.700s",
                          "endTime": "746s",
                          "word": "Gewahrsam"
                        },
                        {
                          "startTime": "746s",
                          "endTime": "746.300s",
                          "word": "nehmen,"
                        },
                        {
                          "startTime": "746.300s",
                          "endTime": "747.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "747.400s",
                          "endTime": "747.600s",
                          "word": "bin"
                        },
                        {
                          "startTime": "747.600s",
                          "endTime": "748s",
                          "word": "stolz"
                        },
                        {
                          "startTime": "748s",
                          "endTime": "748.200s",
                          "word": "darauf,"
                        },
                        {
                          "startTime": "748.200s",
                          "endTime": "748.700s",
                          "word": "dass"
                        },
                        {
                          "startTime": "748.700s",
                          "endTime": "748.800s",
                          "word": "wir"
                        },
                        {
                          "startTime": "748.800s",
                          "endTime": "749s",
                          "word": "wegen"
                        },
                        {
                          "startTime": "749s",
                          "endTime": "749.200s",
                          "word": "der"
                        },
                        {
                          "startTime": "749.200s",
                          "endTime": "750.100s",
                          "word": "ausserordentlichen"
                        },
                        {
                          "startTime": "750.100s",
                          "endTime": "750.900s",
                          "word": "Professionalität"
                        },
                        {
                          "startTime": "750.900s",
                          "endTime": "751.300s",
                          "word": "meiner"
                        },
                        {
                          "startTime": "751.300s",
                          "endTime": "751.800s",
                          "word": "Kollegen"
                        },
                        {
                          "startTime": "751.800s",
                          "endTime": "752s",
                          "word": "hier"
                        },
                        {
                          "startTime": "752s",
                          "endTime": "752.100s",
                          "word": "in"
                        },
                        {
                          "startTime": "752.100s",
                          "endTime": "752.500s",
                          "word": "Albuquerque"
                        },
                        {
                          "startTime": "752.500s",
                          "endTime": "753.600s",
                          "word": "eine"
                        },
                        {
                          "startTime": "753.600s",
                          "endTime": "754.300s",
                          "word": "erhebliche"
                        },
                        {
                          "startTime": "754.300s",
                          "endTime": "754.300s",
                          "word": "Menge"
                        },
                        {
                          "startTime": "754.300s",
                          "endTime": "754.900s",
                          "word": "Methamphetamin"
                        },
                        {
                          "startTime": "754.900s",
                          "endTime": "755.700s",
                          "word": "aus"
                        },
                        {
                          "startTime": "755.700s",
                          "endTime": "755.800s",
                          "word": "dem"
                        },
                        {
                          "startTime": "755.800s",
                          "endTime": "756.200s",
                          "word": "Verkehr"
                        },
                        {
                          "startTime": "756.200s",
                          "endTime": "756.400s",
                          "word": "ziehen"
                        },
                        {
                          "startTime": "756.400s",
                          "endTime": "756.900s",
                          "word": "konnten,"
                        },
                        {
                          "startTime": "756.900s",
                          "endTime": "757.600s",
                          "word": "gab"
                        },
                        {
                          "startTime": "757.600s",
                          "endTime": "757.700s",
                          "word": "es"
                        },
                        {
                          "startTime": "757.700s",
                          "endTime": "757.900s",
                          "word": "einen"
                        },
                        {
                          "startTime": "757.900s",
                          "endTime": "758.200s",
                          "word": "Schusswechsel."
                        },
                        {
                          "startTime": "758.200s",
                          "endTime": "759.200s",
                          "word": "Nein,"
                        },
                        {
                          "startTime": "759.200s",
                          "endTime": "759.900s",
                          "word": "unsere"
                        },
                        {
                          "startTime": "759.900s",
                          "endTime": "760.500s",
                          "word": "Agenten"
                        },
                        {
                          "startTime": "760.500s",
                          "endTime": "760.500s",
                          "word": "haben"
                        },
                        {
                          "startTime": "760.500s",
                          "endTime": "760.800s",
                          "word": "die"
                        },
                        {
                          "startTime": "760.800s",
                          "endTime": "761.500s",
                          "word": "Verdächtigen"
                        },
                        {
                          "startTime": "761.500s",
                          "endTime": "762s",
                          "word": "überrascht,"
                        },
                        {
                          "startTime": "762s",
                          "endTime": "762.500s",
                          "word": "dann"
                        },
                        {
                          "startTime": "762.500s",
                          "endTime": "763.300s",
                          "word": "sieht"
                        },
                        {
                          "startTime": "763.300s",
                          "endTime": "763.400s",
                          "word": "man"
                        },
                        {
                          "startTime": "763.400s",
                          "endTime": "763.800s",
                          "word": "von"
                        },
                        {
                          "startTime": "763.800s",
                          "endTime": "764.200s",
                          "word": "schwerer"
                        },
                        {
                          "startTime": "764.200s",
                          "endTime": "764.400s",
                          "word": "als"
                        },
                        {
                          "startTime": "764.400s",
                          "endTime": "767.400s",
                          "word": "Lampe"
                        },
                        {
                          "startTime": "767.400s",
                          "endTime": "768s",
                          "word": "alle"
                        },
                        {
                          "startTime": "768s",
                          "endTime": "768.500s",
                          "word": "beide"
                        },
                        {
                          "startTime": "768.500s",
                          "endTime": "769.500s",
                          "word": "links"
                        },
                        {
                          "startTime": "769.500s",
                          "endTime": "771s",
                          "word": "entschuldige"
                        },
                        {
                          "startTime": "771s",
                          "endTime": "774.800s",
                          "word": "ist"
                        },
                        {
                          "startTime": "774.800s",
                          "endTime": "774.900s",
                          "word": "es"
                        },
                        {
                          "startTime": "774.900s",
                          "endTime": "775.200s",
                          "word": "wieder"
                        },
                        {
                          "startTime": "775.200s",
                          "endTime": "775.700s",
                          "word": "komisch"
                        },
                        {
                          "startTime": "775.700s",
                          "endTime": "779.700s",
                          "word": "organisiertes"
                        },
                        {
                          "startTime": "779.700s",
                          "endTime": "780.100s",
                          "word": "höchst"
                        },
                        {
                          "startTime": "780.100s",
                          "endTime": "780.400s",
                          "word": "wie"
                        },
                        {
                          "startTime": "780.400s",
                          "endTime": "780.600s",
                          "word": "viel"
                        },
                        {
                          "startTime": "780.600s",
                          "endTime": "780.800s",
                          "word": "Geld"
                        },
                        {
                          "startTime": "780.800s",
                          "endTime": "780.900s",
                          "word": "ist"
                        },
                        {
                          "startTime": "780.900s",
                          "endTime": "781.100s",
                          "word": "das"
                        },
                        {
                          "startTime": "781.100s",
                          "endTime": "781.900s",
                          "word": "etwa"
                        },
                        {
                          "startTime": "781.900s",
                          "endTime": "790.800s",
                          "word": "so"
                        },
                        {
                          "startTime": "790.800s",
                          "endTime": "791s",
                          "word": "viel"
                        },
                        {
                          "startTime": "791s",
                          "endTime": "791.400s",
                          "word": "Bargeld"
                        },
                        {
                          "startTime": "791.400s",
                          "endTime": "792.100s",
                          "word": "ist"
                        },
                        {
                          "startTime": "792.100s",
                          "endTime": "792.200s",
                          "word": "doch"
                        },
                        {
                          "startTime": "792.200s",
                          "endTime": "792.400s",
                          "word": "sicher"
                        },
                        {
                          "startTime": "792.400s",
                          "endTime": "792.600s",
                          "word": "sehr"
                        },
                        {
                          "startTime": "792.600s",
                          "endTime": "793.500s",
                          "word": "ungewöhnlich"
                        },
                        {
                          "startTime": "793.500s",
                          "endTime": "795.100s",
                          "word": "daran"
                        },
                        {
                          "startTime": "795.100s",
                          "endTime": "795.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "795.400s",
                          "endTime": "796.200s",
                          "word": "leicht"
                        },
                        {
                          "startTime": "796.200s",
                          "endTime": "796.400s",
                          "word": "verdientes"
                        },
                        {
                          "startTime": "796.400s",
                          "endTime": "796.600s",
                          "word": "Geld,"
                        },
                        {
                          "startTime": "796.600s",
                          "endTime": "797.500s",
                          "word": "bis"
                        },
                        {
                          "startTime": "797.500s",
                          "endTime": "797.800s",
                          "word": "gleich,"
                        },
                        {
                          "startTime": "797.800s",
                          "endTime": "797.900s",
                          "word": "hab"
                        },
                        {
                          "startTime": "797.900s",
                          "endTime": "798.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "798.100s",
                          "endTime": "801.400s",
                          "word": "dich"
                        },
                        {
                          "startTime": "801.400s",
                          "endTime": "802s",
                          "word": "mitnehmen,"
                        },
                        {
                          "startTime": "802s",
                          "endTime": "802.400s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "802.400s",
                          "endTime": "802.500s",
                          "word": "du"
                        },
                        {
                          "startTime": "802.500s",
                          "endTime": "802.600s",
                          "word": "mal"
                        },
                        {
                          "startTime": "802.600s",
                          "endTime": "802.800s",
                          "word": "sehen"
                        },
                        {
                          "startTime": "802.800s",
                          "endTime": "803s",
                          "word": "will."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Sieh dir so LABOR Ausreden, damit du endlich auch mal was erlebst.",
                      "confidence": 0.8204411,
                      "words": [
                        {
                          "startTime": "803s",
                          "endTime": "803.200s",
                          "word": "Sieh"
                        },
                        {
                          "startTime": "803.200s",
                          "endTime": "803.300s",
                          "word": "dir"
                        },
                        {
                          "startTime": "803.300s",
                          "endTime": "803.400s",
                          "word": "so"
                        },
                        {
                          "startTime": "803.400s",
                          "endTime": "803.500s",
                          "word": "LABOR"
                        },
                        {
                          "startTime": "803.500s",
                          "endTime": "804.100s",
                          "word": "Ausreden,"
                        },
                        {
                          "startTime": "804.100s",
                          "endTime": "805.200s",
                          "word": "damit"
                        },
                        {
                          "startTime": "805.200s",
                          "endTime": "805.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "805.400s",
                          "endTime": "805.600s",
                          "word": "endlich"
                        },
                        {
                          "startTime": "805.600s",
                          "endTime": "805.800s",
                          "word": "auch"
                        },
                        {
                          "startTime": "805.800s",
                          "endTime": "805.900s",
                          "word": "mal"
                        },
                        {
                          "startTime": "805.900s",
                          "endTime": "806s",
                          "word": "was"
                        },
                        {
                          "startTime": "806s",
                          "endTime": "806.600s",
                          "word": "erlebst."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Was bietest du an? Die scheußliche war sie dich mal auf dem Trödelmarkt gekauft habe und wie läuft's, ich habe schon meinen Mindestpreis und es sind noch zwei Minuten.",
                      "confidence": 0.8996244,
                      "words": [
                        {
                          "startTime": "818.600s",
                          "endTime": "819s",
                          "word": "Was"
                        },
                        {
                          "startTime": "819s",
                          "endTime": "819.300s",
                          "word": "bietest"
                        },
                        {
                          "startTime": "819.300s",
                          "endTime": "819.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "819.400s",
                          "endTime": "819.500s",
                          "word": "an?"
                        },
                        {
                          "startTime": "819.500s",
                          "endTime": "821.100s",
                          "word": "Die"
                        },
                        {
                          "startTime": "821.100s",
                          "endTime": "821.700s",
                          "word": "scheußliche"
                        },
                        {
                          "startTime": "821.700s",
                          "endTime": "822s",
                          "word": "war"
                        },
                        {
                          "startTime": "822s",
                          "endTime": "822.100s",
                          "word": "sie"
                        },
                        {
                          "startTime": "822.100s",
                          "endTime": "822.300s",
                          "word": "dich"
                        },
                        {
                          "startTime": "822.300s",
                          "endTime": "822.500s",
                          "word": "mal"
                        },
                        {
                          "startTime": "822.500s",
                          "endTime": "822.600s",
                          "word": "auf"
                        },
                        {
                          "startTime": "822.600s",
                          "endTime": "822.700s",
                          "word": "dem"
                        },
                        {
                          "startTime": "822.700s",
                          "endTime": "823.200s",
                          "word": "Trödelmarkt"
                        },
                        {
                          "startTime": "823.200s",
                          "endTime": "823.500s",
                          "word": "gekauft"
                        },
                        {
                          "startTime": "823.500s",
                          "endTime": "824.100s",
                          "word": "habe"
                        },
                        {
                          "startTime": "824.100s",
                          "endTime": "830.400s",
                          "word": "und"
                        },
                        {
                          "startTime": "830.400s",
                          "endTime": "830.500s",
                          "word": "wie"
                        },
                        {
                          "startTime": "830.500s",
                          "endTime": "830.900s",
                          "word": "läuft's,"
                        },
                        {
                          "startTime": "830.900s",
                          "endTime": "831.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "831.100s",
                          "endTime": "831.400s",
                          "word": "habe"
                        },
                        {
                          "startTime": "831.400s",
                          "endTime": "831.500s",
                          "word": "schon"
                        },
                        {
                          "startTime": "831.500s",
                          "endTime": "831.800s",
                          "word": "meinen"
                        },
                        {
                          "startTime": "831.800s",
                          "endTime": "832.500s",
                          "word": "Mindestpreis"
                        },
                        {
                          "startTime": "832.500s",
                          "endTime": "832.600s",
                          "word": "und"
                        },
                        {
                          "startTime": "832.600s",
                          "endTime": "832.800s",
                          "word": "es"
                        },
                        {
                          "startTime": "832.800s",
                          "endTime": "833s",
                          "word": "sind"
                        },
                        {
                          "startTime": "833s",
                          "endTime": "833.200s",
                          "word": "noch"
                        },
                        {
                          "startTime": "833.200s",
                          "endTime": "833.600s",
                          "word": "zwei"
                        },
                        {
                          "startTime": "833.600s",
                          "endTime": "834s",
                          "word": "Minuten."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wie steht's?",
                      "confidence": 0.8704651,
                      "words": [
                        {
                          "startTime": "841.300s",
                          "endTime": "842.600s",
                          "word": "Wie"
                        },
                        {
                          "startTime": "842.600s",
                          "endTime": "842.800s",
                          "word": "steht's?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Sag, du hast mir Geburtstagskind.",
                      "confidence": 0.7765822,
                      "words": [
                        {
                          "startTime": "844.100s",
                          "endTime": "844.500s",
                          "word": "Sag,"
                        },
                        {
                          "startTime": "844.500s",
                          "endTime": "844.700s",
                          "word": "du"
                        },
                        {
                          "startTime": "844.700s",
                          "endTime": "844.700s",
                          "word": "hast"
                        },
                        {
                          "startTime": "844.700s",
                          "endTime": "844.900s",
                          "word": "mir"
                        },
                        {
                          "startTime": "844.900s",
                          "endTime": "845.700s",
                          "word": "Geburtstagskind."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Na, sag mal, was hast du am Samstag vor Ostern sagt, ihr braucht nicht bis wann 21. Ich glaube irgendwo ein bis zwei.",
                      "confidence": 0.8638964,
                      "words": [
                        {
                          "startTime": "848.700s",
                          "endTime": "849.400s",
                          "word": "Na,"
                        },
                        {
                          "startTime": "849.400s",
                          "endTime": "849.600s",
                          "word": "sag"
                        },
                        {
                          "startTime": "849.600s",
                          "endTime": "849.700s",
                          "word": "mal,"
                        },
                        {
                          "startTime": "849.700s",
                          "endTime": "849.900s",
                          "word": "was"
                        },
                        {
                          "startTime": "849.900s",
                          "endTime": "850s",
                          "word": "hast"
                        },
                        {
                          "startTime": "850s",
                          "endTime": "850.100s",
                          "word": "du"
                        },
                        {
                          "startTime": "850.100s",
                          "endTime": "850.200s",
                          "word": "am"
                        },
                        {
                          "startTime": "850.200s",
                          "endTime": "850.300s",
                          "word": "Samstag"
                        },
                        {
                          "startTime": "850.300s",
                          "endTime": "850.800s",
                          "word": "vor"
                        },
                        {
                          "startTime": "850.800s",
                          "endTime": "853.500s",
                          "word": "Ostern"
                        },
                        {
                          "startTime": "853.500s",
                          "endTime": "854.800s",
                          "word": "sagt,"
                        },
                        {
                          "startTime": "854.800s",
                          "endTime": "854.900s",
                          "word": "ihr"
                        },
                        {
                          "startTime": "854.900s",
                          "endTime": "855.300s",
                          "word": "braucht"
                        },
                        {
                          "startTime": "855.300s",
                          "endTime": "855.600s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "855.600s",
                          "endTime": "856s",
                          "word": "bis"
                        },
                        {
                          "startTime": "856s",
                          "endTime": "856.200s",
                          "word": "wann"
                        },
                        {
                          "startTime": "856.200s",
                          "endTime": "856.800s",
                          "word": "21."
                        },
                        {
                          "startTime": "856.800s",
                          "endTime": "857.600s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "857.600s",
                          "endTime": "857.900s",
                          "word": "glaube"
                        },
                        {
                          "startTime": "857.900s",
                          "endTime": "858.500s",
                          "word": "irgendwo"
                        },
                        {
                          "startTime": "858.500s",
                          "endTime": "858.600s",
                          "word": "ein"
                        },
                        {
                          "startTime": "858.600s",
                          "endTime": "858.800s",
                          "word": "bis"
                        },
                        {
                          "startTime": "858.800s",
                          "endTime": "859.100s",
                          "word": "zwei."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Und was ist danach?",
                      "confidence": 0.8883594,
                      "words": [
                        {
                          "startTime": "860.200s",
                          "endTime": "860.600s",
                          "word": "Und"
                        },
                        {
                          "startTime": "860.600s",
                          "endTime": "860.700s",
                          "word": "was"
                        },
                        {
                          "startTime": "860.700s",
                          "endTime": "860.900s",
                          "word": "ist"
                        },
                        {
                          "startTime": "860.900s",
                          "endTime": "861.100s",
                          "word": "danach?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ich dachte, wir fahren vielleicht nach Goslar Master.",
                      "confidence": 0.8336761,
                      "words": [
                        {
                          "startTime": "863.200s",
                          "endTime": "864.300s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "864.300s",
                          "endTime": "864.700s",
                          "word": "dachte,"
                        },
                        {
                          "startTime": "864.700s",
                          "endTime": "866.600s",
                          "word": "wir"
                        },
                        {
                          "startTime": "866.600s",
                          "endTime": "866.800s",
                          "word": "fahren"
                        },
                        {
                          "startTime": "866.800s",
                          "endTime": "867.600s",
                          "word": "vielleicht"
                        },
                        {
                          "startTime": "867.600s",
                          "endTime": "868.300s",
                          "word": "nach"
                        },
                        {
                          "startTime": "868.300s",
                          "endTime": "869.400s",
                          "word": "Goslar"
                        },
                        {
                          "startTime": "869.400s",
                          "endTime": "869.900s",
                          "word": "Master."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Gibt's gibt's eine Ausstellung, die ist auch ziemlich nichts mache ich schon.",
                      "confidence": 0.8748668,
                      "words": [
                        {
                          "startTime": "870.500s",
                          "endTime": "871.600s",
                          "word": "Gibt's"
                        },
                        {
                          "startTime": "871.600s",
                          "endTime": "872.300s",
                          "word": "gibt's"
                        },
                        {
                          "startTime": "872.300s",
                          "endTime": "872.500s",
                          "word": "eine"
                        },
                        {
                          "startTime": "872.500s",
                          "endTime": "872.900s",
                          "word": "Ausstellung,"
                        },
                        {
                          "startTime": "872.900s",
                          "endTime": "874s",
                          "word": "die"
                        },
                        {
                          "startTime": "874s",
                          "endTime": "874.200s",
                          "word": "ist"
                        },
                        {
                          "startTime": "874.200s",
                          "endTime": "874.300s",
                          "word": "auch"
                        },
                        {
                          "startTime": "874.300s",
                          "endTime": "875s",
                          "word": "ziemlich"
                        },
                        {
                          "startTime": "875s",
                          "endTime": "875.700s",
                          "word": "nichts"
                        },
                        {
                          "startTime": "875.700s",
                          "endTime": "876.500s",
                          "word": "mache"
                        },
                        {
                          "startTime": "876.500s",
                          "endTime": "876.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "876.600s",
                          "endTime": "876.700s",
                          "word": "schon."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Aber da ist eben diese Ausstellung über.",
                      "confidence": 0.83075017,
                      "words": [
                        {
                          "startTime": "878.600s",
                          "endTime": "879s",
                          "word": "Aber"
                        },
                        {
                          "startTime": "879s",
                          "endTime": "879.400s",
                          "word": "da"
                        },
                        {
                          "startTime": "879.400s",
                          "endTime": "879.500s",
                          "word": "ist"
                        },
                        {
                          "startTime": "879.500s",
                          "endTime": "879.800s",
                          "word": "eben"
                        },
                        {
                          "startTime": "879.800s",
                          "endTime": "881.400s",
                          "word": "diese"
                        },
                        {
                          "startTime": "881.400s",
                          "endTime": "882s",
                          "word": "Ausstellung"
                        },
                        {
                          "startTime": "882s",
                          "endTime": "882.300s",
                          "word": "über."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Mars Rover Fotograf ganz erstaunliche Einzelheiten von Masterarbeiten, ich würde es ja selbst machen, aber du hast gesagt, du will ich mal dass ich auf eine Streiche das andere.",
                      "confidence": 0.89882356,
                      "words": [
                        {
                          "startTime": "883.600s",
                          "endTime": "884.100s",
                          "word": "Mars"
                        },
                        {
                          "startTime": "884.100s",
                          "endTime": "884.400s",
                          "word": "Rover"
                        },
                        {
                          "startTime": "884.400s",
                          "endTime": "885.100s",
                          "word": "Fotograf"
                        },
                        {
                          "startTime": "885.100s",
                          "endTime": "888.300s",
                          "word": "ganz"
                        },
                        {
                          "startTime": "888.300s",
                          "endTime": "889s",
                          "word": "erstaunliche"
                        },
                        {
                          "startTime": "889s",
                          "endTime": "889.800s",
                          "word": "Einzelheiten"
                        },
                        {
                          "startTime": "889.800s",
                          "endTime": "890s",
                          "word": "von"
                        },
                        {
                          "startTime": "890s",
                          "endTime": "892.800s",
                          "word": "Masterarbeiten,"
                        },
                        {
                          "startTime": "892.800s",
                          "endTime": "893.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "893.200s",
                          "endTime": "897.200s",
                          "word": "würde"
                        },
                        {
                          "startTime": "897.200s",
                          "endTime": "897.300s",
                          "word": "es"
                        },
                        {
                          "startTime": "897.300s",
                          "endTime": "897.400s",
                          "word": "ja"
                        },
                        {
                          "startTime": "897.400s",
                          "endTime": "897.600s",
                          "word": "selbst"
                        },
                        {
                          "startTime": "897.600s",
                          "endTime": "898s",
                          "word": "machen,"
                        },
                        {
                          "startTime": "898s",
                          "endTime": "898.100s",
                          "word": "aber"
                        },
                        {
                          "startTime": "898.100s",
                          "endTime": "898.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "898.200s",
                          "endTime": "898.200s",
                          "word": "hast"
                        },
                        {
                          "startTime": "898.200s",
                          "endTime": "898.500s",
                          "word": "gesagt,"
                        },
                        {
                          "startTime": "898.500s",
                          "endTime": "898.800s",
                          "word": "du"
                        },
                        {
                          "startTime": "898.800s",
                          "endTime": "899s",
                          "word": "will"
                        },
                        {
                          "startTime": "899s",
                          "endTime": "899s",
                          "word": "ich"
                        },
                        {
                          "startTime": "899s",
                          "endTime": "899.200s",
                          "word": "mal"
                        },
                        {
                          "startTime": "899.200s",
                          "endTime": "899.400s",
                          "word": "dass"
                        },
                        {
                          "startTime": "899.400s",
                          "endTime": "899.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "899.500s",
                          "endTime": "899.600s",
                          "word": "auf"
                        },
                        {
                          "startTime": "899.600s",
                          "endTime": "899.800s",
                          "word": "eine"
                        },
                        {
                          "startTime": "899.800s",
                          "endTime": "900.300s",
                          "word": "Streiche"
                        },
                        {
                          "startTime": "900.300s",
                          "endTime": "900.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "900.400s",
                          "endTime": "900.700s",
                          "word": "andere."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Was ist eigentlich da unten los schläft er schon.",
                      "confidence": 0.84803903,
                      "words": [
                        {
                          "startTime": "905.600s",
                          "endTime": "906s",
                          "word": "Was"
                        },
                        {
                          "startTime": "906s",
                          "endTime": "906.200s",
                          "word": "ist"
                        },
                        {
                          "startTime": "906.200s",
                          "endTime": "906.400s",
                          "word": "eigentlich"
                        },
                        {
                          "startTime": "906.400s",
                          "endTime": "906.800s",
                          "word": "da"
                        },
                        {
                          "startTime": "906.800s",
                          "endTime": "906.900s",
                          "word": "unten"
                        },
                        {
                          "startTime": "906.900s",
                          "endTime": "907.200s",
                          "word": "los"
                        },
                        {
                          "startTime": "907.200s",
                          "endTime": "909.400s",
                          "word": "schläft"
                        },
                        {
                          "startTime": "909.400s",
                          "endTime": "909.500s",
                          "word": "er"
                        },
                        {
                          "startTime": "909.500s",
                          "endTime": "909.700s",
                          "word": "schon."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Es ist nichts, nur ich finde.",
                      "confidence": 0.9190641,
                      "words": [
                        {
                          "startTime": "912.100s",
                          "endTime": "912.500s",
                          "word": "Es"
                        },
                        {
                          "startTime": "912.500s",
                          "endTime": "912.700s",
                          "word": "ist"
                        },
                        {
                          "startTime": "912.700s",
                          "endTime": "913s",
                          "word": "nichts,"
                        },
                        {
                          "startTime": "913s",
                          "endTime": "913.500s",
                          "word": "nur"
                        },
                        {
                          "startTime": "913.500s",
                          "endTime": "914.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "914.900s",
                          "endTime": "915s",
                          "word": "finde."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wir müssen aufpassen wegen des Babys Babys, das ist ja nur für dich heute abend fertig.",
                      "confidence": 0.86613065,
                      "words": [
                        {
                          "startTime": "916.300s",
                          "endTime": "916.700s",
                          "word": "Wir"
                        },
                        {
                          "startTime": "916.700s",
                          "endTime": "917s",
                          "word": "müssen"
                        },
                        {
                          "startTime": "917s",
                          "endTime": "917.300s",
                          "word": "aufpassen"
                        },
                        {
                          "startTime": "917.300s",
                          "endTime": "917.900s",
                          "word": "wegen"
                        },
                        {
                          "startTime": "917.900s",
                          "endTime": "918s",
                          "word": "des"
                        },
                        {
                          "startTime": "918s",
                          "endTime": "918.200s",
                          "word": "Babys"
                        },
                        {
                          "startTime": "918.200s",
                          "endTime": "919.800s",
                          "word": "Babys,"
                        },
                        {
                          "startTime": "919.800s",
                          "endTime": "920s",
                          "word": "das"
                        },
                        {
                          "startTime": "920s",
                          "endTime": "920.100s",
                          "word": "ist"
                        },
                        {
                          "startTime": "920.100s",
                          "endTime": "920.200s",
                          "word": "ja"
                        },
                        {
                          "startTime": "920.200s",
                          "endTime": "920.300s",
                          "word": "nur"
                        },
                        {
                          "startTime": "920.300s",
                          "endTime": "920.500s",
                          "word": "für"
                        },
                        {
                          "startTime": "920.500s",
                          "endTime": "920.500s",
                          "word": "dich"
                        },
                        {
                          "startTime": "920.500s",
                          "endTime": "921.900s",
                          "word": "heute"
                        },
                        {
                          "startTime": "921.900s",
                          "endTime": "922.500s",
                          "word": "abend"
                        },
                        {
                          "startTime": "922.500s",
                          "endTime": "924.600s",
                          "word": "fertig."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Also, mach die Augen zu.",
                      "confidence": 0.89742374,
                      "words": [
                        {
                          "startTime": "926s",
                          "endTime": "926.500s",
                          "word": "Also,"
                        },
                        {
                          "startTime": "926.500s",
                          "endTime": "926.800s",
                          "word": "mach"
                        },
                        {
                          "startTime": "926.800s",
                          "endTime": "926.900s",
                          "word": "die"
                        },
                        {
                          "startTime": "926.900s",
                          "endTime": "927.400s",
                          "word": "Augen"
                        },
                        {
                          "startTime": "927.400s",
                          "endTime": "927.500s",
                          "word": "zu."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Und genieße es.",
                      "confidence": 0.89739645,
                      "words": [
                        {
                          "startTime": "929.100s",
                          "endTime": "929.500s",
                          "word": "Und"
                        },
                        {
                          "startTime": "929.500s",
                          "endTime": "930.400s",
                          "word": "genieße"
                        },
                        {
                          "startTime": "930.400s",
                          "endTime": "930.500s",
                          "word": "es."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Timbuktu",
                      "confidence": 0.80828124,
                      "words": [
                        {
                          "startTime": "934.500s",
                          "endTime": "935.900s",
                          "word": "Timbuktu"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " die Pferde",
                      "confidence": 0.82728976,
                      "words": [
                        {
                          "startTime": "942.800s",
                          "endTime": "943.200s",
                          "word": "die"
                        },
                        {
                          "startTime": "943.200s",
                          "endTime": "943.600s",
                          "word": "Pferde"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " immer weiter",
                      "confidence": 0.8903627,
                      "words": [
                        {
                          "startTime": "947.600s",
                          "endTime": "948.200s",
                          "word": "immer"
                        },
                        {
                          "startTime": "948.200s",
                          "endTime": "948.500s",
                          "word": "weiter"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " immer weiter",
                      "confidence": 0.8915518,
                      "words": [
                        {
                          "startTime": "950.100s",
                          "endTime": "950.600s",
                          "word": "immer"
                        },
                        {
                          "startTime": "950.600s",
                          "endTime": "950.900s",
                          "word": "weiter"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " weiter so",
                      "confidence": 0.8931796,
                      "words": [
                        {
                          "startTime": "952.600s",
                          "endTime": "953.200s",
                          "word": "weiter"
                        },
                        {
                          "startTime": "953.200s",
                          "endTime": "953.500s",
                          "word": "so"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " immer weiter",
                      "confidence": 0.8947752,
                      "words": [
                        {
                          "startTime": "955.300s",
                          "endTime": "955.800s",
                          "word": "immer"
                        },
                        {
                          "startTime": "955.800s",
                          "endTime": "956.100s",
                          "word": "weiter"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Immer 56",
                      "confidence": 0.8385671,
                      "words": [
                        {
                          "startTime": "958.300s",
                          "endTime": "959s",
                          "word": "Immer"
                        },
                        {
                          "startTime": "959s",
                          "endTime": "961.200s",
                          "word": "56"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Mir ist das so peinlich. Mir fehlt nichts ehrlich, das ist nur irgend so ein Virus. Der grassiert er ist hatte ihnen meine Frau da mein Sohn jetzt ich das ist bloß irgend so eine Bronchitis dazu, vielleicht eine Unterzuckerung, ich hatte heute kein so tolles Frühstück.",
                      "confidence": 0.89250654,
                      "words": [
                        {
                          "startTime": "1013.200s",
                          "endTime": "1013.700s",
                          "word": "Mir"
                        },
                        {
                          "startTime": "1013.700s",
                          "endTime": "1013.800s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1013.800s",
                          "endTime": "1013.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "1013.900s",
                          "endTime": "1014s",
                          "word": "so"
                        },
                        {
                          "startTime": "1014s",
                          "endTime": "1014.100s",
                          "word": "peinlich."
                        },
                        {
                          "startTime": "1014.100s",
                          "endTime": "1015s",
                          "word": "Mir"
                        },
                        {
                          "startTime": "1015s",
                          "endTime": "1015.400s",
                          "word": "fehlt"
                        },
                        {
                          "startTime": "1015.400s",
                          "endTime": "1015.600s",
                          "word": "nichts"
                        },
                        {
                          "startTime": "1015.600s",
                          "endTime": "1016.100s",
                          "word": "ehrlich,"
                        },
                        {
                          "startTime": "1016.100s",
                          "endTime": "1017.200s",
                          "word": "das"
                        },
                        {
                          "startTime": "1017.200s",
                          "endTime": "1017.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1017.400s",
                          "endTime": "1017.500s",
                          "word": "nur"
                        },
                        {
                          "startTime": "1017.500s",
                          "endTime": "1017.700s",
                          "word": "irgend"
                        },
                        {
                          "startTime": "1017.700s",
                          "endTime": "1017.700s",
                          "word": "so"
                        },
                        {
                          "startTime": "1017.700s",
                          "endTime": "1017.900s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1017.900s",
                          "endTime": "1018.300s",
                          "word": "Virus."
                        },
                        {
                          "startTime": "1018.300s",
                          "endTime": "1018.400s",
                          "word": "Der"
                        },
                        {
                          "startTime": "1018.400s",
                          "endTime": "1019s",
                          "word": "grassiert"
                        },
                        {
                          "startTime": "1019s",
                          "endTime": "1019.300s",
                          "word": "er"
                        },
                        {
                          "startTime": "1019.300s",
                          "endTime": "1019.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1019.400s",
                          "endTime": "1019.600s",
                          "word": "hatte"
                        },
                        {
                          "startTime": "1019.600s",
                          "endTime": "1019.900s",
                          "word": "ihnen"
                        },
                        {
                          "startTime": "1019.900s",
                          "endTime": "1020.200s",
                          "word": "meine"
                        },
                        {
                          "startTime": "1020.200s",
                          "endTime": "1020.400s",
                          "word": "Frau"
                        },
                        {
                          "startTime": "1020.400s",
                          "endTime": "1020.900s",
                          "word": "da"
                        },
                        {
                          "startTime": "1020.900s",
                          "endTime": "1021.100s",
                          "word": "mein"
                        },
                        {
                          "startTime": "1021.100s",
                          "endTime": "1021.300s",
                          "word": "Sohn"
                        },
                        {
                          "startTime": "1021.300s",
                          "endTime": "1021.900s",
                          "word": "jetzt"
                        },
                        {
                          "startTime": "1021.900s",
                          "endTime": "1022.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1022.200s",
                          "endTime": "1023.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "1023.400s",
                          "endTime": "1023.600s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1023.600s",
                          "endTime": "1023.800s",
                          "word": "bloß"
                        },
                        {
                          "startTime": "1023.800s",
                          "endTime": "1024.400s",
                          "word": "irgend"
                        },
                        {
                          "startTime": "1024.400s",
                          "endTime": "1024.500s",
                          "word": "so"
                        },
                        {
                          "startTime": "1024.500s",
                          "endTime": "1024.800s",
                          "word": "eine"
                        },
                        {
                          "startTime": "1024.800s",
                          "endTime": "1025.400s",
                          "word": "Bronchitis"
                        },
                        {
                          "startTime": "1025.400s",
                          "endTime": "1027.200s",
                          "word": "dazu,"
                        },
                        {
                          "startTime": "1027.200s",
                          "endTime": "1027.600s",
                          "word": "vielleicht"
                        },
                        {
                          "startTime": "1027.600s",
                          "endTime": "1027.900s",
                          "word": "eine"
                        },
                        {
                          "startTime": "1027.900s",
                          "endTime": "1028.300s",
                          "word": "Unterzuckerung,"
                        },
                        {
                          "startTime": "1028.300s",
                          "endTime": "1028.800s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1028.800s",
                          "endTime": "1029s",
                          "word": "hatte"
                        },
                        {
                          "startTime": "1029s",
                          "endTime": "1029.300s",
                          "word": "heute"
                        },
                        {
                          "startTime": "1029.300s",
                          "endTime": "1029.500s",
                          "word": "kein"
                        },
                        {
                          "startTime": "1029.500s",
                          "endTime": "1029.600s",
                          "word": "so"
                        },
                        {
                          "startTime": "1029.600s",
                          "endTime": "1029.900s",
                          "word": "tolles"
                        },
                        {
                          "startTime": "1029.900s",
                          "endTime": "1030.400s",
                          "word": "Frühstück."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Sagen, sie können Sie mir einen Gefallen tun und mich vielleicht an der nächsten Ecke habe es jetzt nein, ich bin nicht besonders gut versichert, aber wenn wir ein paar Mal tief durch gibt es jemanden, den wir verständigen müssen, um Gottes Willen ein setzen sie sich bitte mal auf.",
                      "confidence": 0.8904299,
                      "words": [
                        {
                          "startTime": "1031.700s",
                          "endTime": "1032.300s",
                          "word": "Sagen,"
                        },
                        {
                          "startTime": "1032.300s",
                          "endTime": "1032.400s",
                          "word": "sie"
                        },
                        {
                          "startTime": "1032.400s",
                          "endTime": "1032.900s",
                          "word": "können"
                        },
                        {
                          "startTime": "1032.900s",
                          "endTime": "1033s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "1033s",
                          "endTime": "1033.200s",
                          "word": "mir"
                        },
                        {
                          "startTime": "1033.200s",
                          "endTime": "1033.400s",
                          "word": "einen"
                        },
                        {
                          "startTime": "1033.400s",
                          "endTime": "1033.900s",
                          "word": "Gefallen"
                        },
                        {
                          "startTime": "1033.900s",
                          "endTime": "1034.100s",
                          "word": "tun"
                        },
                        {
                          "startTime": "1034.100s",
                          "endTime": "1034.400s",
                          "word": "und"
                        },
                        {
                          "startTime": "1034.400s",
                          "endTime": "1035.200s",
                          "word": "mich"
                        },
                        {
                          "startTime": "1035.200s",
                          "endTime": "1035.400s",
                          "word": "vielleicht"
                        },
                        {
                          "startTime": "1035.400s",
                          "endTime": "1035.700s",
                          "word": "an"
                        },
                        {
                          "startTime": "1035.700s",
                          "endTime": "1035.800s",
                          "word": "der"
                        },
                        {
                          "startTime": "1035.800s",
                          "endTime": "1036.100s",
                          "word": "nächsten"
                        },
                        {
                          "startTime": "1036.100s",
                          "endTime": "1036.100s",
                          "word": "Ecke"
                        },
                        {
                          "startTime": "1036.100s",
                          "endTime": "1036.600s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1036.600s",
                          "endTime": "1036.700s",
                          "word": "es"
                        },
                        {
                          "startTime": "1036.700s",
                          "endTime": "1036.900s",
                          "word": "jetzt"
                        },
                        {
                          "startTime": "1036.900s",
                          "endTime": "1038.600s",
                          "word": "nein,"
                        },
                        {
                          "startTime": "1038.600s",
                          "endTime": "1038.800s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1038.800s",
                          "endTime": "1041.700s",
                          "word": "bin"
                        },
                        {
                          "startTime": "1041.700s",
                          "endTime": "1041.800s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1041.800s",
                          "endTime": "1042.300s",
                          "word": "besonders"
                        },
                        {
                          "startTime": "1042.300s",
                          "endTime": "1042.500s",
                          "word": "gut"
                        },
                        {
                          "startTime": "1042.500s",
                          "endTime": "1043.400s",
                          "word": "versichert,"
                        },
                        {
                          "startTime": "1043.400s",
                          "endTime": "1044.100s",
                          "word": "aber"
                        },
                        {
                          "startTime": "1044.100s",
                          "endTime": "1044.200s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "1044.200s",
                          "endTime": "1044.400s",
                          "word": "wir"
                        },
                        {
                          "startTime": "1044.400s",
                          "endTime": "1044.500s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1044.500s",
                          "endTime": "1044.600s",
                          "word": "paar"
                        },
                        {
                          "startTime": "1044.600s",
                          "endTime": "1044.700s",
                          "word": "Mal"
                        },
                        {
                          "startTime": "1044.700s",
                          "endTime": "1044.900s",
                          "word": "tief"
                        },
                        {
                          "startTime": "1044.900s",
                          "endTime": "1045.200s",
                          "word": "durch"
                        },
                        {
                          "startTime": "1045.200s",
                          "endTime": "1052.200s",
                          "word": "gibt"
                        },
                        {
                          "startTime": "1052.200s",
                          "endTime": "1052.200s",
                          "word": "es"
                        },
                        {
                          "startTime": "1052.200s",
                          "endTime": "1052.700s",
                          "word": "jemanden,"
                        },
                        {
                          "startTime": "1052.700s",
                          "endTime": "1052.900s",
                          "word": "den"
                        },
                        {
                          "startTime": "1052.900s",
                          "endTime": "1053s",
                          "word": "wir"
                        },
                        {
                          "startTime": "1053s",
                          "endTime": "1053.600s",
                          "word": "verständigen"
                        },
                        {
                          "startTime": "1053.600s",
                          "endTime": "1053.900s",
                          "word": "müssen,"
                        },
                        {
                          "startTime": "1053.900s",
                          "endTime": "1055.100s",
                          "word": "um"
                        },
                        {
                          "startTime": "1055.100s",
                          "endTime": "1055.500s",
                          "word": "Gottes"
                        },
                        {
                          "startTime": "1055.500s",
                          "endTime": "1055.800s",
                          "word": "Willen"
                        },
                        {
                          "startTime": "1055.800s",
                          "endTime": "1056s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1056s",
                          "endTime": "1057.300s",
                          "word": "setzen"
                        },
                        {
                          "startTime": "1057.300s",
                          "endTime": "1057.400s",
                          "word": "sie"
                        },
                        {
                          "startTime": "1057.400s",
                          "endTime": "1057.600s",
                          "word": "sich"
                        },
                        {
                          "startTime": "1057.600s",
                          "endTime": "1057.700s",
                          "word": "bitte"
                        },
                        {
                          "startTime": "1057.700s",
                          "endTime": "1058s",
                          "word": "mal"
                        },
                        {
                          "startTime": "1058s",
                          "endTime": "1058.200s",
                          "word": "auf."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " MR white sind sie Raucher, weil ich nicht warum fragen sie?",
                      "confidence": 0.82861495,
                      "words": [
                        {
                          "startTime": "1061.900s",
                          "endTime": "1062.500s",
                          "word": "MR"
                        },
                        {
                          "startTime": "1062.500s",
                          "endTime": "1062.700s",
                          "word": "white"
                        },
                        {
                          "startTime": "1062.700s",
                          "endTime": "1062.900s",
                          "word": "sind"
                        },
                        {
                          "startTime": "1062.900s",
                          "endTime": "1063s",
                          "word": "sie"
                        },
                        {
                          "startTime": "1063s",
                          "endTime": "1063.200s",
                          "word": "Raucher,"
                        },
                        {
                          "startTime": "1063.200s",
                          "endTime": "1065.300s",
                          "word": "weil"
                        },
                        {
                          "startTime": "1065.300s",
                          "endTime": "1065.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1065.400s",
                          "endTime": "1065.700s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1065.700s",
                          "endTime": "1068.600s",
                          "word": "warum"
                        },
                        {
                          "startTime": "1068.600s",
                          "endTime": "1068.900s",
                          "word": "fragen"
                        },
                        {
                          "startTime": "1068.900s",
                          "endTime": "1069s",
                          "word": "sie?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Nein, möchte meine Schwester weint MR white die haben der verstanden, was ich gerade gesagt habe.",
                      "confidence": 0.83570284,
                      "words": [
                        {
                          "startTime": "1079.100s",
                          "endTime": "1106.300s",
                          "word": "Nein,"
                        },
                        {
                          "startTime": "1106.300s",
                          "endTime": "1107.300s",
                          "word": "möchte"
                        },
                        {
                          "startTime": "1107.300s",
                          "endTime": "1107.800s",
                          "word": "meine"
                        },
                        {
                          "startTime": "1107.800s",
                          "endTime": "1107.900s",
                          "word": "Schwester"
                        },
                        {
                          "startTime": "1107.900s",
                          "endTime": "1109.900s",
                          "word": "weint"
                        },
                        {
                          "startTime": "1109.900s",
                          "endTime": "1112.600s",
                          "word": "MR"
                        },
                        {
                          "startTime": "1112.600s",
                          "endTime": "1112.900s",
                          "word": "white"
                        },
                        {
                          "startTime": "1112.900s",
                          "endTime": "1117.800s",
                          "word": "die"
                        },
                        {
                          "startTime": "1117.800s",
                          "endTime": "1118s",
                          "word": "haben"
                        },
                        {
                          "startTime": "1118s",
                          "endTime": "1118.100s",
                          "word": "der"
                        },
                        {
                          "startTime": "1118.100s",
                          "endTime": "1118.500s",
                          "word": "verstanden,"
                        },
                        {
                          "startTime": "1118.500s",
                          "endTime": "1118.600s",
                          "word": "was"
                        },
                        {
                          "startTime": "1118.600s",
                          "endTime": "1118.800s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1118.800s",
                          "endTime": "1118.900s",
                          "word": "gerade"
                        },
                        {
                          "startTime": "1118.900s",
                          "endTime": "1119.100s",
                          "word": "gesagt"
                        },
                        {
                          "startTime": "1119.100s",
                          "endTime": "1119.300s",
                          "word": "habe."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Lungenkrebs inoperabel",
                      "confidence": 0.8345041,
                      "words": [
                        {
                          "startTime": "1121.800s",
                          "endTime": "1122.700s",
                          "word": "Lungenkrebs"
                        },
                        {
                          "startTime": "1122.700s",
                          "endTime": "1123.400s",
                          "word": "inoperabel"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " bitte verzeihen Sie ich muss nur sicher sein, dass sie voll verstanden haben.",
                      "confidence": 0.9009041,
                      "words": [
                        {
                          "startTime": "1126.400s",
                          "endTime": "1127s",
                          "word": "bitte"
                        },
                        {
                          "startTime": "1127s",
                          "endTime": "1127.300s",
                          "word": "verzeihen"
                        },
                        {
                          "startTime": "1127.300s",
                          "endTime": "1127.400s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "1127.400s",
                          "endTime": "1127.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1127.600s",
                          "endTime": "1128.600s",
                          "word": "muss"
                        },
                        {
                          "startTime": "1128.600s",
                          "endTime": "1128.800s",
                          "word": "nur"
                        },
                        {
                          "startTime": "1128.800s",
                          "endTime": "1129.100s",
                          "word": "sicher"
                        },
                        {
                          "startTime": "1129.100s",
                          "endTime": "1129.300s",
                          "word": "sein,"
                        },
                        {
                          "startTime": "1129.300s",
                          "endTime": "1129.600s",
                          "word": "dass"
                        },
                        {
                          "startTime": "1129.600s",
                          "endTime": "1129.600s",
                          "word": "sie"
                        },
                        {
                          "startTime": "1129.600s",
                          "endTime": "1130s",
                          "word": "voll"
                        },
                        {
                          "startTime": "1130s",
                          "endTime": "1130.400s",
                          "word": "verstanden"
                        },
                        {
                          "startTime": "1130.400s",
                          "endTime": "1130.900s",
                          "word": "haben."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Nach der Chemotherapie habe ich bestenfalls noch ein paar Jahre.",
                      "confidence": 0.91394114,
                      "words": [
                        {
                          "startTime": "1132s",
                          "endTime": "1132.400s",
                          "word": "Nach"
                        },
                        {
                          "startTime": "1132.400s",
                          "endTime": "1132.600s",
                          "word": "der"
                        },
                        {
                          "startTime": "1132.600s",
                          "endTime": "1132.900s",
                          "word": "Chemotherapie"
                        },
                        {
                          "startTime": "1132.900s",
                          "endTime": "1133.800s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1133.800s",
                          "endTime": "1134s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1134s",
                          "endTime": "1135.300s",
                          "word": "bestenfalls"
                        },
                        {
                          "startTime": "1135.300s",
                          "endTime": "1135.800s",
                          "word": "noch"
                        },
                        {
                          "startTime": "1135.800s",
                          "endTime": "1136.400s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1136.400s",
                          "endTime": "1136.600s",
                          "word": "paar"
                        },
                        {
                          "startTime": "1136.600s",
                          "endTime": "1137s",
                          "word": "Jahre."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " es ist nur so, die haben Senf auf ihrem",
                      "confidence": 0.86730415,
                      "words": [
                        {
                          "startTime": "1139.500s",
                          "endTime": "1139.900s",
                          "word": "es"
                        },
                        {
                          "startTime": "1139.900s",
                          "endTime": "1140.200s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1140.200s",
                          "endTime": "1140.400s",
                          "word": "nur"
                        },
                        {
                          "startTime": "1140.400s",
                          "endTime": "1140.400s",
                          "word": "so,"
                        },
                        {
                          "startTime": "1140.400s",
                          "endTime": "1142s",
                          "word": "die"
                        },
                        {
                          "startTime": "1142s",
                          "endTime": "1142.200s",
                          "word": "haben"
                        },
                        {
                          "startTime": "1142.200s",
                          "endTime": "1142.900s",
                          "word": "Senf"
                        },
                        {
                          "startTime": "1142.900s",
                          "endTime": "1144s",
                          "word": "auf"
                        },
                        {
                          "startTime": "1144s",
                          "endTime": "1144.500s",
                          "word": "ihrem"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " sie haben Senf da oben aber fair.",
                      "confidence": 0.79886526,
                      "words": [
                        {
                          "startTime": "1145.700s",
                          "endTime": "1146.300s",
                          "word": "sie"
                        },
                        {
                          "startTime": "1146.300s",
                          "endTime": "1146.600s",
                          "word": "haben"
                        },
                        {
                          "startTime": "1146.600s",
                          "endTime": "1147.400s",
                          "word": "Senf"
                        },
                        {
                          "startTime": "1147.400s",
                          "endTime": "1148.100s",
                          "word": "da"
                        },
                        {
                          "startTime": "1148.100s",
                          "endTime": "1148.400s",
                          "word": "oben"
                        },
                        {
                          "startTime": "1148.400s",
                          "endTime": "1149.200s",
                          "word": "aber"
                        },
                        {
                          "startTime": "1149.200s",
                          "endTime": "1149.500s",
                          "word": "fair."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Nach meinen Aufzeichnungen habe ich das bezahlt und ich wüsste nicht, dass wir irgendwann ja natürlich ich lasse meine Bank das nachprüfen, vielleicht ist der Scheck auch bei der Post verloren gegangen, oder? Ja, ich prüfe das nach natürlich. Danke Wiederhören.",
                      "confidence": 0.8946641,
                      "words": [
                        {
                          "startTime": "1159.800s",
                          "endTime": "1160.300s",
                          "word": "Nach"
                        },
                        {
                          "startTime": "1160.300s",
                          "endTime": "1160.600s",
                          "word": "meinen"
                        },
                        {
                          "startTime": "1160.600s",
                          "endTime": "1160.700s",
                          "word": "Aufzeichnungen"
                        },
                        {
                          "startTime": "1160.700s",
                          "endTime": "1161.500s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1161.500s",
                          "endTime": "1161.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1161.600s",
                          "endTime": "1161.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "1161.700s",
                          "endTime": "1162.300s",
                          "word": "bezahlt"
                        },
                        {
                          "startTime": "1162.300s",
                          "endTime": "1162.400s",
                          "word": "und"
                        },
                        {
                          "startTime": "1162.400s",
                          "endTime": "1162.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1162.500s",
                          "endTime": "1162.800s",
                          "word": "wüsste"
                        },
                        {
                          "startTime": "1162.800s",
                          "endTime": "1162.800s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "1162.800s",
                          "endTime": "1163.100s",
                          "word": "dass"
                        },
                        {
                          "startTime": "1163.100s",
                          "endTime": "1163.200s",
                          "word": "wir"
                        },
                        {
                          "startTime": "1163.200s",
                          "endTime": "1163.800s",
                          "word": "irgendwann"
                        },
                        {
                          "startTime": "1163.800s",
                          "endTime": "1164s",
                          "word": "ja"
                        },
                        {
                          "startTime": "1164s",
                          "endTime": "1165.900s",
                          "word": "natürlich"
                        },
                        {
                          "startTime": "1165.900s",
                          "endTime": "1167.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1167.600s",
                          "endTime": "1167.900s",
                          "word": "lasse"
                        },
                        {
                          "startTime": "1167.900s",
                          "endTime": "1168.100s",
                          "word": "meine"
                        },
                        {
                          "startTime": "1168.100s",
                          "endTime": "1168.300s",
                          "word": "Bank"
                        },
                        {
                          "startTime": "1168.300s",
                          "endTime": "1168.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "1168.400s",
                          "endTime": "1169s",
                          "word": "nachprüfen,"
                        },
                        {
                          "startTime": "1169s",
                          "endTime": "1169.700s",
                          "word": "vielleicht"
                        },
                        {
                          "startTime": "1169.700s",
                          "endTime": "1169.900s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1169.900s",
                          "endTime": "1169.900s",
                          "word": "der"
                        },
                        {
                          "startTime": "1169.900s",
                          "endTime": "1170.100s",
                          "word": "Scheck"
                        },
                        {
                          "startTime": "1170.100s",
                          "endTime": "1170.300s",
                          "word": "auch"
                        },
                        {
                          "startTime": "1170.300s",
                          "endTime": "1170.400s",
                          "word": "bei"
                        },
                        {
                          "startTime": "1170.400s",
                          "endTime": "1170.500s",
                          "word": "der"
                        },
                        {
                          "startTime": "1170.500s",
                          "endTime": "1170.500s",
                          "word": "Post"
                        },
                        {
                          "startTime": "1170.500s",
                          "endTime": "1170.900s",
                          "word": "verloren"
                        },
                        {
                          "startTime": "1170.900s",
                          "endTime": "1171.200s",
                          "word": "gegangen,"
                        },
                        {
                          "startTime": "1171.200s",
                          "endTime": "1171.600s",
                          "word": "oder?"
                        },
                        {
                          "startTime": "1171.600s",
                          "endTime": "1173.300s",
                          "word": "Ja,"
                        },
                        {
                          "startTime": "1173.300s",
                          "endTime": "1173.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1173.400s",
                          "endTime": "1173.800s",
                          "word": "prüfe"
                        },
                        {
                          "startTime": "1173.800s",
                          "endTime": "1174s",
                          "word": "das"
                        },
                        {
                          "startTime": "1174s",
                          "endTime": "1174.100s",
                          "word": "nach"
                        },
                        {
                          "startTime": "1174.100s",
                          "endTime": "1175.400s",
                          "word": "natürlich."
                        },
                        {
                          "startTime": "1175.400s",
                          "endTime": "1176.700s",
                          "word": "Danke"
                        },
                        {
                          "startTime": "1176.700s",
                          "endTime": "1177.100s",
                          "word": "Wiederhören."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " hi",
                      "confidence": 0.6806351,
                      "words": [
                        {
                          "startTime": "1179.200s",
                          "endTime": "1180.500s",
                          "word": "hi"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " hi",
                      "confidence": 0.6821289,
                      "words": [
                        {
                          "startTime": "1182s",
                          "endTime": "1182.300s",
                          "word": "hi"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Hast du letzten Monat die Mastercard benutzt 15 88 bei Staples?",
                      "confidence": 0.7898233,
                      "words": [
                        {
                          "startTime": "1186.100s",
                          "endTime": "1186.600s",
                          "word": "Hast"
                        },
                        {
                          "startTime": "1186.600s",
                          "endTime": "1186.600s",
                          "word": "du"
                        },
                        {
                          "startTime": "1186.600s",
                          "endTime": "1187.100s",
                          "word": "letzten"
                        },
                        {
                          "startTime": "1187.100s",
                          "endTime": "1187.400s",
                          "word": "Monat"
                        },
                        {
                          "startTime": "1187.400s",
                          "endTime": "1187.400s",
                          "word": "die"
                        },
                        {
                          "startTime": "1187.400s",
                          "endTime": "1188.100s",
                          "word": "Mastercard"
                        },
                        {
                          "startTime": "1188.100s",
                          "endTime": "1188.600s",
                          "word": "benutzt"
                        },
                        {
                          "startTime": "1188.600s",
                          "endTime": "1190.100s",
                          "word": "15"
                        },
                        {
                          "startTime": "1190.100s",
                          "endTime": "1190.800s",
                          "word": "88"
                        },
                        {
                          "startTime": "1190.800s",
                          "endTime": "1191s",
                          "word": "bei"
                        },
                        {
                          "startTime": "1191s",
                          "endTime": "1191.400s",
                          "word": "Staples?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ja, wir haben Druckerpapier gebraucht, aber die Mastercard sollten wir doch nicht nehmen, okay, und wie war es heute bei dir?",
                      "confidence": 0.88681674,
                      "words": [
                        {
                          "startTime": "1195.600s",
                          "endTime": "1199s",
                          "word": "Ja,"
                        },
                        {
                          "startTime": "1199s",
                          "endTime": "1199.300s",
                          "word": "wir"
                        },
                        {
                          "startTime": "1199.300s",
                          "endTime": "1199.400s",
                          "word": "haben"
                        },
                        {
                          "startTime": "1199.400s",
                          "endTime": "1200.200s",
                          "word": "Druckerpapier"
                        },
                        {
                          "startTime": "1200.200s",
                          "endTime": "1200.700s",
                          "word": "gebraucht,"
                        },
                        {
                          "startTime": "1200.700s",
                          "endTime": "1201.500s",
                          "word": "aber"
                        },
                        {
                          "startTime": "1201.500s",
                          "endTime": "1201.600s",
                          "word": "die"
                        },
                        {
                          "startTime": "1201.600s",
                          "endTime": "1202.300s",
                          "word": "Mastercard"
                        },
                        {
                          "startTime": "1202.300s",
                          "endTime": "1202.600s",
                          "word": "sollten"
                        },
                        {
                          "startTime": "1202.600s",
                          "endTime": "1202.700s",
                          "word": "wir"
                        },
                        {
                          "startTime": "1202.700s",
                          "endTime": "1202.900s",
                          "word": "doch"
                        },
                        {
                          "startTime": "1202.900s",
                          "endTime": "1203.100s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1203.100s",
                          "endTime": "1203.300s",
                          "word": "nehmen,"
                        },
                        {
                          "startTime": "1203.300s",
                          "endTime": "1205.800s",
                          "word": "okay,"
                        },
                        {
                          "startTime": "1205.800s",
                          "endTime": "1207.800s",
                          "word": "und"
                        },
                        {
                          "startTime": "1207.800s",
                          "endTime": "1208s",
                          "word": "wie"
                        },
                        {
                          "startTime": "1208s",
                          "endTime": "1208.200s",
                          "word": "war"
                        },
                        {
                          "startTime": "1208.200s",
                          "endTime": "1208.200s",
                          "word": "es"
                        },
                        {
                          "startTime": "1208.200s",
                          "endTime": "1208.300s",
                          "word": "heute"
                        },
                        {
                          "startTime": "1208.300s",
                          "endTime": "1208.600s",
                          "word": "bei"
                        },
                        {
                          "startTime": "1208.600s",
                          "endTime": "1208.800s",
                          "word": "dir?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ich weiß nicht.",
                      "confidence": 0.892655,
                      "words": [
                        {
                          "startTime": "1211.700s",
                          "endTime": "1212.100s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "1212.100s",
                          "endTime": "1212.200s",
                          "word": "weiß"
                        },
                        {
                          "startTime": "1212.200s",
                          "endTime": "1212.600s",
                          "word": "nicht."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Keine Ahnung.",
                      "confidence": 0.9190642,
                      "words": [
                        {
                          "startTime": "1214.200s",
                          "endTime": "1214.800s",
                          "word": "Keine"
                        },
                        {
                          "startTime": "1214.800s",
                          "endTime": "1215.100s",
                          "word": "Ahnung."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " gut",
                      "confidence": 0.77026117,
                      "words": [
                        {
                          "startTime": "1217.900s",
                          "endTime": "1219.700s",
                          "word": "gut"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Super cute baby Miley passt es dir one.com, ich habe zu wenige Leute, ich brauche dich draußen zu waschen, ich habe gesagt, ich brauche dich trotzdem zum Autowaschen. Bist du zum Arbeiten hier oder zum oder hör die Luft starren? Komm gehen, wir kommst schon mal was mache ich scheiße auf dich und deine Augenbrauen auf dich selber.",
                      "confidence": 0.8638792,
                      "words": [
                        {
                          "startTime": "1243.600s",
                          "endTime": "1244.500s",
                          "word": "Super"
                        },
                        {
                          "startTime": "1244.500s",
                          "endTime": "1244.700s",
                          "word": "cute"
                        },
                        {
                          "startTime": "1244.700s",
                          "endTime": "1245s",
                          "word": "baby"
                        },
                        {
                          "startTime": "1245s",
                          "endTime": "1245.300s",
                          "word": "Miley"
                        },
                        {
                          "startTime": "1245.300s",
                          "endTime": "1246.900s",
                          "word": "passt"
                        },
                        {
                          "startTime": "1246.900s",
                          "endTime": "1247.200s",
                          "word": "es"
                        },
                        {
                          "startTime": "1247.200s",
                          "endTime": "1247.500s",
                          "word": "dir"
                        },
                        {
                          "startTime": "1247.500s",
                          "endTime": "1253.500s",
                          "word": "one.com,"
                        },
                        {
                          "startTime": "1253.500s",
                          "endTime": "1253.700s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1253.700s",
                          "endTime": "1253.900s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1253.900s",
                          "endTime": "1254s",
                          "word": "zu"
                        },
                        {
                          "startTime": "1254s",
                          "endTime": "1254.200s",
                          "word": "wenige"
                        },
                        {
                          "startTime": "1254.200s",
                          "endTime": "1254.400s",
                          "word": "Leute,"
                        },
                        {
                          "startTime": "1254.400s",
                          "endTime": "1254.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1254.600s",
                          "endTime": "1255s",
                          "word": "brauche"
                        },
                        {
                          "startTime": "1255s",
                          "endTime": "1255.200s",
                          "word": "dich"
                        },
                        {
                          "startTime": "1255.200s",
                          "endTime": "1255.400s",
                          "word": "draußen"
                        },
                        {
                          "startTime": "1255.400s",
                          "endTime": "1255.600s",
                          "word": "zu"
                        },
                        {
                          "startTime": "1255.600s",
                          "endTime": "1256.200s",
                          "word": "waschen,"
                        },
                        {
                          "startTime": "1256.200s",
                          "endTime": "1257.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1257.200s",
                          "endTime": "1257.300s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1257.300s",
                          "endTime": "1257.600s",
                          "word": "gesagt,"
                        },
                        {
                          "startTime": "1257.600s",
                          "endTime": "1257.800s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1257.800s",
                          "endTime": "1257.900s",
                          "word": "brauche"
                        },
                        {
                          "startTime": "1257.900s",
                          "endTime": "1258.200s",
                          "word": "dich"
                        },
                        {
                          "startTime": "1258.200s",
                          "endTime": "1258.600s",
                          "word": "trotzdem"
                        },
                        {
                          "startTime": "1258.600s",
                          "endTime": "1258.800s",
                          "word": "zum"
                        },
                        {
                          "startTime": "1258.800s",
                          "endTime": "1259.300s",
                          "word": "Autowaschen."
                        },
                        {
                          "startTime": "1259.300s",
                          "endTime": "1259.800s",
                          "word": "Bist"
                        },
                        {
                          "startTime": "1259.800s",
                          "endTime": "1259.800s",
                          "word": "du"
                        },
                        {
                          "startTime": "1259.800s",
                          "endTime": "1260s",
                          "word": "zum"
                        },
                        {
                          "startTime": "1260s",
                          "endTime": "1260.500s",
                          "word": "Arbeiten"
                        },
                        {
                          "startTime": "1260.500s",
                          "endTime": "1260.700s",
                          "word": "hier"
                        },
                        {
                          "startTime": "1260.700s",
                          "endTime": "1260.900s",
                          "word": "oder"
                        },
                        {
                          "startTime": "1260.900s",
                          "endTime": "1261.100s",
                          "word": "zum"
                        },
                        {
                          "startTime": "1261.100s",
                          "endTime": "1261.200s",
                          "word": "oder"
                        },
                        {
                          "startTime": "1261.200s",
                          "endTime": "1261.400s",
                          "word": "hör"
                        },
                        {
                          "startTime": "1261.400s",
                          "endTime": "1261.500s",
                          "word": "die"
                        },
                        {
                          "startTime": "1261.500s",
                          "endTime": "1261.800s",
                          "word": "Luft"
                        },
                        {
                          "startTime": "1261.800s",
                          "endTime": "1262.100s",
                          "word": "starren?"
                        },
                        {
                          "startTime": "1262.100s",
                          "endTime": "1262.700s",
                          "word": "Komm"
                        },
                        {
                          "startTime": "1262.700s",
                          "endTime": "1263.100s",
                          "word": "gehen,"
                        },
                        {
                          "startTime": "1263.100s",
                          "endTime": "1263.100s",
                          "word": "wir"
                        },
                        {
                          "startTime": "1263.100s",
                          "endTime": "1265.900s",
                          "word": "kommst"
                        },
                        {
                          "startTime": "1265.900s",
                          "endTime": "1266s",
                          "word": "schon"
                        },
                        {
                          "startTime": "1266s",
                          "endTime": "1266.300s",
                          "word": "mal"
                        },
                        {
                          "startTime": "1266.300s",
                          "endTime": "1269.700s",
                          "word": "was"
                        },
                        {
                          "startTime": "1269.700s",
                          "endTime": "1270.400s",
                          "word": "mache"
                        },
                        {
                          "startTime": "1270.400s",
                          "endTime": "1270.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1270.500s",
                          "endTime": "1270.900s",
                          "word": "scheiße"
                        },
                        {
                          "startTime": "1270.900s",
                          "endTime": "1271.100s",
                          "word": "auf"
                        },
                        {
                          "startTime": "1271.100s",
                          "endTime": "1271.300s",
                          "word": "dich"
                        },
                        {
                          "startTime": "1271.300s",
                          "endTime": "1272.100s",
                          "word": "und"
                        },
                        {
                          "startTime": "1272.100s",
                          "endTime": "1272.500s",
                          "word": "deine"
                        },
                        {
                          "startTime": "1272.500s",
                          "endTime": "1273s",
                          "word": "Augenbrauen"
                        },
                        {
                          "startTime": "1273s",
                          "endTime": "1275.700s",
                          "word": "auf"
                        },
                        {
                          "startTime": "1275.700s",
                          "endTime": "1277.900s",
                          "word": "dich"
                        },
                        {
                          "startTime": "1277.900s",
                          "endTime": "1278.200s",
                          "word": "selber."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Hank Hank erst wollt ich habe dich doch nicht geweckt oder nein? Nein, das ist nichts passiert, ich wollte nur ich habe über dein Angebot nachgedacht, dich mal bei deiner Arbeit zu begleiten.",
                      "confidence": 0.88655275,
                      "words": [
                        {
                          "startTime": "1336.900s",
                          "endTime": "1341.200s",
                          "word": "Hank"
                        },
                        {
                          "startTime": "1341.200s",
                          "endTime": "1342.100s",
                          "word": "Hank"
                        },
                        {
                          "startTime": "1342.100s",
                          "endTime": "1342.500s",
                          "word": "erst"
                        },
                        {
                          "startTime": "1342.500s",
                          "endTime": "1342.800s",
                          "word": "wollt"
                        },
                        {
                          "startTime": "1342.800s",
                          "endTime": "1344.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1344.600s",
                          "endTime": "1344.800s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1344.800s",
                          "endTime": "1345s",
                          "word": "dich"
                        },
                        {
                          "startTime": "1345s",
                          "endTime": "1345.100s",
                          "word": "doch"
                        },
                        {
                          "startTime": "1345.100s",
                          "endTime": "1345.200s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1345.200s",
                          "endTime": "1345.400s",
                          "word": "geweckt"
                        },
                        {
                          "startTime": "1345.400s",
                          "endTime": "1345.700s",
                          "word": "oder"
                        },
                        {
                          "startTime": "1345.700s",
                          "endTime": "1349.800s",
                          "word": "nein?"
                        },
                        {
                          "startTime": "1349.800s",
                          "endTime": "1349.900s",
                          "word": "Nein,"
                        },
                        {
                          "startTime": "1349.900s",
                          "endTime": "1350.100s",
                          "word": "das"
                        },
                        {
                          "startTime": "1350.100s",
                          "endTime": "1350.300s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1350.300s",
                          "endTime": "1350.500s",
                          "word": "nichts"
                        },
                        {
                          "startTime": "1350.500s",
                          "endTime": "1350.800s",
                          "word": "passiert,"
                        },
                        {
                          "startTime": "1350.800s",
                          "endTime": "1351.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1351.100s",
                          "endTime": "1351.500s",
                          "word": "wollte"
                        },
                        {
                          "startTime": "1351.500s",
                          "endTime": "1351.900s",
                          "word": "nur"
                        },
                        {
                          "startTime": "1351.900s",
                          "endTime": "1352s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1352s",
                          "endTime": "1353.500s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1353.500s",
                          "endTime": "1354.300s",
                          "word": "über"
                        },
                        {
                          "startTime": "1354.300s",
                          "endTime": "1354.500s",
                          "word": "dein"
                        },
                        {
                          "startTime": "1354.500s",
                          "endTime": "1354.900s",
                          "word": "Angebot"
                        },
                        {
                          "startTime": "1354.900s",
                          "endTime": "1355s",
                          "word": "nachgedacht,"
                        },
                        {
                          "startTime": "1355s",
                          "endTime": "1355.900s",
                          "word": "dich"
                        },
                        {
                          "startTime": "1355.900s",
                          "endTime": "1356.200s",
                          "word": "mal"
                        },
                        {
                          "startTime": "1356.200s",
                          "endTime": "1356.600s",
                          "word": "bei"
                        },
                        {
                          "startTime": "1356.600s",
                          "endTime": "1356.900s",
                          "word": "deiner"
                        },
                        {
                          "startTime": "1356.900s",
                          "endTime": "1357.200s",
                          "word": "Arbeit"
                        },
                        {
                          "startTime": "1357.200s",
                          "endTime": "1357.600s",
                          "word": "zu"
                        },
                        {
                          "startTime": "1357.600s",
                          "endTime": "1357.900s",
                          "word": "begleiten."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Es ist das letzte Haus rechts nicht. Das zweistöckige das dahinter das mit der seltsamen Farbe, wie nennt man das Grün Salbei bei aber dass du beim Gärtner oder was kommt, der Farbton hat Salbei kann ich was dafür, wenn du Dummbeutel nur grün kennst. Arschgeige den Ausdruck kenne ich ebenfalls.",
                      "confidence": 0.8992785,
                      "words": [
                        {
                          "startTime": "1359s",
                          "endTime": "1360.300s",
                          "word": "Es"
                        },
                        {
                          "startTime": "1360.300s",
                          "endTime": "1360.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1360.400s",
                          "endTime": "1360.500s",
                          "word": "das"
                        },
                        {
                          "startTime": "1360.500s",
                          "endTime": "1360.700s",
                          "word": "letzte"
                        },
                        {
                          "startTime": "1360.700s",
                          "endTime": "1360.900s",
                          "word": "Haus"
                        },
                        {
                          "startTime": "1360.900s",
                          "endTime": "1361.400s",
                          "word": "rechts"
                        },
                        {
                          "startTime": "1361.400s",
                          "endTime": "1362.600s",
                          "word": "nicht."
                        },
                        {
                          "startTime": "1362.600s",
                          "endTime": "1362.700s",
                          "word": "Das"
                        },
                        {
                          "startTime": "1362.700s",
                          "endTime": "1363.200s",
                          "word": "zweistöckige"
                        },
                        {
                          "startTime": "1363.200s",
                          "endTime": "1363.600s",
                          "word": "das"
                        },
                        {
                          "startTime": "1363.600s",
                          "endTime": "1364.100s",
                          "word": "dahinter"
                        },
                        {
                          "startTime": "1364.100s",
                          "endTime": "1364.300s",
                          "word": "das"
                        },
                        {
                          "startTime": "1364.300s",
                          "endTime": "1364.500s",
                          "word": "mit"
                        },
                        {
                          "startTime": "1364.500s",
                          "endTime": "1364.700s",
                          "word": "der"
                        },
                        {
                          "startTime": "1364.700s",
                          "endTime": "1365.900s",
                          "word": "seltsamen"
                        },
                        {
                          "startTime": "1365.900s",
                          "endTime": "1366.400s",
                          "word": "Farbe,"
                        },
                        {
                          "startTime": "1366.400s",
                          "endTime": "1366.800s",
                          "word": "wie"
                        },
                        {
                          "startTime": "1366.800s",
                          "endTime": "1367s",
                          "word": "nennt"
                        },
                        {
                          "startTime": "1367s",
                          "endTime": "1367.100s",
                          "word": "man"
                        },
                        {
                          "startTime": "1367.100s",
                          "endTime": "1367.300s",
                          "word": "das"
                        },
                        {
                          "startTime": "1367.300s",
                          "endTime": "1367.600s",
                          "word": "Grün"
                        },
                        {
                          "startTime": "1367.600s",
                          "endTime": "1368.900s",
                          "word": "Salbei"
                        },
                        {
                          "startTime": "1368.900s",
                          "endTime": "1371.100s",
                          "word": "bei"
                        },
                        {
                          "startTime": "1371.100s",
                          "endTime": "1372.400s",
                          "word": "aber"
                        },
                        {
                          "startTime": "1372.400s",
                          "endTime": "1372.600s",
                          "word": "dass"
                        },
                        {
                          "startTime": "1372.600s",
                          "endTime": "1372.700s",
                          "word": "du"
                        },
                        {
                          "startTime": "1372.700s",
                          "endTime": "1372.800s",
                          "word": "beim"
                        },
                        {
                          "startTime": "1372.800s",
                          "endTime": "1373.200s",
                          "word": "Gärtner"
                        },
                        {
                          "startTime": "1373.200s",
                          "endTime": "1373.400s",
                          "word": "oder"
                        },
                        {
                          "startTime": "1373.400s",
                          "endTime": "1373.600s",
                          "word": "was"
                        },
                        {
                          "startTime": "1373.600s",
                          "endTime": "1374s",
                          "word": "kommt,"
                        },
                        {
                          "startTime": "1374s",
                          "endTime": "1374.700s",
                          "word": "der"
                        },
                        {
                          "startTime": "1374.700s",
                          "endTime": "1375.200s",
                          "word": "Farbton"
                        },
                        {
                          "startTime": "1375.200s",
                          "endTime": "1375.400s",
                          "word": "hat"
                        },
                        {
                          "startTime": "1375.400s",
                          "endTime": "1375.900s",
                          "word": "Salbei"
                        },
                        {
                          "startTime": "1375.900s",
                          "endTime": "1377s",
                          "word": "kann"
                        },
                        {
                          "startTime": "1377s",
                          "endTime": "1377.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1377.200s",
                          "endTime": "1377.300s",
                          "word": "was"
                        },
                        {
                          "startTime": "1377.300s",
                          "endTime": "1377.600s",
                          "word": "dafür,"
                        },
                        {
                          "startTime": "1377.600s",
                          "endTime": "1377.800s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "1377.800s",
                          "endTime": "1378s",
                          "word": "du"
                        },
                        {
                          "startTime": "1378s",
                          "endTime": "1378.300s",
                          "word": "Dummbeutel"
                        },
                        {
                          "startTime": "1378.300s",
                          "endTime": "1378.700s",
                          "word": "nur"
                        },
                        {
                          "startTime": "1378.700s",
                          "endTime": "1379s",
                          "word": "grün"
                        },
                        {
                          "startTime": "1379s",
                          "endTime": "1379.400s",
                          "word": "kennst."
                        },
                        {
                          "startTime": "1379.400s",
                          "endTime": "1380.500s",
                          "word": "Arschgeige"
                        },
                        {
                          "startTime": "1380.500s",
                          "endTime": "1380.900s",
                          "word": "den"
                        },
                        {
                          "startTime": "1380.900s",
                          "endTime": "1381.200s",
                          "word": "Ausdruck"
                        },
                        {
                          "startTime": "1381.200s",
                          "endTime": "1381.400s",
                          "word": "kenne"
                        },
                        {
                          "startTime": "1381.400s",
                          "endTime": "1381.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1381.400s",
                          "endTime": "1381.500s",
                          "word": "ebenfalls."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ihrem Ausweis ist das Salbei farbene und wer sagt das dann mit Amphetamin? Labor ist unser Informant. Er sagt irgend so ein Typ, der sich Captain Cook nennt macht seinem Namen alle Ehre. Er sagt, er tut da immer eine Prise Chili rein ausgelassenen Mexikaner Körper von einem weißen ist auch selber voll drauf. Ja, ich sag dir was ich werde den 20er, dass er max ist. Okay, da halte ich mit.",
                      "confidence": 0.9043298,
                      "words": [
                        {
                          "startTime": "1383.500s",
                          "endTime": "1384s",
                          "word": "Ihrem"
                        },
                        {
                          "startTime": "1384s",
                          "endTime": "1384.300s",
                          "word": "Ausweis"
                        },
                        {
                          "startTime": "1384.300s",
                          "endTime": "1384.600s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1384.600s",
                          "endTime": "1384.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "1384.700s",
                          "endTime": "1385.500s",
                          "word": "Salbei"
                        },
                        {
                          "startTime": "1385.500s",
                          "endTime": "1386.200s",
                          "word": "farbene"
                        },
                        {
                          "startTime": "1386.200s",
                          "endTime": "1386.600s",
                          "word": "und"
                        },
                        {
                          "startTime": "1386.600s",
                          "endTime": "1386.700s",
                          "word": "wer"
                        },
                        {
                          "startTime": "1386.700s",
                          "endTime": "1387s",
                          "word": "sagt"
                        },
                        {
                          "startTime": "1387s",
                          "endTime": "1387s",
                          "word": "das"
                        },
                        {
                          "startTime": "1387s",
                          "endTime": "1387.200s",
                          "word": "dann"
                        },
                        {
                          "startTime": "1387.200s",
                          "endTime": "1387.400s",
                          "word": "mit"
                        },
                        {
                          "startTime": "1387.400s",
                          "endTime": "1388s",
                          "word": "Amphetamin?"
                        },
                        {
                          "startTime": "1388s",
                          "endTime": "1388.100s",
                          "word": "Labor"
                        },
                        {
                          "startTime": "1388.100s",
                          "endTime": "1388.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1388.400s",
                          "endTime": "1389.200s",
                          "word": "unser"
                        },
                        {
                          "startTime": "1389.200s",
                          "endTime": "1389.600s",
                          "word": "Informant."
                        },
                        {
                          "startTime": "1389.600s",
                          "endTime": "1390.300s",
                          "word": "Er"
                        },
                        {
                          "startTime": "1390.300s",
                          "endTime": "1390.700s",
                          "word": "sagt"
                        },
                        {
                          "startTime": "1390.700s",
                          "endTime": "1391.100s",
                          "word": "irgend"
                        },
                        {
                          "startTime": "1391.100s",
                          "endTime": "1391.200s",
                          "word": "so"
                        },
                        {
                          "startTime": "1391.200s",
                          "endTime": "1391.400s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1391.400s",
                          "endTime": "1391.400s",
                          "word": "Typ,"
                        },
                        {
                          "startTime": "1391.400s",
                          "endTime": "1391.700s",
                          "word": "der"
                        },
                        {
                          "startTime": "1391.700s",
                          "endTime": "1391.900s",
                          "word": "sich"
                        },
                        {
                          "startTime": "1391.900s",
                          "endTime": "1392.600s",
                          "word": "Captain"
                        },
                        {
                          "startTime": "1392.600s",
                          "endTime": "1392.900s",
                          "word": "Cook"
                        },
                        {
                          "startTime": "1392.900s",
                          "endTime": "1393.300s",
                          "word": "nennt"
                        },
                        {
                          "startTime": "1393.300s",
                          "endTime": "1393.500s",
                          "word": "macht"
                        },
                        {
                          "startTime": "1393.500s",
                          "endTime": "1393.700s",
                          "word": "seinem"
                        },
                        {
                          "startTime": "1393.700s",
                          "endTime": "1393.800s",
                          "word": "Namen"
                        },
                        {
                          "startTime": "1393.800s",
                          "endTime": "1394.100s",
                          "word": "alle"
                        },
                        {
                          "startTime": "1394.100s",
                          "endTime": "1394.800s",
                          "word": "Ehre."
                        },
                        {
                          "startTime": "1394.800s",
                          "endTime": "1395.500s",
                          "word": "Er"
                        },
                        {
                          "startTime": "1395.500s",
                          "endTime": "1395.700s",
                          "word": "sagt,"
                        },
                        {
                          "startTime": "1395.700s",
                          "endTime": "1395.800s",
                          "word": "er"
                        },
                        {
                          "startTime": "1395.800s",
                          "endTime": "1396s",
                          "word": "tut"
                        },
                        {
                          "startTime": "1396s",
                          "endTime": "1396.100s",
                          "word": "da"
                        },
                        {
                          "startTime": "1396.100s",
                          "endTime": "1396.100s",
                          "word": "immer"
                        },
                        {
                          "startTime": "1396.100s",
                          "endTime": "1396.400s",
                          "word": "eine"
                        },
                        {
                          "startTime": "1396.400s",
                          "endTime": "1396.600s",
                          "word": "Prise"
                        },
                        {
                          "startTime": "1396.600s",
                          "endTime": "1397s",
                          "word": "Chili"
                        },
                        {
                          "startTime": "1397s",
                          "endTime": "1397.300s",
                          "word": "rein"
                        },
                        {
                          "startTime": "1397.300s",
                          "endTime": "1400.700s",
                          "word": "ausgelassenen"
                        },
                        {
                          "startTime": "1400.700s",
                          "endTime": "1401.400s",
                          "word": "Mexikaner"
                        },
                        {
                          "startTime": "1401.400s",
                          "endTime": "1402.800s",
                          "word": "Körper"
                        },
                        {
                          "startTime": "1402.800s",
                          "endTime": "1403.800s",
                          "word": "von"
                        },
                        {
                          "startTime": "1403.800s",
                          "endTime": "1403.900s",
                          "word": "einem"
                        },
                        {
                          "startTime": "1403.900s",
                          "endTime": "1404.400s",
                          "word": "weißen"
                        },
                        {
                          "startTime": "1404.400s",
                          "endTime": "1404.900s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1404.900s",
                          "endTime": "1405.100s",
                          "word": "auch"
                        },
                        {
                          "startTime": "1405.100s",
                          "endTime": "1405.400s",
                          "word": "selber"
                        },
                        {
                          "startTime": "1405.400s",
                          "endTime": "1405.600s",
                          "word": "voll"
                        },
                        {
                          "startTime": "1405.600s",
                          "endTime": "1405.900s",
                          "word": "drauf."
                        },
                        {
                          "startTime": "1405.900s",
                          "endTime": "1406.300s",
                          "word": "Ja,"
                        },
                        {
                          "startTime": "1406.300s",
                          "endTime": "1407s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1407s",
                          "endTime": "1407.200s",
                          "word": "sag"
                        },
                        {
                          "startTime": "1407.200s",
                          "endTime": "1407.300s",
                          "word": "dir"
                        },
                        {
                          "startTime": "1407.300s",
                          "endTime": "1407.400s",
                          "word": "was"
                        },
                        {
                          "startTime": "1407.400s",
                          "endTime": "1407.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1407.500s",
                          "endTime": "1409s",
                          "word": "werde"
                        },
                        {
                          "startTime": "1409s",
                          "endTime": "1409.100s",
                          "word": "den"
                        },
                        {
                          "startTime": "1409.100s",
                          "endTime": "1409.600s",
                          "word": "20er,"
                        },
                        {
                          "startTime": "1409.600s",
                          "endTime": "1409.800s",
                          "word": "dass"
                        },
                        {
                          "startTime": "1409.800s",
                          "endTime": "1410s",
                          "word": "er"
                        },
                        {
                          "startTime": "1410s",
                          "endTime": "1410.300s",
                          "word": "max"
                        },
                        {
                          "startTime": "1410.300s",
                          "endTime": "1410.500s",
                          "word": "ist."
                        },
                        {
                          "startTime": "1410.500s",
                          "endTime": "1411.100s",
                          "word": "Okay,"
                        },
                        {
                          "startTime": "1411.100s",
                          "endTime": "1411.200s",
                          "word": "da"
                        },
                        {
                          "startTime": "1411.200s",
                          "endTime": "1411.500s",
                          "word": "halte"
                        },
                        {
                          "startTime": "1411.500s",
                          "endTime": "1411.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1411.500s",
                          "endTime": "1411.700s",
                          "word": "mit."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " come come come come come come come",
                      "confidence": 0.9190641,
                      "words": [
                        {
                          "startTime": "1414.700s",
                          "endTime": "1415.900s",
                          "word": "come"
                        },
                        {
                          "startTime": "1415.900s",
                          "endTime": "1416.100s",
                          "word": "come"
                        },
                        {
                          "startTime": "1416.100s",
                          "endTime": "1416.300s",
                          "word": "come"
                        },
                        {
                          "startTime": "1416.300s",
                          "endTime": "1416.500s",
                          "word": "come"
                        },
                        {
                          "startTime": "1416.500s",
                          "endTime": "1416.700s",
                          "word": "come"
                        },
                        {
                          "startTime": "1416.700s",
                          "endTime": "1416.900s",
                          "word": "come"
                        },
                        {
                          "startTime": "1416.900s",
                          "endTime": "1417.100s",
                          "word": "come"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " okay, der Schulbus ist vorbei. Ihr habt grünes Licht orange.",
                      "confidence": 0.8501787,
                      "words": [
                        {
                          "startTime": "1419.100s",
                          "endTime": "1421.800s",
                          "word": "okay,"
                        },
                        {
                          "startTime": "1421.800s",
                          "endTime": "1422.400s",
                          "word": "der"
                        },
                        {
                          "startTime": "1422.400s",
                          "endTime": "1422.700s",
                          "word": "Schulbus"
                        },
                        {
                          "startTime": "1422.700s",
                          "endTime": "1422.800s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1422.800s",
                          "endTime": "1423.100s",
                          "word": "vorbei."
                        },
                        {
                          "startTime": "1423.100s",
                          "endTime": "1423.300s",
                          "word": "Ihr"
                        },
                        {
                          "startTime": "1423.300s",
                          "endTime": "1423.400s",
                          "word": "habt"
                        },
                        {
                          "startTime": "1423.400s",
                          "endTime": "1423.700s",
                          "word": "grünes"
                        },
                        {
                          "startTime": "1423.700s",
                          "endTime": "1423.900s",
                          "word": "Licht"
                        },
                        {
                          "startTime": "1423.900s",
                          "endTime": "1424.100s",
                          "word": "orange."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Steht die scheißen sich die Hosen voll Methamphetamin? Labor sind auch an schönen Tagen. Scheiße, wenn man das Zeug falsch mich gibt es Senfgas Busfahren girls, na ja, soviel, ich weiß. Ja genau, das macht dann ganz schnell hinterher die Gasmasken.",
                      "confidence": 0.89854604,
                      "words": [
                        {
                          "startTime": "1430.800s",
                          "endTime": "1433.700s",
                          "word": "Steht"
                        },
                        {
                          "startTime": "1433.700s",
                          "endTime": "1433.800s",
                          "word": "die"
                        },
                        {
                          "startTime": "1433.800s",
                          "endTime": "1434.100s",
                          "word": "scheißen"
                        },
                        {
                          "startTime": "1434.100s",
                          "endTime": "1434.200s",
                          "word": "sich"
                        },
                        {
                          "startTime": "1434.200s",
                          "endTime": "1434.300s",
                          "word": "die"
                        },
                        {
                          "startTime": "1434.300s",
                          "endTime": "1434.700s",
                          "word": "Hosen"
                        },
                        {
                          "startTime": "1434.700s",
                          "endTime": "1434.900s",
                          "word": "voll"
                        },
                        {
                          "startTime": "1434.900s",
                          "endTime": "1452s",
                          "word": "Methamphetamin?"
                        },
                        {
                          "startTime": "1452s",
                          "endTime": "1452s",
                          "word": "Labor"
                        },
                        {
                          "startTime": "1452s",
                          "endTime": "1452.500s",
                          "word": "sind"
                        },
                        {
                          "startTime": "1452.500s",
                          "endTime": "1452.600s",
                          "word": "auch"
                        },
                        {
                          "startTime": "1452.600s",
                          "endTime": "1452.700s",
                          "word": "an"
                        },
                        {
                          "startTime": "1452.700s",
                          "endTime": "1453s",
                          "word": "schönen"
                        },
                        {
                          "startTime": "1453s",
                          "endTime": "1453.100s",
                          "word": "Tagen."
                        },
                        {
                          "startTime": "1453.100s",
                          "endTime": "1453.600s",
                          "word": "Scheiße,"
                        },
                        {
                          "startTime": "1453.600s",
                          "endTime": "1453.700s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "1453.700s",
                          "endTime": "1453.700s",
                          "word": "man"
                        },
                        {
                          "startTime": "1453.700s",
                          "endTime": "1454s",
                          "word": "das"
                        },
                        {
                          "startTime": "1454s",
                          "endTime": "1454s",
                          "word": "Zeug"
                        },
                        {
                          "startTime": "1454s",
                          "endTime": "1454.400s",
                          "word": "falsch"
                        },
                        {
                          "startTime": "1454.400s",
                          "endTime": "1454.600s",
                          "word": "mich"
                        },
                        {
                          "startTime": "1454.600s",
                          "endTime": "1454.800s",
                          "word": "gibt"
                        },
                        {
                          "startTime": "1454.800s",
                          "endTime": "1454.900s",
                          "word": "es"
                        },
                        {
                          "startTime": "1454.900s",
                          "endTime": "1455.300s",
                          "word": "Senfgas"
                        },
                        {
                          "startTime": "1455.300s",
                          "endTime": "1456.400s",
                          "word": "Busfahren"
                        },
                        {
                          "startTime": "1456.400s",
                          "endTime": "1456.800s",
                          "word": "girls,"
                        },
                        {
                          "startTime": "1456.800s",
                          "endTime": "1458.600s",
                          "word": "na"
                        },
                        {
                          "startTime": "1458.600s",
                          "endTime": "1458.700s",
                          "word": "ja,"
                        },
                        {
                          "startTime": "1458.700s",
                          "endTime": "1458.900s",
                          "word": "soviel,"
                        },
                        {
                          "startTime": "1458.900s",
                          "endTime": "1459.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1459.100s",
                          "endTime": "1459.300s",
                          "word": "weiß."
                        },
                        {
                          "startTime": "1459.300s",
                          "endTime": "1459.400s",
                          "word": "Ja"
                        },
                        {
                          "startTime": "1459.400s",
                          "endTime": "1460.100s",
                          "word": "genau,"
                        },
                        {
                          "startTime": "1460.100s",
                          "endTime": "1460.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "1460.900s",
                          "endTime": "1461.200s",
                          "word": "macht"
                        },
                        {
                          "startTime": "1461.200s",
                          "endTime": "1461.300s",
                          "word": "dann"
                        },
                        {
                          "startTime": "1461.300s",
                          "endTime": "1461.600s",
                          "word": "ganz"
                        },
                        {
                          "startTime": "1461.600s",
                          "endTime": "1461.700s",
                          "word": "schnell"
                        },
                        {
                          "startTime": "1461.700s",
                          "endTime": "1462.200s",
                          "word": "hinterher"
                        },
                        {
                          "startTime": "1462.200s",
                          "endTime": "1462.400s",
                          "word": "die"
                        },
                        {
                          "startTime": "1462.400s",
                          "endTime": "1463s",
                          "word": "Gasmasken."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Theorie der Tag ist der Verdächtige ein Latino zufällig sie hatte dann gib mal her die hey hey wenigstens eine halbe Amex ein Vorschlag, ich gebe den Zehner zurück, ihr habt ja immernoch zado Hank.",
                      "confidence": 0.82228315,
                      "words": [
                        {
                          "startTime": "1490.700s",
                          "endTime": "1493.500s",
                          "word": "Theorie"
                        },
                        {
                          "startTime": "1493.500s",
                          "endTime": "1493.800s",
                          "word": "der"
                        },
                        {
                          "startTime": "1493.800s",
                          "endTime": "1494s",
                          "word": "Tag"
                        },
                        {
                          "startTime": "1494s",
                          "endTime": "1516.200s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1516.200s",
                          "endTime": "1516.200s",
                          "word": "der"
                        },
                        {
                          "startTime": "1516.200s",
                          "endTime": "1516.600s",
                          "word": "Verdächtige"
                        },
                        {
                          "startTime": "1516.600s",
                          "endTime": "1517.100s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1517.100s",
                          "endTime": "1518s",
                          "word": "Latino"
                        },
                        {
                          "startTime": "1518s",
                          "endTime": "1518.700s",
                          "word": "zufällig"
                        },
                        {
                          "startTime": "1518.700s",
                          "endTime": "1522.700s",
                          "word": "sie"
                        },
                        {
                          "startTime": "1522.700s",
                          "endTime": "1523.100s",
                          "word": "hatte"
                        },
                        {
                          "startTime": "1523.100s",
                          "endTime": "1523.500s",
                          "word": "dann"
                        },
                        {
                          "startTime": "1523.500s",
                          "endTime": "1523.600s",
                          "word": "gib"
                        },
                        {
                          "startTime": "1523.600s",
                          "endTime": "1523.800s",
                          "word": "mal"
                        },
                        {
                          "startTime": "1523.800s",
                          "endTime": "1523.900s",
                          "word": "her"
                        },
                        {
                          "startTime": "1523.900s",
                          "endTime": "1524s",
                          "word": "die"
                        },
                        {
                          "startTime": "1524s",
                          "endTime": "1524.500s",
                          "word": "hey"
                        },
                        {
                          "startTime": "1524.500s",
                          "endTime": "1524.900s",
                          "word": "hey"
                        },
                        {
                          "startTime": "1524.900s",
                          "endTime": "1527s",
                          "word": "wenigstens"
                        },
                        {
                          "startTime": "1527s",
                          "endTime": "1527.500s",
                          "word": "eine"
                        },
                        {
                          "startTime": "1527.500s",
                          "endTime": "1527.700s",
                          "word": "halbe"
                        },
                        {
                          "startTime": "1527.700s",
                          "endTime": "1528.100s",
                          "word": "Amex"
                        },
                        {
                          "startTime": "1528.100s",
                          "endTime": "1528.600s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1528.600s",
                          "endTime": "1529.100s",
                          "word": "Vorschlag,"
                        },
                        {
                          "startTime": "1529.100s",
                          "endTime": "1529.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1529.200s",
                          "endTime": "1530s",
                          "word": "gebe"
                        },
                        {
                          "startTime": "1530s",
                          "endTime": "1530.100s",
                          "word": "den"
                        },
                        {
                          "startTime": "1530.100s",
                          "endTime": "1530.400s",
                          "word": "Zehner"
                        },
                        {
                          "startTime": "1530.400s",
                          "endTime": "1530.600s",
                          "word": "zurück,"
                        },
                        {
                          "startTime": "1530.600s",
                          "endTime": "1534.500s",
                          "word": "ihr"
                        },
                        {
                          "startTime": "1534.500s",
                          "endTime": "1534.700s",
                          "word": "habt"
                        },
                        {
                          "startTime": "1534.700s",
                          "endTime": "1534.700s",
                          "word": "ja"
                        },
                        {
                          "startTime": "1534.700s",
                          "endTime": "1534.900s",
                          "word": "immernoch"
                        },
                        {
                          "startTime": "1534.900s",
                          "endTime": "1535.300s",
                          "word": "zado"
                        },
                        {
                          "startTime": "1535.300s",
                          "endTime": "1536s",
                          "word": "Hank."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Glaubst du, ich könnte da mal mit rein und mal das Labor zu sehen?",
                      "confidence": 0.90661705,
                      "words": [
                        {
                          "startTime": "1537.600s",
                          "endTime": "1538.100s",
                          "word": "Glaubst"
                        },
                        {
                          "startTime": "1538.100s",
                          "endTime": "1538.200s",
                          "word": "du,"
                        },
                        {
                          "startTime": "1538.200s",
                          "endTime": "1538.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1538.300s",
                          "endTime": "1538.400s",
                          "word": "könnte"
                        },
                        {
                          "startTime": "1538.400s",
                          "endTime": "1538.600s",
                          "word": "da"
                        },
                        {
                          "startTime": "1538.600s",
                          "endTime": "1538.800s",
                          "word": "mal"
                        },
                        {
                          "startTime": "1538.800s",
                          "endTime": "1538.900s",
                          "word": "mit"
                        },
                        {
                          "startTime": "1538.900s",
                          "endTime": "1539.100s",
                          "word": "rein"
                        },
                        {
                          "startTime": "1539.100s",
                          "endTime": "1539.200s",
                          "word": "und"
                        },
                        {
                          "startTime": "1539.200s",
                          "endTime": "1540.300s",
                          "word": "mal"
                        },
                        {
                          "startTime": "1540.300s",
                          "endTime": "1540.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "1540.400s",
                          "endTime": "1540.700s",
                          "word": "Labor"
                        },
                        {
                          "startTime": "1540.700s",
                          "endTime": "1540.800s",
                          "word": "zu"
                        },
                        {
                          "startTime": "1540.800s",
                          "endTime": "1541.100s",
                          "word": "sehen?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ja, ich sag dir was erst gehen wir rein und sehe nach ob alles sicher ist, du wartest ja ein Augenblick.",
                      "confidence": 0.87408835,
                      "words": [
                        {
                          "startTime": "1545.500s",
                          "endTime": "1546s",
                          "word": "Ja,"
                        },
                        {
                          "startTime": "1546s",
                          "endTime": "1546.700s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1546.700s",
                          "endTime": "1546.900s",
                          "word": "sag"
                        },
                        {
                          "startTime": "1546.900s",
                          "endTime": "1547s",
                          "word": "dir"
                        },
                        {
                          "startTime": "1547s",
                          "endTime": "1547.100s",
                          "word": "was"
                        },
                        {
                          "startTime": "1547.100s",
                          "endTime": "1547.400s",
                          "word": "erst"
                        },
                        {
                          "startTime": "1547.400s",
                          "endTime": "1547.700s",
                          "word": "gehen"
                        },
                        {
                          "startTime": "1547.700s",
                          "endTime": "1547.800s",
                          "word": "wir"
                        },
                        {
                          "startTime": "1547.800s",
                          "endTime": "1548s",
                          "word": "rein"
                        },
                        {
                          "startTime": "1548s",
                          "endTime": "1548.200s",
                          "word": "und"
                        },
                        {
                          "startTime": "1548.200s",
                          "endTime": "1549.200s",
                          "word": "sehe"
                        },
                        {
                          "startTime": "1549.200s",
                          "endTime": "1549.300s",
                          "word": "nach"
                        },
                        {
                          "startTime": "1549.300s",
                          "endTime": "1549.500s",
                          "word": "ob"
                        },
                        {
                          "startTime": "1549.500s",
                          "endTime": "1549.800s",
                          "word": "alles"
                        },
                        {
                          "startTime": "1549.800s",
                          "endTime": "1550s",
                          "word": "sicher"
                        },
                        {
                          "startTime": "1550s",
                          "endTime": "1550.200s",
                          "word": "ist,"
                        },
                        {
                          "startTime": "1550.200s",
                          "endTime": "1551.300s",
                          "word": "du"
                        },
                        {
                          "startTime": "1551.300s",
                          "endTime": "1551.500s",
                          "word": "wartest"
                        },
                        {
                          "startTime": "1551.500s",
                          "endTime": "1551.700s",
                          "word": "ja"
                        },
                        {
                          "startTime": "1551.700s",
                          "endTime": "1551.800s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1551.800s",
                          "endTime": "1552.100s",
                          "word": "Augenblick."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " super",
                      "confidence": 0.71778613,
                      "words": [
                        {
                          "startTime": "1572.500s",
                          "endTime": "1574.300s",
                          "word": "super"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Das gibt's doch nicht.",
                      "confidence": 0.8273741,
                      "words": [
                        {
                          "startTime": "1577.900s",
                          "endTime": "1593s",
                          "word": "Das"
                        },
                        {
                          "startTime": "1593s",
                          "endTime": "1593.200s",
                          "word": "gibt's"
                        },
                        {
                          "startTime": "1593.200s",
                          "endTime": "1593.300s",
                          "word": "doch"
                        },
                        {
                          "startTime": "1593.300s",
                          "endTime": "1593.500s",
                          "word": "nicht."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Hey, ich bin's, ich bin allein.",
                      "confidence": 0.9103367,
                      "words": [
                        {
                          "startTime": "1651.300s",
                          "endTime": "1653.900s",
                          "word": "Hey,"
                        },
                        {
                          "startTime": "1653.900s",
                          "endTime": "1655.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1655.100s",
                          "endTime": "1655.500s",
                          "word": "bin's,"
                        },
                        {
                          "startTime": "1655.500s",
                          "endTime": "1655.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1655.600s",
                          "endTime": "1656.400s",
                          "word": "bin"
                        },
                        {
                          "startTime": "1656.400s",
                          "endTime": "1656.700s",
                          "word": "allein."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wie haben Sie mich gefunden?",
                      "confidence": 0.8611889,
                      "words": [
                        {
                          "startTime": "1663.800s",
                          "endTime": "1664.200s",
                          "word": "Wie"
                        },
                        {
                          "startTime": "1664.200s",
                          "endTime": "1664.400s",
                          "word": "haben"
                        },
                        {
                          "startTime": "1664.400s",
                          "endTime": "1664.500s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "1664.500s",
                          "endTime": "1664.600s",
                          "word": "mich"
                        },
                        {
                          "startTime": "1664.600s",
                          "endTime": "1664.800s",
                          "word": "gefunden?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Du bist immer noch in den schulakten.",
                      "confidence": 0.82747865,
                      "words": [
                        {
                          "startTime": "1666s",
                          "endTime": "1666.300s",
                          "word": "Du"
                        },
                        {
                          "startTime": "1666.300s",
                          "endTime": "1666.600s",
                          "word": "bist"
                        },
                        {
                          "startTime": "1666.600s",
                          "endTime": "1666.700s",
                          "word": "immer"
                        },
                        {
                          "startTime": "1666.700s",
                          "endTime": "1666.800s",
                          "word": "noch"
                        },
                        {
                          "startTime": "1666.800s",
                          "endTime": "1667s",
                          "word": "in"
                        },
                        {
                          "startTime": "1667s",
                          "endTime": "1667.100s",
                          "word": "den"
                        },
                        {
                          "startTime": "1667.100s",
                          "endTime": "1667.700s",
                          "word": "schulakten."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Das Haus hier das gehört doch deiner Tante nicht wahr, das gehört mir.",
                      "confidence": 0.8506063,
                      "words": [
                        {
                          "startTime": "1671s",
                          "endTime": "1671.400s",
                          "word": "Das"
                        },
                        {
                          "startTime": "1671.400s",
                          "endTime": "1671.600s",
                          "word": "Haus"
                        },
                        {
                          "startTime": "1671.600s",
                          "endTime": "1671.900s",
                          "word": "hier"
                        },
                        {
                          "startTime": "1671.900s",
                          "endTime": "1672.200s",
                          "word": "das"
                        },
                        {
                          "startTime": "1672.200s",
                          "endTime": "1672.500s",
                          "word": "gehört"
                        },
                        {
                          "startTime": "1672.500s",
                          "endTime": "1672.600s",
                          "word": "doch"
                        },
                        {
                          "startTime": "1672.600s",
                          "endTime": "1672.800s",
                          "word": "deiner"
                        },
                        {
                          "startTime": "1672.800s",
                          "endTime": "1673.100s",
                          "word": "Tante"
                        },
                        {
                          "startTime": "1673.100s",
                          "endTime": "1673.400s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1673.400s",
                          "endTime": "1673.600s",
                          "word": "wahr,"
                        },
                        {
                          "startTime": "1673.600s",
                          "endTime": "1674.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "1674.800s",
                          "endTime": "1675s",
                          "word": "gehört"
                        },
                        {
                          "startTime": "1675s",
                          "endTime": "1675.200s",
                          "word": "mir."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Niemand sucht nach dir, was wollen Sie hier?",
                      "confidence": 0.87135935,
                      "words": [
                        {
                          "startTime": "1679.400s",
                          "endTime": "1680.100s",
                          "word": "Niemand"
                        },
                        {
                          "startTime": "1680.100s",
                          "endTime": "1680.200s",
                          "word": "sucht"
                        },
                        {
                          "startTime": "1680.200s",
                          "endTime": "1680.600s",
                          "word": "nach"
                        },
                        {
                          "startTime": "1680.600s",
                          "endTime": "1680.800s",
                          "word": "dir,"
                        },
                        {
                          "startTime": "1680.800s",
                          "endTime": "1681.400s",
                          "word": "was"
                        },
                        {
                          "startTime": "1681.400s",
                          "endTime": "1681.600s",
                          "word": "wollen"
                        },
                        {
                          "startTime": "1681.600s",
                          "endTime": "1681.700s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "1681.700s",
                          "endTime": "1681.800s",
                          "word": "hier?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ich war neugierig offen gesagt habe ich nie erwartet, dass du es besonders weit bringen würdest dabei Methamphetamin.",
                      "confidence": 0.8755916,
                      "words": [
                        {
                          "startTime": "1683.400s",
                          "endTime": "1683.700s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "1683.700s",
                          "endTime": "1683.900s",
                          "word": "war"
                        },
                        {
                          "startTime": "1683.900s",
                          "endTime": "1684.600s",
                          "word": "neugierig"
                        },
                        {
                          "startTime": "1684.600s",
                          "endTime": "1685.700s",
                          "word": "offen"
                        },
                        {
                          "startTime": "1685.700s",
                          "endTime": "1686s",
                          "word": "gesagt"
                        },
                        {
                          "startTime": "1686s",
                          "endTime": "1686.400s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1686.400s",
                          "endTime": "1686.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1686.400s",
                          "endTime": "1686.600s",
                          "word": "nie"
                        },
                        {
                          "startTime": "1686.600s",
                          "endTime": "1686.800s",
                          "word": "erwartet,"
                        },
                        {
                          "startTime": "1686.800s",
                          "endTime": "1687s",
                          "word": "dass"
                        },
                        {
                          "startTime": "1687s",
                          "endTime": "1687.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "1687.200s",
                          "endTime": "1687.300s",
                          "word": "es"
                        },
                        {
                          "startTime": "1687.300s",
                          "endTime": "1687.500s",
                          "word": "besonders"
                        },
                        {
                          "startTime": "1687.500s",
                          "endTime": "1687.800s",
                          "word": "weit"
                        },
                        {
                          "startTime": "1687.800s",
                          "endTime": "1688.100s",
                          "word": "bringen"
                        },
                        {
                          "startTime": "1688.100s",
                          "endTime": "1688.500s",
                          "word": "würdest"
                        },
                        {
                          "startTime": "1688.500s",
                          "endTime": "1688.700s",
                          "word": "dabei"
                        },
                        {
                          "startTime": "1688.700s",
                          "endTime": "1690.100s",
                          "word": "Methamphetamin."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Damit habe ich nicht gerechnet.",
                      "confidence": 0.9190641,
                      "words": [
                        {
                          "startTime": "1692.900s",
                          "endTime": "1693.500s",
                          "word": "Damit"
                        },
                        {
                          "startTime": "1693.500s",
                          "endTime": "1693.600s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1693.600s",
                          "endTime": "1693.700s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1693.700s",
                          "endTime": "1693.900s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1693.900s",
                          "endTime": "1694s",
                          "word": "gerechnet."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Da ist viel Geld drinne, ich habe keine Ahnung, wovon sie reden. Nein keinen Schimmer.",
                      "confidence": 0.91439146,
                      "words": [
                        {
                          "startTime": "1696.400s",
                          "endTime": "1696.800s",
                          "word": "Da"
                        },
                        {
                          "startTime": "1696.800s",
                          "endTime": "1697s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1697s",
                          "endTime": "1697.100s",
                          "word": "viel"
                        },
                        {
                          "startTime": "1697.100s",
                          "endTime": "1697.300s",
                          "word": "Geld"
                        },
                        {
                          "startTime": "1697.300s",
                          "endTime": "1697.700s",
                          "word": "drinne,"
                        },
                        {
                          "startTime": "1697.700s",
                          "endTime": "1698.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1698.600s",
                          "endTime": "1698.800s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1698.800s",
                          "endTime": "1699.100s",
                          "word": "keine"
                        },
                        {
                          "startTime": "1699.100s",
                          "endTime": "1699.100s",
                          "word": "Ahnung,"
                        },
                        {
                          "startTime": "1699.100s",
                          "endTime": "1699.500s",
                          "word": "wovon"
                        },
                        {
                          "startTime": "1699.500s",
                          "endTime": "1699.700s",
                          "word": "sie"
                        },
                        {
                          "startTime": "1699.700s",
                          "endTime": "1700.100s",
                          "word": "reden."
                        },
                        {
                          "startTime": "1700.100s",
                          "endTime": "1700.300s",
                          "word": "Nein"
                        },
                        {
                          "startTime": "1700.300s",
                          "endTime": "1701s",
                          "word": "keinen"
                        },
                        {
                          "startTime": "1701s",
                          "endTime": "1701.300s",
                          "word": "Schimmer."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Käpt'n kuck",
                      "confidence": 0.9106021,
                      "words": [
                        {
                          "startTime": "1703.800s",
                          "endTime": "1704.300s",
                          "word": "Käpt'n"
                        },
                        {
                          "startTime": "1704.300s",
                          "endTime": "1704.500s",
                          "word": "kuck"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " das bist nicht du.",
                      "confidence": 0.89037097,
                      "words": [
                        {
                          "startTime": "1706s",
                          "endTime": "1706.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "1706.400s",
                          "endTime": "1706.600s",
                          "word": "bist"
                        },
                        {
                          "startTime": "1706.600s",
                          "endTime": "1706.600s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1706.600s",
                          "endTime": "1706.800s",
                          "word": "du."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wie ich gesagt habe, niemand sucht nach dir, ich weiß wirklich nicht, was ich hier wollen Mr. White.",
                      "confidence": 0.8922837,
                      "words": [
                        {
                          "startTime": "1713.800s",
                          "endTime": "1714.200s",
                          "word": "Wie"
                        },
                        {
                          "startTime": "1714.200s",
                          "endTime": "1714.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1714.400s",
                          "endTime": "1714.700s",
                          "word": "gesagt"
                        },
                        {
                          "startTime": "1714.700s",
                          "endTime": "1715.100s",
                          "word": "habe,"
                        },
                        {
                          "startTime": "1715.100s",
                          "endTime": "1715.600s",
                          "word": "niemand"
                        },
                        {
                          "startTime": "1715.600s",
                          "endTime": "1715.900s",
                          "word": "sucht"
                        },
                        {
                          "startTime": "1715.900s",
                          "endTime": "1716.100s",
                          "word": "nach"
                        },
                        {
                          "startTime": "1716.100s",
                          "endTime": "1716.300s",
                          "word": "dir,"
                        },
                        {
                          "startTime": "1716.300s",
                          "endTime": "1716.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1716.500s",
                          "endTime": "1716.700s",
                          "word": "weiß"
                        },
                        {
                          "startTime": "1716.700s",
                          "endTime": "1716.900s",
                          "word": "wirklich"
                        },
                        {
                          "startTime": "1716.900s",
                          "endTime": "1717.100s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "1717.100s",
                          "endTime": "1717.300s",
                          "word": "was"
                        },
                        {
                          "startTime": "1717.300s",
                          "endTime": "1717.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1717.400s",
                          "endTime": "1717.500s",
                          "word": "hier"
                        },
                        {
                          "startTime": "1717.500s",
                          "endTime": "1717.800s",
                          "word": "wollen"
                        },
                        {
                          "startTime": "1717.800s",
                          "endTime": "1718.800s",
                          "word": "Mr."
                        },
                        {
                          "startTime": "1718.800s",
                          "endTime": "1719.100s",
                          "word": "White."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Falls Sie vorhaben mir hier eine Moralpredigt zu halten, dass ich mit Jesus wieder auf den rechten Weg hinhalten oder dass ich mich stellen soll eigentlich nicht. Die Highschool ist schon verdammt lange her, wir sind hier nicht bei Welcome Back Kotter, also verpassen Sie sich keine Ansprachen bloß eine kurze du hast heute deinen Partner verloren, wie heißt der Typ?",
                      "confidence": 0.90050894,
                      "words": [
                        {
                          "startTime": "1720.200s",
                          "endTime": "1720.700s",
                          "word": "Falls"
                        },
                        {
                          "startTime": "1720.700s",
                          "endTime": "1720.800s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "1720.800s",
                          "endTime": "1721s",
                          "word": "vorhaben"
                        },
                        {
                          "startTime": "1721s",
                          "endTime": "1721.300s",
                          "word": "mir"
                        },
                        {
                          "startTime": "1721.300s",
                          "endTime": "1721.400s",
                          "word": "hier"
                        },
                        {
                          "startTime": "1721.400s",
                          "endTime": "1721.600s",
                          "word": "eine"
                        },
                        {
                          "startTime": "1721.600s",
                          "endTime": "1723.100s",
                          "word": "Moralpredigt"
                        },
                        {
                          "startTime": "1723.100s",
                          "endTime": "1723.400s",
                          "word": "zu"
                        },
                        {
                          "startTime": "1723.400s",
                          "endTime": "1723.700s",
                          "word": "halten,"
                        },
                        {
                          "startTime": "1723.700s",
                          "endTime": "1723.800s",
                          "word": "dass"
                        },
                        {
                          "startTime": "1723.800s",
                          "endTime": "1723.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1723.900s",
                          "endTime": "1724s",
                          "word": "mit"
                        },
                        {
                          "startTime": "1724s",
                          "endTime": "1724.100s",
                          "word": "Jesus"
                        },
                        {
                          "startTime": "1724.100s",
                          "endTime": "1724.500s",
                          "word": "wieder"
                        },
                        {
                          "startTime": "1724.500s",
                          "endTime": "1724.500s",
                          "word": "auf"
                        },
                        {
                          "startTime": "1724.500s",
                          "endTime": "1724.600s",
                          "word": "den"
                        },
                        {
                          "startTime": "1724.600s",
                          "endTime": "1724.700s",
                          "word": "rechten"
                        },
                        {
                          "startTime": "1724.700s",
                          "endTime": "1725s",
                          "word": "Weg"
                        },
                        {
                          "startTime": "1725s",
                          "endTime": "1725.500s",
                          "word": "hinhalten"
                        },
                        {
                          "startTime": "1725.500s",
                          "endTime": "1725.500s",
                          "word": "oder"
                        },
                        {
                          "startTime": "1725.500s",
                          "endTime": "1725.800s",
                          "word": "dass"
                        },
                        {
                          "startTime": "1725.800s",
                          "endTime": "1725.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1725.900s",
                          "endTime": "1726.100s",
                          "word": "mich"
                        },
                        {
                          "startTime": "1726.100s",
                          "endTime": "1726.300s",
                          "word": "stellen"
                        },
                        {
                          "startTime": "1726.300s",
                          "endTime": "1726.500s",
                          "word": "soll"
                        },
                        {
                          "startTime": "1726.500s",
                          "endTime": "1727.100s",
                          "word": "eigentlich"
                        },
                        {
                          "startTime": "1727.100s",
                          "endTime": "1727.400s",
                          "word": "nicht."
                        },
                        {
                          "startTime": "1727.400s",
                          "endTime": "1727.500s",
                          "word": "Die"
                        },
                        {
                          "startTime": "1727.500s",
                          "endTime": "1727.900s",
                          "word": "Highschool"
                        },
                        {
                          "startTime": "1727.900s",
                          "endTime": "1728s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1728s",
                          "endTime": "1728.100s",
                          "word": "schon"
                        },
                        {
                          "startTime": "1728.100s",
                          "endTime": "1728.400s",
                          "word": "verdammt"
                        },
                        {
                          "startTime": "1728.400s",
                          "endTime": "1728.700s",
                          "word": "lange"
                        },
                        {
                          "startTime": "1728.700s",
                          "endTime": "1728.900s",
                          "word": "her,"
                        },
                        {
                          "startTime": "1728.900s",
                          "endTime": "1729.800s",
                          "word": "wir"
                        },
                        {
                          "startTime": "1729.800s",
                          "endTime": "1730s",
                          "word": "sind"
                        },
                        {
                          "startTime": "1730s",
                          "endTime": "1730.100s",
                          "word": "hier"
                        },
                        {
                          "startTime": "1730.100s",
                          "endTime": "1730.200s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1730.200s",
                          "endTime": "1730.300s",
                          "word": "bei"
                        },
                        {
                          "startTime": "1730.300s",
                          "endTime": "1730.700s",
                          "word": "Welcome"
                        },
                        {
                          "startTime": "1730.700s",
                          "endTime": "1730.800s",
                          "word": "Back"
                        },
                        {
                          "startTime": "1730.800s",
                          "endTime": "1731s",
                          "word": "Kotter,"
                        },
                        {
                          "startTime": "1731s",
                          "endTime": "1731.500s",
                          "word": "also"
                        },
                        {
                          "startTime": "1731.500s",
                          "endTime": "1732s",
                          "word": "verpassen"
                        },
                        {
                          "startTime": "1732s",
                          "endTime": "1732.100s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "1732.100s",
                          "endTime": "1732.300s",
                          "word": "sich"
                        },
                        {
                          "startTime": "1732.300s",
                          "endTime": "1732.800s",
                          "word": "keine"
                        },
                        {
                          "startTime": "1732.800s",
                          "endTime": "1733.400s",
                          "word": "Ansprachen"
                        },
                        {
                          "startTime": "1733.400s",
                          "endTime": "1734.600s",
                          "word": "bloß"
                        },
                        {
                          "startTime": "1734.600s",
                          "endTime": "1734.800s",
                          "word": "eine"
                        },
                        {
                          "startTime": "1734.800s",
                          "endTime": "1735.100s",
                          "word": "kurze"
                        },
                        {
                          "startTime": "1735.100s",
                          "endTime": "1736.500s",
                          "word": "du"
                        },
                        {
                          "startTime": "1736.500s",
                          "endTime": "1736.600s",
                          "word": "hast"
                        },
                        {
                          "startTime": "1736.600s",
                          "endTime": "1736.900s",
                          "word": "heute"
                        },
                        {
                          "startTime": "1736.900s",
                          "endTime": "1737.100s",
                          "word": "deinen"
                        },
                        {
                          "startTime": "1737.100s",
                          "endTime": "1737.300s",
                          "word": "Partner"
                        },
                        {
                          "startTime": "1737.300s",
                          "endTime": "1737.800s",
                          "word": "verloren,"
                        },
                        {
                          "startTime": "1737.800s",
                          "endTime": "1738s",
                          "word": "wie"
                        },
                        {
                          "startTime": "1738s",
                          "endTime": "1738.200s",
                          "word": "heißt"
                        },
                        {
                          "startTime": "1738.200s",
                          "endTime": "1738.300s",
                          "word": "der"
                        },
                        {
                          "startTime": "1738.300s",
                          "endTime": "1738.400s",
                          "word": "Typ?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Emilio",
                      "confidence": 0.91906416,
                      "words": [
                        {
                          "startTime": "1739.800s",
                          "endTime": "1741.200s",
                          "word": "Emilio"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Emilio wandert in den Knast",
                      "confidence": 0.88104385,
                      "words": [
                        {
                          "startTime": "1743s",
                          "endTime": "1743.700s",
                          "word": "Emilio"
                        },
                        {
                          "startTime": "1743.700s",
                          "endTime": "1744.100s",
                          "word": "wandert"
                        },
                        {
                          "startTime": "1744.100s",
                          "endTime": "1744.200s",
                          "word": "in"
                        },
                        {
                          "startTime": "1744.200s",
                          "endTime": "1744.400s",
                          "word": "den"
                        },
                        {
                          "startTime": "1744.400s",
                          "endTime": "1744.600s",
                          "word": "Knast"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Die DEL hat dein Geld beschlagnahmt dann LABOR.",
                      "confidence": 0.81509435,
                      "words": [
                        {
                          "startTime": "1746.300s",
                          "endTime": "1747.300s",
                          "word": "Die"
                        },
                        {
                          "startTime": "1747.300s",
                          "endTime": "1747.700s",
                          "word": "DEL"
                        },
                        {
                          "startTime": "1747.700s",
                          "endTime": "1747.900s",
                          "word": "hat"
                        },
                        {
                          "startTime": "1747.900s",
                          "endTime": "1748s",
                          "word": "dein"
                        },
                        {
                          "startTime": "1748s",
                          "endTime": "1748.300s",
                          "word": "Geld"
                        },
                        {
                          "startTime": "1748.300s",
                          "endTime": "1749.100s",
                          "word": "beschlagnahmt"
                        },
                        {
                          "startTime": "1749.100s",
                          "endTime": "1749.300s",
                          "word": "dann"
                        },
                        {
                          "startTime": "1749.300s",
                          "endTime": "1750.400s",
                          "word": "LABOR."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Du hast gar nichts mehr bringst wieder von vorn an, aber du kennst das Geschäft.",
                      "confidence": 0.90928257,
                      "words": [
                        {
                          "startTime": "1751.800s",
                          "endTime": "1752.200s",
                          "word": "Du"
                        },
                        {
                          "startTime": "1752.200s",
                          "endTime": "1752.400s",
                          "word": "hast"
                        },
                        {
                          "startTime": "1752.400s",
                          "endTime": "1752.500s",
                          "word": "gar"
                        },
                        {
                          "startTime": "1752.500s",
                          "endTime": "1752.800s",
                          "word": "nichts"
                        },
                        {
                          "startTime": "1752.800s",
                          "endTime": "1752.900s",
                          "word": "mehr"
                        },
                        {
                          "startTime": "1752.900s",
                          "endTime": "1754.300s",
                          "word": "bringst"
                        },
                        {
                          "startTime": "1754.300s",
                          "endTime": "1754.400s",
                          "word": "wieder"
                        },
                        {
                          "startTime": "1754.400s",
                          "endTime": "1754.600s",
                          "word": "von"
                        },
                        {
                          "startTime": "1754.600s",
                          "endTime": "1755s",
                          "word": "vorn"
                        },
                        {
                          "startTime": "1755s",
                          "endTime": "1755.100s",
                          "word": "an,"
                        },
                        {
                          "startTime": "1755.100s",
                          "endTime": "1756.400s",
                          "word": "aber"
                        },
                        {
                          "startTime": "1756.400s",
                          "endTime": "1756.500s",
                          "word": "du"
                        },
                        {
                          "startTime": "1756.500s",
                          "endTime": "1756.700s",
                          "word": "kennst"
                        },
                        {
                          "startTime": "1756.700s",
                          "endTime": "1756.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "1756.800s",
                          "endTime": "1757.400s",
                          "word": "Geschäft."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Und ich kenne mich mit Chemie aus.",
                      "confidence": 0.8888858,
                      "words": [
                        {
                          "startTime": "1759.300s",
                          "endTime": "1759.700s",
                          "word": "Und"
                        },
                        {
                          "startTime": "1759.700s",
                          "endTime": "1759.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1759.900s",
                          "endTime": "1760.200s",
                          "word": "kenne"
                        },
                        {
                          "startTime": "1760.200s",
                          "endTime": "1760.300s",
                          "word": "mich"
                        },
                        {
                          "startTime": "1760.300s",
                          "endTime": "1760.400s",
                          "word": "mit"
                        },
                        {
                          "startTime": "1760.400s",
                          "endTime": "1760.800s",
                          "word": "Chemie"
                        },
                        {
                          "startTime": "1760.800s",
                          "endTime": "1761s",
                          "word": "aus."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Deshalb meine ich, vielleicht tun wir beide uns zusammen.",
                      "confidence": 0.91906416,
                      "words": [
                        {
                          "startTime": "1763.800s",
                          "endTime": "1765.300s",
                          "word": "Deshalb"
                        },
                        {
                          "startTime": "1765.300s",
                          "endTime": "1765.600s",
                          "word": "meine"
                        },
                        {
                          "startTime": "1765.600s",
                          "endTime": "1765.700s",
                          "word": "ich,"
                        },
                        {
                          "startTime": "1765.700s",
                          "endTime": "1767.400s",
                          "word": "vielleicht"
                        },
                        {
                          "startTime": "1767.400s",
                          "endTime": "1767.900s",
                          "word": "tun"
                        },
                        {
                          "startTime": "1767.900s",
                          "endTime": "1768.100s",
                          "word": "wir"
                        },
                        {
                          "startTime": "1768.100s",
                          "endTime": "1768.400s",
                          "word": "beide"
                        },
                        {
                          "startTime": "1768.400s",
                          "endTime": "1768.700s",
                          "word": "uns"
                        },
                        {
                          "startTime": "1768.700s",
                          "endTime": "1768.900s",
                          "word": "zusammen."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Sie sagen, sie wollen Crystal Meth kochen.",
                      "confidence": 0.8761437,
                      "words": [
                        {
                          "startTime": "1778.900s",
                          "endTime": "1781.100s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "1781.100s",
                          "endTime": "1781.400s",
                          "word": "sagen,"
                        },
                        {
                          "startTime": "1781.400s",
                          "endTime": "1782.300s",
                          "word": "sie"
                        },
                        {
                          "startTime": "1782.300s",
                          "endTime": "1782.400s",
                          "word": "wollen"
                        },
                        {
                          "startTime": "1782.400s",
                          "endTime": "1783.100s",
                          "word": "Crystal"
                        },
                        {
                          "startTime": "1783.100s",
                          "endTime": "1783.200s",
                          "word": "Meth"
                        },
                        {
                          "startTime": "1783.200s",
                          "endTime": "1783.600s",
                          "word": "kochen."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Sie",
                      "confidence": 0.68400687,
                      "words": [
                        {
                          "startTime": "1785.700s",
                          "endTime": "1786s",
                          "word": "Sie"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Sehen und ich ja genau.",
                      "confidence": 0.85742384,
                      "words": [
                        {
                          "startTime": "1787.200s",
                          "endTime": "1787.900s",
                          "word": "Sehen"
                        },
                        {
                          "startTime": "1787.900s",
                          "endTime": "1789.300s",
                          "word": "und"
                        },
                        {
                          "startTime": "1789.300s",
                          "endTime": "1789.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1789.400s",
                          "endTime": "1791.200s",
                          "word": "ja"
                        },
                        {
                          "startTime": "1791.200s",
                          "endTime": "1791.400s",
                          "word": "genau."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " wow, Entweder das",
                      "confidence": 0.73645735,
                      "words": [
                        {
                          "startTime": "1792.600s",
                          "endTime": "1794.400s",
                          "word": "wow,"
                        },
                        {
                          "startTime": "1794.400s",
                          "endTime": "1795.600s",
                          "word": "Entweder"
                        },
                        {
                          "startTime": "1795.600s",
                          "endTime": "1796.100s",
                          "word": "das"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Oder ich liefere dich aus.",
                      "confidence": 0.8713047,
                      "words": [
                        {
                          "startTime": "1797.400s",
                          "endTime": "1798s",
                          "word": "Oder"
                        },
                        {
                          "startTime": "1798s",
                          "endTime": "1798.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1798.100s",
                          "endTime": "1798.400s",
                          "word": "liefere"
                        },
                        {
                          "startTime": "1798.400s",
                          "endTime": "1798.500s",
                          "word": "dich"
                        },
                        {
                          "startTime": "1798.500s",
                          "endTime": "1798.700s",
                          "word": "aus."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Soll denn das hier sein? Weiß der Kuckuck, ich habe das Mosaik Kunstobjekt beschrieben, das hat ja gekauft, für was man Japan ist 14 $ + Versand, wenn du so weitermachst, bist du in 50 bis 60 Jahren reich und wie läuft's mit dem Roman? Es ist kein Roman, eigentlich habe ich eher schafft keinen Roman, aber das hattest Du mir erzählen ein Kurzgeschichten, ich hatte gesagt, wenn ich mal genug gute Geschichten zusammen hätte, würde ich die vielleicht als Sammlung ausgeben. Sowas verkauft dich doch nicht. Ich dachte Roman würde sich leichter verkaufen. Ja, mag sein vielleicht.",
                      "confidence": 0.9010771,
                      "words": [
                        {
                          "startTime": "1806.700s",
                          "endTime": "1810.700s",
                          "word": "Soll"
                        },
                        {
                          "startTime": "1810.700s",
                          "endTime": "1810.800s",
                          "word": "denn"
                        },
                        {
                          "startTime": "1810.800s",
                          "endTime": "1810.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "1810.900s",
                          "endTime": "1811.300s",
                          "word": "hier"
                        },
                        {
                          "startTime": "1811.300s",
                          "endTime": "1811.500s",
                          "word": "sein?"
                        },
                        {
                          "startTime": "1811.500s",
                          "endTime": "1811.900s",
                          "word": "Weiß"
                        },
                        {
                          "startTime": "1811.900s",
                          "endTime": "1812.100s",
                          "word": "der"
                        },
                        {
                          "startTime": "1812.100s",
                          "endTime": "1812.500s",
                          "word": "Kuckuck,"
                        },
                        {
                          "startTime": "1812.500s",
                          "endTime": "1813.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1813.200s",
                          "endTime": "1813.400s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1813.400s",
                          "endTime": "1813.600s",
                          "word": "das"
                        },
                        {
                          "startTime": "1813.600s",
                          "endTime": "1814.100s",
                          "word": "Mosaik"
                        },
                        {
                          "startTime": "1814.100s",
                          "endTime": "1814.900s",
                          "word": "Kunstobjekt"
                        },
                        {
                          "startTime": "1814.900s",
                          "endTime": "1815.500s",
                          "word": "beschrieben,"
                        },
                        {
                          "startTime": "1815.500s",
                          "endTime": "1815.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "1815.700s",
                          "endTime": "1815.800s",
                          "word": "hat"
                        },
                        {
                          "startTime": "1815.800s",
                          "endTime": "1816s",
                          "word": "ja"
                        },
                        {
                          "startTime": "1816s",
                          "endTime": "1816.200s",
                          "word": "gekauft,"
                        },
                        {
                          "startTime": "1816.200s",
                          "endTime": "1817.200s",
                          "word": "für"
                        },
                        {
                          "startTime": "1817.200s",
                          "endTime": "1817.300s",
                          "word": "was"
                        },
                        {
                          "startTime": "1817.300s",
                          "endTime": "1817.500s",
                          "word": "man"
                        },
                        {
                          "startTime": "1817.500s",
                          "endTime": "1817.900s",
                          "word": "Japan"
                        },
                        {
                          "startTime": "1817.900s",
                          "endTime": "1818.100s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1818.100s",
                          "endTime": "1818.500s",
                          "word": "14"
                        },
                        {
                          "startTime": "1818.500s",
                          "endTime": "1818.700s",
                          "word": "$"
                        },
                        {
                          "startTime": "1818.700s",
                          "endTime": "1818.900s",
                          "word": "+"
                        },
                        {
                          "startTime": "1818.900s",
                          "endTime": "1819.400s",
                          "word": "Versand,"
                        },
                        {
                          "startTime": "1819.400s",
                          "endTime": "1820.900s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "1820.900s",
                          "endTime": "1821s",
                          "word": "du"
                        },
                        {
                          "startTime": "1821s",
                          "endTime": "1821.100s",
                          "word": "so"
                        },
                        {
                          "startTime": "1821.100s",
                          "endTime": "1821.700s",
                          "word": "weitermachst,"
                        },
                        {
                          "startTime": "1821.700s",
                          "endTime": "1821.800s",
                          "word": "bist"
                        },
                        {
                          "startTime": "1821.800s",
                          "endTime": "1822s",
                          "word": "du"
                        },
                        {
                          "startTime": "1822s",
                          "endTime": "1822.100s",
                          "word": "in"
                        },
                        {
                          "startTime": "1822.100s",
                          "endTime": "1822.400s",
                          "word": "50"
                        },
                        {
                          "startTime": "1822.400s",
                          "endTime": "1822.700s",
                          "word": "bis"
                        },
                        {
                          "startTime": "1822.700s",
                          "endTime": "1823.100s",
                          "word": "60"
                        },
                        {
                          "startTime": "1823.100s",
                          "endTime": "1823.400s",
                          "word": "Jahren"
                        },
                        {
                          "startTime": "1823.400s",
                          "endTime": "1823.600s",
                          "word": "reich"
                        },
                        {
                          "startTime": "1823.600s",
                          "endTime": "1825.200s",
                          "word": "und"
                        },
                        {
                          "startTime": "1825.200s",
                          "endTime": "1825.400s",
                          "word": "wie"
                        },
                        {
                          "startTime": "1825.400s",
                          "endTime": "1825.600s",
                          "word": "läuft's"
                        },
                        {
                          "startTime": "1825.600s",
                          "endTime": "1825.700s",
                          "word": "mit"
                        },
                        {
                          "startTime": "1825.700s",
                          "endTime": "1825.900s",
                          "word": "dem"
                        },
                        {
                          "startTime": "1825.900s",
                          "endTime": "1826.100s",
                          "word": "Roman?"
                        },
                        {
                          "startTime": "1826.100s",
                          "endTime": "1827.200s",
                          "word": "Es"
                        },
                        {
                          "startTime": "1827.200s",
                          "endTime": "1827.300s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1827.300s",
                          "endTime": "1827.500s",
                          "word": "kein"
                        },
                        {
                          "startTime": "1827.500s",
                          "endTime": "1827.600s",
                          "word": "Roman,"
                        },
                        {
                          "startTime": "1827.600s",
                          "endTime": "1828.300s",
                          "word": "eigentlich"
                        },
                        {
                          "startTime": "1828.300s",
                          "endTime": "1828.500s",
                          "word": "habe"
                        },
                        {
                          "startTime": "1828.500s",
                          "endTime": "1828.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1828.600s",
                          "endTime": "1828.700s",
                          "word": "eher"
                        },
                        {
                          "startTime": "1828.700s",
                          "endTime": "1829.300s",
                          "word": "schafft"
                        },
                        {
                          "startTime": "1829.300s",
                          "endTime": "1829.500s",
                          "word": "keinen"
                        },
                        {
                          "startTime": "1829.500s",
                          "endTime": "1829.700s",
                          "word": "Roman,"
                        },
                        {
                          "startTime": "1829.700s",
                          "endTime": "1830.900s",
                          "word": "aber"
                        },
                        {
                          "startTime": "1830.900s",
                          "endTime": "1831s",
                          "word": "das"
                        },
                        {
                          "startTime": "1831s",
                          "endTime": "1831.300s",
                          "word": "hattest"
                        },
                        {
                          "startTime": "1831.300s",
                          "endTime": "1831.400s",
                          "word": "Du"
                        },
                        {
                          "startTime": "1831.400s",
                          "endTime": "1831.400s",
                          "word": "mir"
                        },
                        {
                          "startTime": "1831.400s",
                          "endTime": "1831.900s",
                          "word": "erzählen"
                        },
                        {
                          "startTime": "1831.900s",
                          "endTime": "1832s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1832s",
                          "endTime": "1832.800s",
                          "word": "Kurzgeschichten,"
                        },
                        {
                          "startTime": "1832.800s",
                          "endTime": "1833.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1833.200s",
                          "endTime": "1833.400s",
                          "word": "hatte"
                        },
                        {
                          "startTime": "1833.400s",
                          "endTime": "1833.700s",
                          "word": "gesagt,"
                        },
                        {
                          "startTime": "1833.700s",
                          "endTime": "1834.200s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "1834.200s",
                          "endTime": "1834.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1834.500s",
                          "endTime": "1834.700s",
                          "word": "mal"
                        },
                        {
                          "startTime": "1834.700s",
                          "endTime": "1834.900s",
                          "word": "genug"
                        },
                        {
                          "startTime": "1834.900s",
                          "endTime": "1835.300s",
                          "word": "gute"
                        },
                        {
                          "startTime": "1835.300s",
                          "endTime": "1835.800s",
                          "word": "Geschichten"
                        },
                        {
                          "startTime": "1835.800s",
                          "endTime": "1836.200s",
                          "word": "zusammen"
                        },
                        {
                          "startTime": "1836.200s",
                          "endTime": "1836.500s",
                          "word": "hätte,"
                        },
                        {
                          "startTime": "1836.500s",
                          "endTime": "1839s",
                          "word": "würde"
                        },
                        {
                          "startTime": "1839s",
                          "endTime": "1839s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1839s",
                          "endTime": "1839.100s",
                          "word": "die"
                        },
                        {
                          "startTime": "1839.100s",
                          "endTime": "1839.300s",
                          "word": "vielleicht"
                        },
                        {
                          "startTime": "1839.300s",
                          "endTime": "1839.600s",
                          "word": "als"
                        },
                        {
                          "startTime": "1839.600s",
                          "endTime": "1839.900s",
                          "word": "Sammlung"
                        },
                        {
                          "startTime": "1839.900s",
                          "endTime": "1840.400s",
                          "word": "ausgeben."
                        },
                        {
                          "startTime": "1840.400s",
                          "endTime": "1840.600s",
                          "word": "Sowas"
                        },
                        {
                          "startTime": "1840.600s",
                          "endTime": "1841.100s",
                          "word": "verkauft"
                        },
                        {
                          "startTime": "1841.100s",
                          "endTime": "1841.200s",
                          "word": "dich"
                        },
                        {
                          "startTime": "1841.200s",
                          "endTime": "1841.300s",
                          "word": "doch"
                        },
                        {
                          "startTime": "1841.300s",
                          "endTime": "1841.700s",
                          "word": "nicht."
                        },
                        {
                          "startTime": "1841.700s",
                          "endTime": "1843.700s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "1843.700s",
                          "endTime": "1843.900s",
                          "word": "dachte"
                        },
                        {
                          "startTime": "1843.900s",
                          "endTime": "1845.800s",
                          "word": "Roman"
                        },
                        {
                          "startTime": "1845.800s",
                          "endTime": "1846.100s",
                          "word": "würde"
                        },
                        {
                          "startTime": "1846.100s",
                          "endTime": "1846.200s",
                          "word": "sich"
                        },
                        {
                          "startTime": "1846.200s",
                          "endTime": "1846.600s",
                          "word": "leichter"
                        },
                        {
                          "startTime": "1846.600s",
                          "endTime": "1847.100s",
                          "word": "verkaufen."
                        },
                        {
                          "startTime": "1847.100s",
                          "endTime": "1847.300s",
                          "word": "Ja,"
                        },
                        {
                          "startTime": "1847.300s",
                          "endTime": "1847.500s",
                          "word": "mag"
                        },
                        {
                          "startTime": "1847.500s",
                          "endTime": "1847.600s",
                          "word": "sein"
                        },
                        {
                          "startTime": "1847.600s",
                          "endTime": "1848.700s",
                          "word": "vielleicht."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wenn ich mal was von dir lesen und kritisieren soll.",
                      "confidence": 0.85030293,
                      "words": [
                        {
                          "startTime": "1849.800s",
                          "endTime": "1850.900s",
                          "word": "Wenn"
                        },
                        {
                          "startTime": "1850.900s",
                          "endTime": "1851.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1851.100s",
                          "endTime": "1851.300s",
                          "word": "mal"
                        },
                        {
                          "startTime": "1851.300s",
                          "endTime": "1851.400s",
                          "word": "was"
                        },
                        {
                          "startTime": "1851.400s",
                          "endTime": "1851.600s",
                          "word": "von"
                        },
                        {
                          "startTime": "1851.600s",
                          "endTime": "1851.700s",
                          "word": "dir"
                        },
                        {
                          "startTime": "1851.700s",
                          "endTime": "1852.200s",
                          "word": "lesen"
                        },
                        {
                          "startTime": "1852.200s",
                          "endTime": "1852.400s",
                          "word": "und"
                        },
                        {
                          "startTime": "1852.400s",
                          "endTime": "1852.600s",
                          "word": "kritisieren"
                        },
                        {
                          "startTime": "1852.600s",
                          "endTime": "1853.200s",
                          "word": "soll."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Na, ich glaube ich bin einfach noch nicht in diesem Stadium in dem nein, das Angebot steht, was ist denn zur Zeit mit Gott los? Bin jetzt gut. Warum weißt du, ich weiß auch nicht noch ruhiger als sonst 50 werden muss man verkraften, also ich freue mich jedenfalls nicht drauf fertig zu werden. Und du drehst dann bestimmt ganz durch. Er ist also in der Midlife-Crisis. Nein, er ist nur ruhig, wie ist das Herz wirklich, das hat schon alles.",
                      "confidence": 0.8950374,
                      "words": [
                        {
                          "startTime": "1855.600s",
                          "endTime": "1856.200s",
                          "word": "Na,"
                        },
                        {
                          "startTime": "1856.200s",
                          "endTime": "1858.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1858.100s",
                          "endTime": "1858.300s",
                          "word": "glaube"
                        },
                        {
                          "startTime": "1858.300s",
                          "endTime": "1859.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1859.100s",
                          "endTime": "1859.300s",
                          "word": "bin"
                        },
                        {
                          "startTime": "1859.300s",
                          "endTime": "1859.600s",
                          "word": "einfach"
                        },
                        {
                          "startTime": "1859.600s",
                          "endTime": "1859.800s",
                          "word": "noch"
                        },
                        {
                          "startTime": "1859.800s",
                          "endTime": "1860s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1860s",
                          "endTime": "1860.200s",
                          "word": "in"
                        },
                        {
                          "startTime": "1860.200s",
                          "endTime": "1860.400s",
                          "word": "diesem"
                        },
                        {
                          "startTime": "1860.400s",
                          "endTime": "1860.900s",
                          "word": "Stadium"
                        },
                        {
                          "startTime": "1860.900s",
                          "endTime": "1861.400s",
                          "word": "in"
                        },
                        {
                          "startTime": "1861.400s",
                          "endTime": "1861.700s",
                          "word": "dem"
                        },
                        {
                          "startTime": "1861.700s",
                          "endTime": "1863.900s",
                          "word": "nein,"
                        },
                        {
                          "startTime": "1863.900s",
                          "endTime": "1865s",
                          "word": "das"
                        },
                        {
                          "startTime": "1865s",
                          "endTime": "1865.400s",
                          "word": "Angebot"
                        },
                        {
                          "startTime": "1865.400s",
                          "endTime": "1865.600s",
                          "word": "steht,"
                        },
                        {
                          "startTime": "1865.600s",
                          "endTime": "1868.100s",
                          "word": "was"
                        },
                        {
                          "startTime": "1868.100s",
                          "endTime": "1868.200s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1868.200s",
                          "endTime": "1868.400s",
                          "word": "denn"
                        },
                        {
                          "startTime": "1868.400s",
                          "endTime": "1868.600s",
                          "word": "zur"
                        },
                        {
                          "startTime": "1868.600s",
                          "endTime": "1868.700s",
                          "word": "Zeit"
                        },
                        {
                          "startTime": "1868.700s",
                          "endTime": "1868.900s",
                          "word": "mit"
                        },
                        {
                          "startTime": "1868.900s",
                          "endTime": "1869.200s",
                          "word": "Gott"
                        },
                        {
                          "startTime": "1869.200s",
                          "endTime": "1869.400s",
                          "word": "los?"
                        },
                        {
                          "startTime": "1869.400s",
                          "endTime": "1869.900s",
                          "word": "Bin"
                        },
                        {
                          "startTime": "1869.900s",
                          "endTime": "1869.900s",
                          "word": "jetzt"
                        },
                        {
                          "startTime": "1869.900s",
                          "endTime": "1870.200s",
                          "word": "gut."
                        },
                        {
                          "startTime": "1870.200s",
                          "endTime": "1870.500s",
                          "word": "Warum"
                        },
                        {
                          "startTime": "1870.500s",
                          "endTime": "1872s",
                          "word": "weißt"
                        },
                        {
                          "startTime": "1872s",
                          "endTime": "1872.100s",
                          "word": "du,"
                        },
                        {
                          "startTime": "1872.100s",
                          "endTime": "1873.800s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1873.800s",
                          "endTime": "1873.900s",
                          "word": "weiß"
                        },
                        {
                          "startTime": "1873.900s",
                          "endTime": "1874s",
                          "word": "auch"
                        },
                        {
                          "startTime": "1874s",
                          "endTime": "1874.300s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1874.300s",
                          "endTime": "1874.800s",
                          "word": "noch"
                        },
                        {
                          "startTime": "1874.800s",
                          "endTime": "1875.200s",
                          "word": "ruhiger"
                        },
                        {
                          "startTime": "1875.200s",
                          "endTime": "1875.300s",
                          "word": "als"
                        },
                        {
                          "startTime": "1875.300s",
                          "endTime": "1875.500s",
                          "word": "sonst"
                        },
                        {
                          "startTime": "1875.500s",
                          "endTime": "1877s",
                          "word": "50"
                        },
                        {
                          "startTime": "1877s",
                          "endTime": "1877.200s",
                          "word": "werden"
                        },
                        {
                          "startTime": "1877.200s",
                          "endTime": "1877.300s",
                          "word": "muss"
                        },
                        {
                          "startTime": "1877.300s",
                          "endTime": "1877.400s",
                          "word": "man"
                        },
                        {
                          "startTime": "1877.400s",
                          "endTime": "1877.600s",
                          "word": "verkraften,"
                        },
                        {
                          "startTime": "1877.600s",
                          "endTime": "1878.700s",
                          "word": "also"
                        },
                        {
                          "startTime": "1878.700s",
                          "endTime": "1879s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1879s",
                          "endTime": "1879.800s",
                          "word": "freue"
                        },
                        {
                          "startTime": "1879.800s",
                          "endTime": "1879.800s",
                          "word": "mich"
                        },
                        {
                          "startTime": "1879.800s",
                          "endTime": "1880.100s",
                          "word": "jedenfalls"
                        },
                        {
                          "startTime": "1880.100s",
                          "endTime": "1880.400s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "1880.400s",
                          "endTime": "1880.700s",
                          "word": "drauf"
                        },
                        {
                          "startTime": "1880.700s",
                          "endTime": "1881.100s",
                          "word": "fertig"
                        },
                        {
                          "startTime": "1881.100s",
                          "endTime": "1881.300s",
                          "word": "zu"
                        },
                        {
                          "startTime": "1881.300s",
                          "endTime": "1881.300s",
                          "word": "werden."
                        },
                        {
                          "startTime": "1881.300s",
                          "endTime": "1881.600s",
                          "word": "Und"
                        },
                        {
                          "startTime": "1881.600s",
                          "endTime": "1884.300s",
                          "word": "du"
                        },
                        {
                          "startTime": "1884.300s",
                          "endTime": "1884.600s",
                          "word": "drehst"
                        },
                        {
                          "startTime": "1884.600s",
                          "endTime": "1884.800s",
                          "word": "dann"
                        },
                        {
                          "startTime": "1884.800s",
                          "endTime": "1885.200s",
                          "word": "bestimmt"
                        },
                        {
                          "startTime": "1885.200s",
                          "endTime": "1885.400s",
                          "word": "ganz"
                        },
                        {
                          "startTime": "1885.400s",
                          "endTime": "1885.800s",
                          "word": "durch."
                        },
                        {
                          "startTime": "1885.800s",
                          "endTime": "1890.700s",
                          "word": "Er"
                        },
                        {
                          "startTime": "1890.700s",
                          "endTime": "1890.800s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1890.800s",
                          "endTime": "1891s",
                          "word": "also"
                        },
                        {
                          "startTime": "1891s",
                          "endTime": "1891.100s",
                          "word": "in"
                        },
                        {
                          "startTime": "1891.100s",
                          "endTime": "1891.200s",
                          "word": "der"
                        },
                        {
                          "startTime": "1891.200s",
                          "endTime": "1891.800s",
                          "word": "Midlife-Crisis."
                        },
                        {
                          "startTime": "1891.800s",
                          "endTime": "1892.200s",
                          "word": "Nein,"
                        },
                        {
                          "startTime": "1892.200s",
                          "endTime": "1892.400s",
                          "word": "er"
                        },
                        {
                          "startTime": "1892.400s",
                          "endTime": "1892.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1892.400s",
                          "endTime": "1892.700s",
                          "word": "nur"
                        },
                        {
                          "startTime": "1892.700s",
                          "endTime": "1893.500s",
                          "word": "ruhig,"
                        },
                        {
                          "startTime": "1893.500s",
                          "endTime": "1895.300s",
                          "word": "wie"
                        },
                        {
                          "startTime": "1895.300s",
                          "endTime": "1895.500s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1895.500s",
                          "endTime": "1895.600s",
                          "word": "das"
                        },
                        {
                          "startTime": "1895.600s",
                          "endTime": "1895.900s",
                          "word": "Herz"
                        },
                        {
                          "startTime": "1895.900s",
                          "endTime": "1897.200s",
                          "word": "wirklich,"
                        },
                        {
                          "startTime": "1897.200s",
                          "endTime": "1899.100s",
                          "word": "das"
                        },
                        {
                          "startTime": "1899.100s",
                          "endTime": "1899.200s",
                          "word": "hat"
                        },
                        {
                          "startTime": "1899.200s",
                          "endTime": "1899.400s",
                          "word": "schon"
                        },
                        {
                          "startTime": "1899.400s",
                          "endTime": "1899.800s",
                          "word": "alles."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Willst du nur darum sitzen sie dir das an ein Kjeldahl vorlagekolben 800ml äußerst selten und die üblichen Utensilien Bechergläser Erlenmeyerkolben, aber hier kommt die Kunden des Ganzen ein wunderbarer Koch und Kolben 5000ml, ich koche in sowas.",
                      "confidence": 0.8877597,
                      "words": [
                        {
                          "startTime": "1915.600s",
                          "endTime": "1943.200s",
                          "word": "Willst"
                        },
                        {
                          "startTime": "1943.200s",
                          "endTime": "1943.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "1943.200s",
                          "endTime": "1943.400s",
                          "word": "nur"
                        },
                        {
                          "startTime": "1943.400s",
                          "endTime": "1943.600s",
                          "word": "darum"
                        },
                        {
                          "startTime": "1943.600s",
                          "endTime": "1944s",
                          "word": "sitzen"
                        },
                        {
                          "startTime": "1944s",
                          "endTime": "1953.600s",
                          "word": "sie"
                        },
                        {
                          "startTime": "1953.600s",
                          "endTime": "1953.800s",
                          "word": "dir"
                        },
                        {
                          "startTime": "1953.800s",
                          "endTime": "1953.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "1953.900s",
                          "endTime": "1954.100s",
                          "word": "an"
                        },
                        {
                          "startTime": "1954.100s",
                          "endTime": "1955.200s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1955.200s",
                          "endTime": "1955.800s",
                          "word": "Kjeldahl"
                        },
                        {
                          "startTime": "1955.800s",
                          "endTime": "1956.500s",
                          "word": "vorlagekolben"
                        },
                        {
                          "startTime": "1956.500s",
                          "endTime": "1958s",
                          "word": "800ml"
                        },
                        {
                          "startTime": "1958s",
                          "endTime": "1959.300s",
                          "word": "äußerst"
                        },
                        {
                          "startTime": "1959.300s",
                          "endTime": "1959.700s",
                          "word": "selten"
                        },
                        {
                          "startTime": "1959.700s",
                          "endTime": "1959.800s",
                          "word": "und"
                        },
                        {
                          "startTime": "1959.800s",
                          "endTime": "1960.500s",
                          "word": "die"
                        },
                        {
                          "startTime": "1960.500s",
                          "endTime": "1960.600s",
                          "word": "üblichen"
                        },
                        {
                          "startTime": "1960.600s",
                          "endTime": "1961.100s",
                          "word": "Utensilien"
                        },
                        {
                          "startTime": "1961.100s",
                          "endTime": "1962.100s",
                          "word": "Bechergläser"
                        },
                        {
                          "startTime": "1962.100s",
                          "endTime": "1963.500s",
                          "word": "Erlenmeyerkolben,"
                        },
                        {
                          "startTime": "1963.500s",
                          "endTime": "1964.300s",
                          "word": "aber"
                        },
                        {
                          "startTime": "1964.300s",
                          "endTime": "1964.800s",
                          "word": "hier"
                        },
                        {
                          "startTime": "1964.800s",
                          "endTime": "1965s",
                          "word": "kommt"
                        },
                        {
                          "startTime": "1965s",
                          "endTime": "1965.100s",
                          "word": "die"
                        },
                        {
                          "startTime": "1965.100s",
                          "endTime": "1965.400s",
                          "word": "Kunden"
                        },
                        {
                          "startTime": "1965.400s",
                          "endTime": "1965.600s",
                          "word": "des"
                        },
                        {
                          "startTime": "1965.600s",
                          "endTime": "1966s",
                          "word": "Ganzen"
                        },
                        {
                          "startTime": "1966s",
                          "endTime": "1967.100s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1967.100s",
                          "endTime": "1967.800s",
                          "word": "wunderbarer"
                        },
                        {
                          "startTime": "1967.800s",
                          "endTime": "1968.100s",
                          "word": "Koch"
                        },
                        {
                          "startTime": "1968.100s",
                          "endTime": "1968.500s",
                          "word": "und"
                        },
                        {
                          "startTime": "1968.500s",
                          "endTime": "1969s",
                          "word": "Kolben"
                        },
                        {
                          "startTime": "1969s",
                          "endTime": "1970.200s",
                          "word": "5000ml,"
                        },
                        {
                          "startTime": "1970.200s",
                          "endTime": "1974.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1974.600s",
                          "endTime": "1974.900s",
                          "word": "koche"
                        },
                        {
                          "startTime": "1974.900s",
                          "endTime": "1975.100s",
                          "word": "in"
                        },
                        {
                          "startTime": "1975.100s",
                          "endTime": "1975.400s",
                          "word": "sowas."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " sowas in Groß in sowas",
                      "confidence": 0.8315699,
                      "words": [
                        {
                          "startTime": "1975.500s",
                          "endTime": "1976.800s",
                          "word": "sowas"
                        },
                        {
                          "startTime": "1976.800s",
                          "endTime": "1977s",
                          "word": "in"
                        },
                        {
                          "startTime": "1977s",
                          "endTime": "1977.100s",
                          "word": "Groß"
                        },
                        {
                          "startTime": "1977.100s",
                          "endTime": "1979.100s",
                          "word": "in"
                        },
                        {
                          "startTime": "1979.100s",
                          "endTime": "1979.300s",
                          "word": "sowas"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " nein, das ist doch ein Messkolben. In sowas kocht man nicht, daher ich schon nein, das wirst du nicht, denn ein Messkolben ist zum Mischen und titrieren.",
                      "confidence": 0.8829255,
                      "words": [
                        {
                          "startTime": "1980.900s",
                          "endTime": "1981.300s",
                          "word": "nein,"
                        },
                        {
                          "startTime": "1981.300s",
                          "endTime": "1981.500s",
                          "word": "das"
                        },
                        {
                          "startTime": "1981.500s",
                          "endTime": "1981.600s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1981.600s",
                          "endTime": "1981.700s",
                          "word": "doch"
                        },
                        {
                          "startTime": "1981.700s",
                          "endTime": "1981.900s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1981.900s",
                          "endTime": "1982.600s",
                          "word": "Messkolben."
                        },
                        {
                          "startTime": "1982.600s",
                          "endTime": "1982.700s",
                          "word": "In"
                        },
                        {
                          "startTime": "1982.700s",
                          "endTime": "1983s",
                          "word": "sowas"
                        },
                        {
                          "startTime": "1983s",
                          "endTime": "1983.300s",
                          "word": "kocht"
                        },
                        {
                          "startTime": "1983.300s",
                          "endTime": "1983.500s",
                          "word": "man"
                        },
                        {
                          "startTime": "1983.500s",
                          "endTime": "1983.600s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "1983.600s",
                          "endTime": "1984.300s",
                          "word": "daher"
                        },
                        {
                          "startTime": "1984.300s",
                          "endTime": "1985.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "1985.400s",
                          "endTime": "1985.700s",
                          "word": "schon"
                        },
                        {
                          "startTime": "1985.700s",
                          "endTime": "1986.500s",
                          "word": "nein,"
                        },
                        {
                          "startTime": "1986.500s",
                          "endTime": "1986.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "1986.900s",
                          "endTime": "1987.200s",
                          "word": "wirst"
                        },
                        {
                          "startTime": "1987.200s",
                          "endTime": "1987.300s",
                          "word": "du"
                        },
                        {
                          "startTime": "1987.300s",
                          "endTime": "1987.500s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "1987.500s",
                          "endTime": "1988.100s",
                          "word": "denn"
                        },
                        {
                          "startTime": "1988.100s",
                          "endTime": "1988.300s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1988.300s",
                          "endTime": "1988.900s",
                          "word": "Messkolben"
                        },
                        {
                          "startTime": "1988.900s",
                          "endTime": "1989s",
                          "word": "ist"
                        },
                        {
                          "startTime": "1989s",
                          "endTime": "1989.200s",
                          "word": "zum"
                        },
                        {
                          "startTime": "1989.200s",
                          "endTime": "1989.600s",
                          "word": "Mischen"
                        },
                        {
                          "startTime": "1989.600s",
                          "endTime": "1989.800s",
                          "word": "und"
                        },
                        {
                          "startTime": "1989.800s",
                          "endTime": "1990.500s",
                          "word": "titrieren."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Man darf ein Messkolben niemals erhitzen, denn dafür nimmt man ja so einen kochkolben hast du denn bei mir im Chemieunterricht gar nichts gelernt? Nein, sie haben mich durchfallen lassen. Es ist ja nicht mehr lange sie Arschloch, ich werde ihn auch was sagen, das hier ist keine Chemie. Das ist Kunst kochen ist Kunst und der Scheiß den ich koche ist voll der Bringer, also halten Sie mir kein Vortrag Scheiß den du kochst ist scheiß ich habe dir dein Zeug gesehen vollkommen. Lächerlich, wir werden auf gar keinen Fall Abfall produzieren, wir beide werden einen chemisch reines und stabiles Produkt herstellen das wie versprochen. Da kommt nichts anderes rein, kein Babybrei Chilipulver. Chili ist aber mein Markenzeichen jetzt nicht mehr. Das werden wir ja sehen, was willst denn das für unsere Sicherheit, außerdem haben wir eine Augenwaschstation für den Notfall diese Chemikalien und ihre Dämpfer sind giftig, falls du das noch nicht gewusst hast, wir können sich ja die einer Schwuchtel ansehen.",
                      "confidence": 0.9146081,
                      "words": [
                        {
                          "startTime": "1991.700s",
                          "endTime": "1992.100s",
                          "word": "Man"
                        },
                        {
                          "startTime": "1992.100s",
                          "endTime": "1992.300s",
                          "word": "darf"
                        },
                        {
                          "startTime": "1992.300s",
                          "endTime": "1992.500s",
                          "word": "ein"
                        },
                        {
                          "startTime": "1992.500s",
                          "endTime": "1993.400s",
                          "word": "Messkolben"
                        },
                        {
                          "startTime": "1993.400s",
                          "endTime": "1993.800s",
                          "word": "niemals"
                        },
                        {
                          "startTime": "1993.800s",
                          "endTime": "1994.400s",
                          "word": "erhitzen,"
                        },
                        {
                          "startTime": "1994.400s",
                          "endTime": "1994.700s",
                          "word": "denn"
                        },
                        {
                          "startTime": "1994.700s",
                          "endTime": "1995.200s",
                          "word": "dafür"
                        },
                        {
                          "startTime": "1995.200s",
                          "endTime": "1995.400s",
                          "word": "nimmt"
                        },
                        {
                          "startTime": "1995.400s",
                          "endTime": "1995.500s",
                          "word": "man"
                        },
                        {
                          "startTime": "1995.500s",
                          "endTime": "1995.600s",
                          "word": "ja"
                        },
                        {
                          "startTime": "1995.600s",
                          "endTime": "1995.800s",
                          "word": "so"
                        },
                        {
                          "startTime": "1995.800s",
                          "endTime": "1996.100s",
                          "word": "einen"
                        },
                        {
                          "startTime": "1996.100s",
                          "endTime": "1996.600s",
                          "word": "kochkolben"
                        },
                        {
                          "startTime": "1996.600s",
                          "endTime": "1997.200s",
                          "word": "hast"
                        },
                        {
                          "startTime": "1997.200s",
                          "endTime": "1997.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "1997.200s",
                          "endTime": "1997.400s",
                          "word": "denn"
                        },
                        {
                          "startTime": "1997.400s",
                          "endTime": "1997.400s",
                          "word": "bei"
                        },
                        {
                          "startTime": "1997.400s",
                          "endTime": "1997.500s",
                          "word": "mir"
                        },
                        {
                          "startTime": "1997.500s",
                          "endTime": "1997.700s",
                          "word": "im"
                        },
                        {
                          "startTime": "1997.700s",
                          "endTime": "1998.100s",
                          "word": "Chemieunterricht"
                        },
                        {
                          "startTime": "1998.100s",
                          "endTime": "1998.700s",
                          "word": "gar"
                        },
                        {
                          "startTime": "1998.700s",
                          "endTime": "1999s",
                          "word": "nichts"
                        },
                        {
                          "startTime": "1999s",
                          "endTime": "1999.200s",
                          "word": "gelernt?"
                        },
                        {
                          "startTime": "1999.200s",
                          "endTime": "1999.700s",
                          "word": "Nein,"
                        },
                        {
                          "startTime": "1999.700s",
                          "endTime": "2000.400s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2000.400s",
                          "endTime": "2000.500s",
                          "word": "haben"
                        },
                        {
                          "startTime": "2000.500s",
                          "endTime": "2000.700s",
                          "word": "mich"
                        },
                        {
                          "startTime": "2000.700s",
                          "endTime": "2001s",
                          "word": "durchfallen"
                        },
                        {
                          "startTime": "2001s",
                          "endTime": "2001.200s",
                          "word": "lassen."
                        },
                        {
                          "startTime": "2001.200s",
                          "endTime": "2002.100s",
                          "word": "Es"
                        },
                        {
                          "startTime": "2002.100s",
                          "endTime": "2002.200s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2002.200s",
                          "endTime": "2002.300s",
                          "word": "ja"
                        },
                        {
                          "startTime": "2002.300s",
                          "endTime": "2002.400s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2002.400s",
                          "endTime": "2002.500s",
                          "word": "mehr"
                        },
                        {
                          "startTime": "2002.500s",
                          "endTime": "2003s",
                          "word": "lange"
                        },
                        {
                          "startTime": "2003s",
                          "endTime": "2003.700s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2003.700s",
                          "endTime": "2004.200s",
                          "word": "Arschloch,"
                        },
                        {
                          "startTime": "2004.200s",
                          "endTime": "2005.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2005.400s",
                          "endTime": "2005.600s",
                          "word": "werde"
                        },
                        {
                          "startTime": "2005.600s",
                          "endTime": "2005.700s",
                          "word": "ihn"
                        },
                        {
                          "startTime": "2005.700s",
                          "endTime": "2005.800s",
                          "word": "auch"
                        },
                        {
                          "startTime": "2005.800s",
                          "endTime": "2005.900s",
                          "word": "was"
                        },
                        {
                          "startTime": "2005.900s",
                          "endTime": "2006.200s",
                          "word": "sagen,"
                        },
                        {
                          "startTime": "2006.200s",
                          "endTime": "2006.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "2006.400s",
                          "endTime": "2006.500s",
                          "word": "hier"
                        },
                        {
                          "startTime": "2006.500s",
                          "endTime": "2007.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2007.400s",
                          "endTime": "2007.600s",
                          "word": "keine"
                        },
                        {
                          "startTime": "2007.600s",
                          "endTime": "2007.900s",
                          "word": "Chemie."
                        },
                        {
                          "startTime": "2007.900s",
                          "endTime": "2009s",
                          "word": "Das"
                        },
                        {
                          "startTime": "2009s",
                          "endTime": "2009.200s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2009.200s",
                          "endTime": "2009.700s",
                          "word": "Kunst"
                        },
                        {
                          "startTime": "2009.700s",
                          "endTime": "2011.400s",
                          "word": "kochen"
                        },
                        {
                          "startTime": "2011.400s",
                          "endTime": "2012.300s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2012.300s",
                          "endTime": "2012.500s",
                          "word": "Kunst"
                        },
                        {
                          "startTime": "2012.500s",
                          "endTime": "2012.900s",
                          "word": "und"
                        },
                        {
                          "startTime": "2012.900s",
                          "endTime": "2013s",
                          "word": "der"
                        },
                        {
                          "startTime": "2013s",
                          "endTime": "2013.100s",
                          "word": "Scheiß"
                        },
                        {
                          "startTime": "2013.100s",
                          "endTime": "2013.400s",
                          "word": "den"
                        },
                        {
                          "startTime": "2013.400s",
                          "endTime": "2013.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2013.400s",
                          "endTime": "2013.900s",
                          "word": "koche"
                        },
                        {
                          "startTime": "2013.900s",
                          "endTime": "2014s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2014s",
                          "endTime": "2014.300s",
                          "word": "voll"
                        },
                        {
                          "startTime": "2014.300s",
                          "endTime": "2014.500s",
                          "word": "der"
                        },
                        {
                          "startTime": "2014.500s",
                          "endTime": "2014.800s",
                          "word": "Bringer,"
                        },
                        {
                          "startTime": "2014.800s",
                          "endTime": "2015s",
                          "word": "also"
                        },
                        {
                          "startTime": "2015s",
                          "endTime": "2015.300s",
                          "word": "halten"
                        },
                        {
                          "startTime": "2015.300s",
                          "endTime": "2015.300s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "2015.300s",
                          "endTime": "2015.500s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2015.500s",
                          "endTime": "2015.700s",
                          "word": "kein"
                        },
                        {
                          "startTime": "2015.700s",
                          "endTime": "2016.200s",
                          "word": "Vortrag"
                        },
                        {
                          "startTime": "2016.200s",
                          "endTime": "2016.500s",
                          "word": "Scheiß"
                        },
                        {
                          "startTime": "2016.500s",
                          "endTime": "2016.700s",
                          "word": "den"
                        },
                        {
                          "startTime": "2016.700s",
                          "endTime": "2016.900s",
                          "word": "du"
                        },
                        {
                          "startTime": "2016.900s",
                          "endTime": "2017.200s",
                          "word": "kochst"
                        },
                        {
                          "startTime": "2017.200s",
                          "endTime": "2017.500s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2017.500s",
                          "endTime": "2017.800s",
                          "word": "scheiß"
                        },
                        {
                          "startTime": "2017.800s",
                          "endTime": "2018.800s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2018.800s",
                          "endTime": "2019s",
                          "word": "habe"
                        },
                        {
                          "startTime": "2019s",
                          "endTime": "2019.100s",
                          "word": "dir"
                        },
                        {
                          "startTime": "2019.100s",
                          "endTime": "2019.200s",
                          "word": "dein"
                        },
                        {
                          "startTime": "2019.200s",
                          "endTime": "2019.400s",
                          "word": "Zeug"
                        },
                        {
                          "startTime": "2019.400s",
                          "endTime": "2019.700s",
                          "word": "gesehen"
                        },
                        {
                          "startTime": "2019.700s",
                          "endTime": "2020.100s",
                          "word": "vollkommen."
                        },
                        {
                          "startTime": "2020.100s",
                          "endTime": "2020.300s",
                          "word": "Lächerlich,"
                        },
                        {
                          "startTime": "2020.300s",
                          "endTime": "2021.100s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2021.100s",
                          "endTime": "2021.400s",
                          "word": "werden"
                        },
                        {
                          "startTime": "2021.400s",
                          "endTime": "2021.500s",
                          "word": "auf"
                        },
                        {
                          "startTime": "2021.500s",
                          "endTime": "2021.700s",
                          "word": "gar"
                        },
                        {
                          "startTime": "2021.700s",
                          "endTime": "2022.100s",
                          "word": "keinen"
                        },
                        {
                          "startTime": "2022.100s",
                          "endTime": "2022.200s",
                          "word": "Fall"
                        },
                        {
                          "startTime": "2022.200s",
                          "endTime": "2022.600s",
                          "word": "Abfall"
                        },
                        {
                          "startTime": "2022.600s",
                          "endTime": "2023.300s",
                          "word": "produzieren,"
                        },
                        {
                          "startTime": "2023.300s",
                          "endTime": "2023.900s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2023.900s",
                          "endTime": "2024.200s",
                          "word": "beide"
                        },
                        {
                          "startTime": "2024.200s",
                          "endTime": "2024.400s",
                          "word": "werden"
                        },
                        {
                          "startTime": "2024.400s",
                          "endTime": "2024.700s",
                          "word": "einen"
                        },
                        {
                          "startTime": "2024.700s",
                          "endTime": "2025s",
                          "word": "chemisch"
                        },
                        {
                          "startTime": "2025s",
                          "endTime": "2025.300s",
                          "word": "reines"
                        },
                        {
                          "startTime": "2025.300s",
                          "endTime": "2025.500s",
                          "word": "und"
                        },
                        {
                          "startTime": "2025.500s",
                          "endTime": "2025.900s",
                          "word": "stabiles"
                        },
                        {
                          "startTime": "2025.900s",
                          "endTime": "2026.300s",
                          "word": "Produkt"
                        },
                        {
                          "startTime": "2026.300s",
                          "endTime": "2026.700s",
                          "word": "herstellen"
                        },
                        {
                          "startTime": "2026.700s",
                          "endTime": "2026.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "2026.900s",
                          "endTime": "2027s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2027s",
                          "endTime": "2027.600s",
                          "word": "versprochen."
                        },
                        {
                          "startTime": "2027.600s",
                          "endTime": "2028.100s",
                          "word": "Da"
                        },
                        {
                          "startTime": "2028.100s",
                          "endTime": "2028.400s",
                          "word": "kommt"
                        },
                        {
                          "startTime": "2028.400s",
                          "endTime": "2028.600s",
                          "word": "nichts"
                        },
                        {
                          "startTime": "2028.600s",
                          "endTime": "2028.800s",
                          "word": "anderes"
                        },
                        {
                          "startTime": "2028.800s",
                          "endTime": "2029.100s",
                          "word": "rein,"
                        },
                        {
                          "startTime": "2029.100s",
                          "endTime": "2029.400s",
                          "word": "kein"
                        },
                        {
                          "startTime": "2029.400s",
                          "endTime": "2029.800s",
                          "word": "Babybrei"
                        },
                        {
                          "startTime": "2029.800s",
                          "endTime": "2030.900s",
                          "word": "Chilipulver."
                        },
                        {
                          "startTime": "2030.900s",
                          "endTime": "2031.600s",
                          "word": "Chili"
                        },
                        {
                          "startTime": "2031.600s",
                          "endTime": "2031.700s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2031.700s",
                          "endTime": "2031.900s",
                          "word": "aber"
                        },
                        {
                          "startTime": "2031.900s",
                          "endTime": "2032.100s",
                          "word": "mein"
                        },
                        {
                          "startTime": "2032.100s",
                          "endTime": "2032.500s",
                          "word": "Markenzeichen"
                        },
                        {
                          "startTime": "2032.500s",
                          "endTime": "2033.200s",
                          "word": "jetzt"
                        },
                        {
                          "startTime": "2033.200s",
                          "endTime": "2033.400s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2033.400s",
                          "endTime": "2033.600s",
                          "word": "mehr."
                        },
                        {
                          "startTime": "2033.600s",
                          "endTime": "2036.100s",
                          "word": "Das"
                        },
                        {
                          "startTime": "2036.100s",
                          "endTime": "2036.500s",
                          "word": "werden"
                        },
                        {
                          "startTime": "2036.500s",
                          "endTime": "2036.600s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2036.600s",
                          "endTime": "2036.800s",
                          "word": "ja"
                        },
                        {
                          "startTime": "2036.800s",
                          "endTime": "2037.200s",
                          "word": "sehen,"
                        },
                        {
                          "startTime": "2037.200s",
                          "endTime": "2038.800s",
                          "word": "was"
                        },
                        {
                          "startTime": "2038.800s",
                          "endTime": "2039.100s",
                          "word": "willst"
                        },
                        {
                          "startTime": "2039.100s",
                          "endTime": "2039.200s",
                          "word": "denn"
                        },
                        {
                          "startTime": "2039.200s",
                          "endTime": "2039.500s",
                          "word": "das"
                        },
                        {
                          "startTime": "2039.500s",
                          "endTime": "2039.800s",
                          "word": "für"
                        },
                        {
                          "startTime": "2039.800s",
                          "endTime": "2040.100s",
                          "word": "unsere"
                        },
                        {
                          "startTime": "2040.100s",
                          "endTime": "2040.200s",
                          "word": "Sicherheit,"
                        },
                        {
                          "startTime": "2040.200s",
                          "endTime": "2041.200s",
                          "word": "außerdem"
                        },
                        {
                          "startTime": "2041.200s",
                          "endTime": "2041.400s",
                          "word": "haben"
                        },
                        {
                          "startTime": "2041.400s",
                          "endTime": "2041.500s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2041.500s",
                          "endTime": "2041.600s",
                          "word": "eine"
                        },
                        {
                          "startTime": "2041.600s",
                          "endTime": "2041.800s",
                          "word": "Augenwaschstation"
                        },
                        {
                          "startTime": "2041.800s",
                          "endTime": "2042.700s",
                          "word": "für"
                        },
                        {
                          "startTime": "2042.700s",
                          "endTime": "2042.800s",
                          "word": "den"
                        },
                        {
                          "startTime": "2042.800s",
                          "endTime": "2043s",
                          "word": "Notfall"
                        },
                        {
                          "startTime": "2043s",
                          "endTime": "2045.400s",
                          "word": "diese"
                        },
                        {
                          "startTime": "2045.400s",
                          "endTime": "2045.600s",
                          "word": "Chemikalien"
                        },
                        {
                          "startTime": "2045.600s",
                          "endTime": "2046.200s",
                          "word": "und"
                        },
                        {
                          "startTime": "2046.200s",
                          "endTime": "2046.400s",
                          "word": "ihre"
                        },
                        {
                          "startTime": "2046.400s",
                          "endTime": "2046.800s",
                          "word": "Dämpfer"
                        },
                        {
                          "startTime": "2046.800s",
                          "endTime": "2047s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2047s",
                          "endTime": "2047.500s",
                          "word": "giftig,"
                        },
                        {
                          "startTime": "2047.500s",
                          "endTime": "2048.600s",
                          "word": "falls"
                        },
                        {
                          "startTime": "2048.600s",
                          "endTime": "2048.700s",
                          "word": "du"
                        },
                        {
                          "startTime": "2048.700s",
                          "endTime": "2048.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "2048.800s",
                          "endTime": "2048.900s",
                          "word": "noch"
                        },
                        {
                          "startTime": "2048.900s",
                          "endTime": "2049s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2049s",
                          "endTime": "2049.300s",
                          "word": "gewusst"
                        },
                        {
                          "startTime": "2049.300s",
                          "endTime": "2049.700s",
                          "word": "hast,"
                        },
                        {
                          "startTime": "2049.700s",
                          "endTime": "2049.800s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2049.800s",
                          "endTime": "2050.100s",
                          "word": "können"
                        },
                        {
                          "startTime": "2050.100s",
                          "endTime": "2050.200s",
                          "word": "sich"
                        },
                        {
                          "startTime": "2050.200s",
                          "endTime": "2050.300s",
                          "word": "ja"
                        },
                        {
                          "startTime": "2050.300s",
                          "endTime": "2050.500s",
                          "word": "die"
                        },
                        {
                          "startTime": "2050.500s",
                          "endTime": "2050.700s",
                          "word": "einer"
                        },
                        {
                          "startTime": "2050.700s",
                          "endTime": "2051.100s",
                          "word": "Schwuchtel"
                        },
                        {
                          "startTime": "2051.100s",
                          "endTime": "2051.600s",
                          "word": "ansehen."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wenn Sie wollen ich nicht, also, dass das ganze Zeug bleibt nicht länger als einen Tag hier was ich dachte. Wir kochen hier. Nein, wir werden nicht hier kochen, denn das ist mein Haus und ich heiße nicht, wo ich esse und wo sollen wir dann arbeiten? Sagen Sie es mir das ist ihr Ding, wenn Sie kochen wollen kaufen. Sie gefälligst bei sich zu Hause. Nein, habe ich mir gedacht.",
                      "confidence": 0.8978097,
                      "words": [
                        {
                          "startTime": "2051.600s",
                          "endTime": "2052s",
                          "word": "Wenn"
                        },
                        {
                          "startTime": "2052s",
                          "endTime": "2052.100s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "2052.100s",
                          "endTime": "2052.300s",
                          "word": "wollen"
                        },
                        {
                          "startTime": "2052.300s",
                          "endTime": "2052.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2052.600s",
                          "endTime": "2053s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "2053s",
                          "endTime": "2058.600s",
                          "word": "also,"
                        },
                        {
                          "startTime": "2058.600s",
                          "endTime": "2058.900s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2058.900s",
                          "endTime": "2060s",
                          "word": "das"
                        },
                        {
                          "startTime": "2060s",
                          "endTime": "2060.300s",
                          "word": "ganze"
                        },
                        {
                          "startTime": "2060.300s",
                          "endTime": "2060.500s",
                          "word": "Zeug"
                        },
                        {
                          "startTime": "2060.500s",
                          "endTime": "2060.800s",
                          "word": "bleibt"
                        },
                        {
                          "startTime": "2060.800s",
                          "endTime": "2060.900s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2060.900s",
                          "endTime": "2061s",
                          "word": "länger"
                        },
                        {
                          "startTime": "2061s",
                          "endTime": "2061.300s",
                          "word": "als"
                        },
                        {
                          "startTime": "2061.300s",
                          "endTime": "2061.600s",
                          "word": "einen"
                        },
                        {
                          "startTime": "2061.600s",
                          "endTime": "2061.600s",
                          "word": "Tag"
                        },
                        {
                          "startTime": "2061.600s",
                          "endTime": "2062s",
                          "word": "hier"
                        },
                        {
                          "startTime": "2062s",
                          "endTime": "2063.700s",
                          "word": "was"
                        },
                        {
                          "startTime": "2063.700s",
                          "endTime": "2064.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2064.300s",
                          "endTime": "2064.400s",
                          "word": "dachte."
                        },
                        {
                          "startTime": "2064.400s",
                          "endTime": "2064.600s",
                          "word": "Wir"
                        },
                        {
                          "startTime": "2064.600s",
                          "endTime": "2064.800s",
                          "word": "kochen"
                        },
                        {
                          "startTime": "2064.800s",
                          "endTime": "2065s",
                          "word": "hier."
                        },
                        {
                          "startTime": "2065s",
                          "endTime": "2065.500s",
                          "word": "Nein,"
                        },
                        {
                          "startTime": "2065.500s",
                          "endTime": "2065.600s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2065.600s",
                          "endTime": "2065.700s",
                          "word": "werden"
                        },
                        {
                          "startTime": "2065.700s",
                          "endTime": "2065.900s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2065.900s",
                          "endTime": "2066.200s",
                          "word": "hier"
                        },
                        {
                          "startTime": "2066.200s",
                          "endTime": "2066.500s",
                          "word": "kochen,"
                        },
                        {
                          "startTime": "2066.500s",
                          "endTime": "2067.200s",
                          "word": "denn"
                        },
                        {
                          "startTime": "2067.200s",
                          "endTime": "2067.300s",
                          "word": "das"
                        },
                        {
                          "startTime": "2067.300s",
                          "endTime": "2067.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2067.400s",
                          "endTime": "2067.700s",
                          "word": "mein"
                        },
                        {
                          "startTime": "2067.700s",
                          "endTime": "2068s",
                          "word": "Haus"
                        },
                        {
                          "startTime": "2068s",
                          "endTime": "2068.100s",
                          "word": "und"
                        },
                        {
                          "startTime": "2068.100s",
                          "endTime": "2068.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2068.300s",
                          "endTime": "2068.600s",
                          "word": "heiße"
                        },
                        {
                          "startTime": "2068.600s",
                          "endTime": "2068.600s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "2068.600s",
                          "endTime": "2068.900s",
                          "word": "wo"
                        },
                        {
                          "startTime": "2068.900s",
                          "endTime": "2069s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2069s",
                          "endTime": "2069.200s",
                          "word": "esse"
                        },
                        {
                          "startTime": "2069.200s",
                          "endTime": "2070.400s",
                          "word": "und"
                        },
                        {
                          "startTime": "2070.400s",
                          "endTime": "2070.500s",
                          "word": "wo"
                        },
                        {
                          "startTime": "2070.500s",
                          "endTime": "2070.700s",
                          "word": "sollen"
                        },
                        {
                          "startTime": "2070.700s",
                          "endTime": "2070.800s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2070.800s",
                          "endTime": "2071s",
                          "word": "dann"
                        },
                        {
                          "startTime": "2071s",
                          "endTime": "2071.400s",
                          "word": "arbeiten?"
                        },
                        {
                          "startTime": "2071.400s",
                          "endTime": "2072.300s",
                          "word": "Sagen"
                        },
                        {
                          "startTime": "2072.300s",
                          "endTime": "2072.300s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "2072.300s",
                          "endTime": "2072.400s",
                          "word": "es"
                        },
                        {
                          "startTime": "2072.400s",
                          "endTime": "2072.600s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2072.600s",
                          "endTime": "2073.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "2073.700s",
                          "endTime": "2073.800s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2073.800s",
                          "endTime": "2074.100s",
                          "word": "ihr"
                        },
                        {
                          "startTime": "2074.100s",
                          "endTime": "2074.200s",
                          "word": "Ding,"
                        },
                        {
                          "startTime": "2074.200s",
                          "endTime": "2074.600s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2074.600s",
                          "endTime": "2074.700s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "2074.700s",
                          "endTime": "2074.900s",
                          "word": "kochen"
                        },
                        {
                          "startTime": "2074.900s",
                          "endTime": "2075s",
                          "word": "wollen"
                        },
                        {
                          "startTime": "2075s",
                          "endTime": "2075.300s",
                          "word": "kaufen."
                        },
                        {
                          "startTime": "2075.300s",
                          "endTime": "2075.400s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "2075.400s",
                          "endTime": "2075.800s",
                          "word": "gefälligst"
                        },
                        {
                          "startTime": "2075.800s",
                          "endTime": "2075.900s",
                          "word": "bei"
                        },
                        {
                          "startTime": "2075.900s",
                          "endTime": "2076.200s",
                          "word": "sich"
                        },
                        {
                          "startTime": "2076.200s",
                          "endTime": "2076.200s",
                          "word": "zu"
                        },
                        {
                          "startTime": "2076.200s",
                          "endTime": "2076.500s",
                          "word": "Hause."
                        },
                        {
                          "startTime": "2076.500s",
                          "endTime": "2078.300s",
                          "word": "Nein,"
                        },
                        {
                          "startTime": "2078.300s",
                          "endTime": "2078.600s",
                          "word": "habe"
                        },
                        {
                          "startTime": "2078.600s",
                          "endTime": "2078.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2078.600s",
                          "endTime": "2078.800s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2078.800s",
                          "endTime": "2079s",
                          "word": "gedacht."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " tja",
                      "confidence": 0.8087091,
                      "words": [
                        {
                          "startTime": "2082.500s",
                          "endTime": "2083s",
                          "word": "tja"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Und wenn wir uns was in einem dieser Häuser zum selbst einlagern mieten, du weißt schon einen von diesen orangenen Containern und da arbeiten nein, da kommen die drauf, die haben Spürhunde die da rumschnüffeln.",
                      "confidence": 0.89409226,
                      "words": [
                        {
                          "startTime": "2084.500s",
                          "endTime": "2085s",
                          "word": "Und"
                        },
                        {
                          "startTime": "2085s",
                          "endTime": "2085.100s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2085.100s",
                          "endTime": "2085.200s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2085.200s",
                          "endTime": "2085.400s",
                          "word": "uns"
                        },
                        {
                          "startTime": "2085.400s",
                          "endTime": "2085.600s",
                          "word": "was"
                        },
                        {
                          "startTime": "2085.600s",
                          "endTime": "2085.800s",
                          "word": "in"
                        },
                        {
                          "startTime": "2085.800s",
                          "endTime": "2086.100s",
                          "word": "einem"
                        },
                        {
                          "startTime": "2086.100s",
                          "endTime": "2086.300s",
                          "word": "dieser"
                        },
                        {
                          "startTime": "2086.300s",
                          "endTime": "2086.400s",
                          "word": "Häuser"
                        },
                        {
                          "startTime": "2086.400s",
                          "endTime": "2086.700s",
                          "word": "zum"
                        },
                        {
                          "startTime": "2086.700s",
                          "endTime": "2087s",
                          "word": "selbst"
                        },
                        {
                          "startTime": "2087s",
                          "endTime": "2087.300s",
                          "word": "einlagern"
                        },
                        {
                          "startTime": "2087.300s",
                          "endTime": "2087.800s",
                          "word": "mieten,"
                        },
                        {
                          "startTime": "2087.800s",
                          "endTime": "2087.900s",
                          "word": "du"
                        },
                        {
                          "startTime": "2087.900s",
                          "endTime": "2088.200s",
                          "word": "weißt"
                        },
                        {
                          "startTime": "2088.200s",
                          "endTime": "2088.300s",
                          "word": "schon"
                        },
                        {
                          "startTime": "2088.300s",
                          "endTime": "2088.600s",
                          "word": "einen"
                        },
                        {
                          "startTime": "2088.600s",
                          "endTime": "2088.700s",
                          "word": "von"
                        },
                        {
                          "startTime": "2088.700s",
                          "endTime": "2089s",
                          "word": "diesen"
                        },
                        {
                          "startTime": "2089s",
                          "endTime": "2089.500s",
                          "word": "orangenen"
                        },
                        {
                          "startTime": "2089.500s",
                          "endTime": "2090s",
                          "word": "Containern"
                        },
                        {
                          "startTime": "2090s",
                          "endTime": "2090.200s",
                          "word": "und"
                        },
                        {
                          "startTime": "2090.200s",
                          "endTime": "2090.300s",
                          "word": "da"
                        },
                        {
                          "startTime": "2090.300s",
                          "endTime": "2090.800s",
                          "word": "arbeiten"
                        },
                        {
                          "startTime": "2090.800s",
                          "endTime": "2091.400s",
                          "word": "nein,"
                        },
                        {
                          "startTime": "2091.400s",
                          "endTime": "2092.500s",
                          "word": "da"
                        },
                        {
                          "startTime": "2092.500s",
                          "endTime": "2092.700s",
                          "word": "kommen"
                        },
                        {
                          "startTime": "2092.700s",
                          "endTime": "2092.800s",
                          "word": "die"
                        },
                        {
                          "startTime": "2092.800s",
                          "endTime": "2093.100s",
                          "word": "drauf,"
                        },
                        {
                          "startTime": "2093.100s",
                          "endTime": "2093.200s",
                          "word": "die"
                        },
                        {
                          "startTime": "2093.200s",
                          "endTime": "2093.300s",
                          "word": "haben"
                        },
                        {
                          "startTime": "2093.300s",
                          "endTime": "2093.900s",
                          "word": "Spürhunde"
                        },
                        {
                          "startTime": "2093.900s",
                          "endTime": "2094s",
                          "word": "die"
                        },
                        {
                          "startTime": "2094s",
                          "endTime": "2094s",
                          "word": "da"
                        },
                        {
                          "startTime": "2094s",
                          "endTime": "2094.400s",
                          "word": "rumschnüffeln."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Campe das brauchen wir",
                      "confidence": 0.8325488,
                      "words": [
                        {
                          "startTime": "2096.600s",
                          "endTime": "2097.300s",
                          "word": "Campe"
                        },
                        {
                          "startTime": "2097.300s",
                          "endTime": "2098.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "2098.700s",
                          "endTime": "2099.100s",
                          "word": "brauchen"
                        },
                        {
                          "startTime": "2099.100s",
                          "endTime": "2099.200s",
                          "word": "wir"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " du meinst dein Wohnmobil?",
                      "confidence": 0.8738576,
                      "words": [
                        {
                          "startTime": "2100.600s",
                          "endTime": "2100.900s",
                          "word": "du"
                        },
                        {
                          "startTime": "2100.900s",
                          "endTime": "2101.300s",
                          "word": "meinst"
                        },
                        {
                          "startTime": "2101.300s",
                          "endTime": "2101.400s",
                          "word": "dein"
                        },
                        {
                          "startTime": "2101.400s",
                          "endTime": "2102s",
                          "word": "Wohnmobil?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ich kenne einen der sonst verkauft, der war nur kämpfen damit.",
                      "confidence": 0.83213896,
                      "words": [
                        {
                          "startTime": "2107.900s",
                          "endTime": "2108.300s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "2108.300s",
                          "endTime": "2108.600s",
                          "word": "kenne"
                        },
                        {
                          "startTime": "2108.600s",
                          "endTime": "2108.800s",
                          "word": "einen"
                        },
                        {
                          "startTime": "2108.800s",
                          "endTime": "2108.800s",
                          "word": "der"
                        },
                        {
                          "startTime": "2108.800s",
                          "endTime": "2109.100s",
                          "word": "sonst"
                        },
                        {
                          "startTime": "2109.100s",
                          "endTime": "2109.600s",
                          "word": "verkauft,"
                        },
                        {
                          "startTime": "2109.600s",
                          "endTime": "2110.800s",
                          "word": "der"
                        },
                        {
                          "startTime": "2110.800s",
                          "endTime": "2110.900s",
                          "word": "war"
                        },
                        {
                          "startTime": "2110.900s",
                          "endTime": "2111s",
                          "word": "nur"
                        },
                        {
                          "startTime": "2111s",
                          "endTime": "2111.400s",
                          "word": "kämpfen"
                        },
                        {
                          "startTime": "2111.400s",
                          "endTime": "2111.500s",
                          "word": "damit."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Mobiles Labor das wäre der Hammer, dann könnte man raus in die Pampa fahren und allem aus dem Weg gehen.",
                      "confidence": 0.89787227,
                      "words": [
                        {
                          "startTime": "2112.700s",
                          "endTime": "2113.500s",
                          "word": "Mobiles"
                        },
                        {
                          "startTime": "2113.500s",
                          "endTime": "2113.800s",
                          "word": "Labor"
                        },
                        {
                          "startTime": "2113.800s",
                          "endTime": "2114.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "2114.800s",
                          "endTime": "2115s",
                          "word": "wäre"
                        },
                        {
                          "startTime": "2115s",
                          "endTime": "2115.100s",
                          "word": "der"
                        },
                        {
                          "startTime": "2115.100s",
                          "endTime": "2115.200s",
                          "word": "Hammer,"
                        },
                        {
                          "startTime": "2115.200s",
                          "endTime": "2116.400s",
                          "word": "dann"
                        },
                        {
                          "startTime": "2116.400s",
                          "endTime": "2116.700s",
                          "word": "könnte"
                        },
                        {
                          "startTime": "2116.700s",
                          "endTime": "2116.800s",
                          "word": "man"
                        },
                        {
                          "startTime": "2116.800s",
                          "endTime": "2117s",
                          "word": "raus"
                        },
                        {
                          "startTime": "2117s",
                          "endTime": "2117.200s",
                          "word": "in"
                        },
                        {
                          "startTime": "2117.200s",
                          "endTime": "2117.300s",
                          "word": "die"
                        },
                        {
                          "startTime": "2117.300s",
                          "endTime": "2117.600s",
                          "word": "Pampa"
                        },
                        {
                          "startTime": "2117.600s",
                          "endTime": "2118s",
                          "word": "fahren"
                        },
                        {
                          "startTime": "2118s",
                          "endTime": "2119.400s",
                          "word": "und"
                        },
                        {
                          "startTime": "2119.400s",
                          "endTime": "2119.600s",
                          "word": "allem"
                        },
                        {
                          "startTime": "2119.600s",
                          "endTime": "2119.700s",
                          "word": "aus"
                        },
                        {
                          "startTime": "2119.700s",
                          "endTime": "2120s",
                          "word": "dem"
                        },
                        {
                          "startTime": "2120s",
                          "endTime": "2120.200s",
                          "word": "Weg"
                        },
                        {
                          "startTime": "2120.200s",
                          "endTime": "2120.500s",
                          "word": "gehen."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Das sind ja nicht mal 7000 der Typ will aber 85 was ist alles an Geld, was ich auf dieser Welt habe, du bist doch Drogendealer. Verhandle sind gar nicht so wie damals im Unterricht. Ich meine überhaupt nicht, ich muss bloß halt warten. Sie warten sie.",
                      "confidence": 0.8870194,
                      "words": [
                        {
                          "startTime": "2123.300s",
                          "endTime": "2149.100s",
                          "word": "Das"
                        },
                        {
                          "startTime": "2149.100s",
                          "endTime": "2149.300s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2149.300s",
                          "endTime": "2149.400s",
                          "word": "ja"
                        },
                        {
                          "startTime": "2149.400s",
                          "endTime": "2149.500s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2149.500s",
                          "endTime": "2149.700s",
                          "word": "mal"
                        },
                        {
                          "startTime": "2149.700s",
                          "endTime": "2150.400s",
                          "word": "7000"
                        },
                        {
                          "startTime": "2150.400s",
                          "endTime": "2150.600s",
                          "word": "der"
                        },
                        {
                          "startTime": "2150.600s",
                          "endTime": "2150.700s",
                          "word": "Typ"
                        },
                        {
                          "startTime": "2150.700s",
                          "endTime": "2150.800s",
                          "word": "will"
                        },
                        {
                          "startTime": "2150.800s",
                          "endTime": "2151s",
                          "word": "aber"
                        },
                        {
                          "startTime": "2151s",
                          "endTime": "2152s",
                          "word": "85"
                        },
                        {
                          "startTime": "2152s",
                          "endTime": "2152.200s",
                          "word": "was"
                        },
                        {
                          "startTime": "2152.200s",
                          "endTime": "2152.300s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2152.300s",
                          "endTime": "2152.600s",
                          "word": "alles"
                        },
                        {
                          "startTime": "2152.600s",
                          "endTime": "2152.700s",
                          "word": "an"
                        },
                        {
                          "startTime": "2152.700s",
                          "endTime": "2153s",
                          "word": "Geld,"
                        },
                        {
                          "startTime": "2153s",
                          "endTime": "2153.100s",
                          "word": "was"
                        },
                        {
                          "startTime": "2153.100s",
                          "endTime": "2153.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2153.200s",
                          "endTime": "2153.400s",
                          "word": "auf"
                        },
                        {
                          "startTime": "2153.400s",
                          "endTime": "2153.600s",
                          "word": "dieser"
                        },
                        {
                          "startTime": "2153.600s",
                          "endTime": "2153.800s",
                          "word": "Welt"
                        },
                        {
                          "startTime": "2153.800s",
                          "endTime": "2153.900s",
                          "word": "habe,"
                        },
                        {
                          "startTime": "2153.900s",
                          "endTime": "2155.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "2155.400s",
                          "endTime": "2155.400s",
                          "word": "bist"
                        },
                        {
                          "startTime": "2155.400s",
                          "endTime": "2155.700s",
                          "word": "doch"
                        },
                        {
                          "startTime": "2155.700s",
                          "endTime": "2156.300s",
                          "word": "Drogendealer."
                        },
                        {
                          "startTime": "2156.300s",
                          "endTime": "2157.200s",
                          "word": "Verhandle"
                        },
                        {
                          "startTime": "2157.200s",
                          "endTime": "2160.300s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2160.300s",
                          "endTime": "2160.300s",
                          "word": "gar"
                        },
                        {
                          "startTime": "2160.300s",
                          "endTime": "2160.600s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2160.600s",
                          "endTime": "2160.600s",
                          "word": "so"
                        },
                        {
                          "startTime": "2160.600s",
                          "endTime": "2160.800s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2160.800s",
                          "endTime": "2161s",
                          "word": "damals"
                        },
                        {
                          "startTime": "2161s",
                          "endTime": "2161.200s",
                          "word": "im"
                        },
                        {
                          "startTime": "2161.200s",
                          "endTime": "2161.700s",
                          "word": "Unterricht."
                        },
                        {
                          "startTime": "2161.700s",
                          "endTime": "2161.900s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "2161.900s",
                          "endTime": "2162.100s",
                          "word": "meine"
                        },
                        {
                          "startTime": "2162.100s",
                          "endTime": "2162.900s",
                          "word": "überhaupt"
                        },
                        {
                          "startTime": "2162.900s",
                          "endTime": "2163.300s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "2163.300s",
                          "endTime": "2164.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2164.100s",
                          "endTime": "2164.200s",
                          "word": "muss"
                        },
                        {
                          "startTime": "2164.200s",
                          "endTime": "2164.300s",
                          "word": "bloß"
                        },
                        {
                          "startTime": "2164.300s",
                          "endTime": "2165.100s",
                          "word": "halt"
                        },
                        {
                          "startTime": "2165.100s",
                          "endTime": "2165.400s",
                          "word": "warten."
                        },
                        {
                          "startTime": "2165.400s",
                          "endTime": "2165.500s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "2165.500s",
                          "endTime": "2165.700s",
                          "word": "warten"
                        },
                        {
                          "startTime": "2165.700s",
                          "endTime": "2165.800s",
                          "word": "sie."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Sagen Sie mir warum sie das tun?",
                      "confidence": 0.8954484,
                      "words": [
                        {
                          "startTime": "2167.100s",
                          "endTime": "2167.900s",
                          "word": "Sagen"
                        },
                        {
                          "startTime": "2167.900s",
                          "endTime": "2168s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "2168s",
                          "endTime": "2168.100s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2168.100s",
                          "endTime": "2168.200s",
                          "word": "warum"
                        },
                        {
                          "startTime": "2168.200s",
                          "endTime": "2168.400s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2168.400s",
                          "endTime": "2168.600s",
                          "word": "das"
                        },
                        {
                          "startTime": "2168.600s",
                          "endTime": "2168.800s",
                          "word": "tun?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Aber im Ernst, warum tust du das wegen der Kohle Hauptsächlich?",
                      "confidence": 0.89988947,
                      "words": [
                        {
                          "startTime": "2170s",
                          "endTime": "2170.400s",
                          "word": "Aber"
                        },
                        {
                          "startTime": "2170.400s",
                          "endTime": "2170.500s",
                          "word": "im"
                        },
                        {
                          "startTime": "2170.500s",
                          "endTime": "2170.600s",
                          "word": "Ernst,"
                        },
                        {
                          "startTime": "2170.600s",
                          "endTime": "2171.800s",
                          "word": "warum"
                        },
                        {
                          "startTime": "2171.800s",
                          "endTime": "2172.100s",
                          "word": "tust"
                        },
                        {
                          "startTime": "2172.100s",
                          "endTime": "2172.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "2172.200s",
                          "endTime": "2172.300s",
                          "word": "das"
                        },
                        {
                          "startTime": "2172.300s",
                          "endTime": "2173.300s",
                          "word": "wegen"
                        },
                        {
                          "startTime": "2173.300s",
                          "endTime": "2173.500s",
                          "word": "der"
                        },
                        {
                          "startTime": "2173.500s",
                          "endTime": "2173.700s",
                          "word": "Kohle"
                        },
                        {
                          "startTime": "2173.700s",
                          "endTime": "2175.700s",
                          "word": "Hauptsächlich?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Da hast du's nein, kommen Sie man sonst Spiesser wie sie mit einem riesigen Stock im Arsch wird jetzt auf einmal mit wie alt sind sie 60 mit dem Kopf durch die Wand, ich bin 50. Das ist verrückt total irre, dass das ergibt keinen Sinn, wenn sie durchgeknallt sind oder so. Ich meine, wenn sie verrückt geworden sind, oder depressiv, ich meine, ich meine ja nur dann dann ist das was dass ich unbedingt wissen musst. Verstehen sie denn das das betrifft mich auch.",
                      "confidence": 0.90711087,
                      "words": [
                        {
                          "startTime": "2176.100s",
                          "endTime": "2176.900s",
                          "word": "Da"
                        },
                        {
                          "startTime": "2176.900s",
                          "endTime": "2177.100s",
                          "word": "hast"
                        },
                        {
                          "startTime": "2177.100s",
                          "endTime": "2177.200s",
                          "word": "du's"
                        },
                        {
                          "startTime": "2177.200s",
                          "endTime": "2178.100s",
                          "word": "nein,"
                        },
                        {
                          "startTime": "2178.100s",
                          "endTime": "2178.800s",
                          "word": "kommen"
                        },
                        {
                          "startTime": "2178.800s",
                          "endTime": "2178.900s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "2178.900s",
                          "endTime": "2180s",
                          "word": "man"
                        },
                        {
                          "startTime": "2180s",
                          "endTime": "2181.100s",
                          "word": "sonst"
                        },
                        {
                          "startTime": "2181.100s",
                          "endTime": "2181.500s",
                          "word": "Spiesser"
                        },
                        {
                          "startTime": "2181.500s",
                          "endTime": "2181.600s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2181.600s",
                          "endTime": "2181.800s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2181.800s",
                          "endTime": "2182s",
                          "word": "mit"
                        },
                        {
                          "startTime": "2182s",
                          "endTime": "2182.100s",
                          "word": "einem"
                        },
                        {
                          "startTime": "2182.100s",
                          "endTime": "2182.500s",
                          "word": "riesigen"
                        },
                        {
                          "startTime": "2182.500s",
                          "endTime": "2182.900s",
                          "word": "Stock"
                        },
                        {
                          "startTime": "2182.900s",
                          "endTime": "2183s",
                          "word": "im"
                        },
                        {
                          "startTime": "2183s",
                          "endTime": "2183.100s",
                          "word": "Arsch"
                        },
                        {
                          "startTime": "2183.100s",
                          "endTime": "2183.400s",
                          "word": "wird"
                        },
                        {
                          "startTime": "2183.400s",
                          "endTime": "2183.600s",
                          "word": "jetzt"
                        },
                        {
                          "startTime": "2183.600s",
                          "endTime": "2183.700s",
                          "word": "auf"
                        },
                        {
                          "startTime": "2183.700s",
                          "endTime": "2183.900s",
                          "word": "einmal"
                        },
                        {
                          "startTime": "2183.900s",
                          "endTime": "2184.100s",
                          "word": "mit"
                        },
                        {
                          "startTime": "2184.100s",
                          "endTime": "2184.200s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2184.200s",
                          "endTime": "2184.400s",
                          "word": "alt"
                        },
                        {
                          "startTime": "2184.400s",
                          "endTime": "2184.600s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2184.600s",
                          "endTime": "2184.800s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2184.800s",
                          "endTime": "2185.300s",
                          "word": "60"
                        },
                        {
                          "startTime": "2185.300s",
                          "endTime": "2185.500s",
                          "word": "mit"
                        },
                        {
                          "startTime": "2185.500s",
                          "endTime": "2185.700s",
                          "word": "dem"
                        },
                        {
                          "startTime": "2185.700s",
                          "endTime": "2185.800s",
                          "word": "Kopf"
                        },
                        {
                          "startTime": "2185.800s",
                          "endTime": "2186.100s",
                          "word": "durch"
                        },
                        {
                          "startTime": "2186.100s",
                          "endTime": "2186.200s",
                          "word": "die"
                        },
                        {
                          "startTime": "2186.200s",
                          "endTime": "2186.300s",
                          "word": "Wand,"
                        },
                        {
                          "startTime": "2186.300s",
                          "endTime": "2187.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2187.400s",
                          "endTime": "2187.500s",
                          "word": "bin"
                        },
                        {
                          "startTime": "2187.500s",
                          "endTime": "2188s",
                          "word": "50."
                        },
                        {
                          "startTime": "2188s",
                          "endTime": "2188.300s",
                          "word": "Das"
                        },
                        {
                          "startTime": "2188.300s",
                          "endTime": "2188.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2188.400s",
                          "endTime": "2188.700s",
                          "word": "verrückt"
                        },
                        {
                          "startTime": "2188.700s",
                          "endTime": "2189.300s",
                          "word": "total"
                        },
                        {
                          "startTime": "2189.300s",
                          "endTime": "2189.900s",
                          "word": "irre,"
                        },
                        {
                          "startTime": "2189.900s",
                          "endTime": "2190.100s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2190.100s",
                          "endTime": "2190.300s",
                          "word": "das"
                        },
                        {
                          "startTime": "2190.300s",
                          "endTime": "2190.600s",
                          "word": "ergibt"
                        },
                        {
                          "startTime": "2190.600s",
                          "endTime": "2190.800s",
                          "word": "keinen"
                        },
                        {
                          "startTime": "2190.800s",
                          "endTime": "2191s",
                          "word": "Sinn,"
                        },
                        {
                          "startTime": "2191s",
                          "endTime": "2191.600s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2191.600s",
                          "endTime": "2191.700s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2191.700s",
                          "endTime": "2192.400s",
                          "word": "durchgeknallt"
                        },
                        {
                          "startTime": "2192.400s",
                          "endTime": "2192.600s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2192.600s",
                          "endTime": "2193.500s",
                          "word": "oder"
                        },
                        {
                          "startTime": "2193.500s",
                          "endTime": "2193.600s",
                          "word": "so."
                        },
                        {
                          "startTime": "2193.600s",
                          "endTime": "2194.700s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "2194.700s",
                          "endTime": "2194.900s",
                          "word": "meine,"
                        },
                        {
                          "startTime": "2194.900s",
                          "endTime": "2195.600s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2195.600s",
                          "endTime": "2195.600s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2195.600s",
                          "endTime": "2196.600s",
                          "word": "verrückt"
                        },
                        {
                          "startTime": "2196.600s",
                          "endTime": "2197.100s",
                          "word": "geworden"
                        },
                        {
                          "startTime": "2197.100s",
                          "endTime": "2197.300s",
                          "word": "sind,"
                        },
                        {
                          "startTime": "2197.300s",
                          "endTime": "2197.500s",
                          "word": "oder"
                        },
                        {
                          "startTime": "2197.500s",
                          "endTime": "2198.300s",
                          "word": "depressiv,"
                        },
                        {
                          "startTime": "2198.300s",
                          "endTime": "2199s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2199s",
                          "endTime": "2199.200s",
                          "word": "meine,"
                        },
                        {
                          "startTime": "2199.200s",
                          "endTime": "2199.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2199.400s",
                          "endTime": "2199.600s",
                          "word": "meine"
                        },
                        {
                          "startTime": "2199.600s",
                          "endTime": "2199.600s",
                          "word": "ja"
                        },
                        {
                          "startTime": "2199.600s",
                          "endTime": "2199.700s",
                          "word": "nur"
                        },
                        {
                          "startTime": "2199.700s",
                          "endTime": "2199.900s",
                          "word": "dann"
                        },
                        {
                          "startTime": "2199.900s",
                          "endTime": "2201.300s",
                          "word": "dann"
                        },
                        {
                          "startTime": "2201.300s",
                          "endTime": "2201.500s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2201.500s",
                          "endTime": "2201.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "2201.800s",
                          "endTime": "2202s",
                          "word": "was"
                        },
                        {
                          "startTime": "2202s",
                          "endTime": "2202.200s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2202.200s",
                          "endTime": "2202.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2202.300s",
                          "endTime": "2202.900s",
                          "word": "unbedingt"
                        },
                        {
                          "startTime": "2202.900s",
                          "endTime": "2203s",
                          "word": "wissen"
                        },
                        {
                          "startTime": "2203s",
                          "endTime": "2203.500s",
                          "word": "musst."
                        },
                        {
                          "startTime": "2203.500s",
                          "endTime": "2204.400s",
                          "word": "Verstehen"
                        },
                        {
                          "startTime": "2204.400s",
                          "endTime": "2204.600s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2204.600s",
                          "endTime": "2204.900s",
                          "word": "denn"
                        },
                        {
                          "startTime": "2204.900s",
                          "endTime": "2205.200s",
                          "word": "das"
                        },
                        {
                          "startTime": "2205.200s",
                          "endTime": "2205.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "2205.400s",
                          "endTime": "2205.600s",
                          "word": "betrifft"
                        },
                        {
                          "startTime": "2205.600s",
                          "endTime": "2205.800s",
                          "word": "mich"
                        },
                        {
                          "startTime": "2205.800s",
                          "endTime": "2206s",
                          "word": "auch."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ich bin aufgewacht.",
                      "confidence": 0.8901986,
                      "words": [
                        {
                          "startTime": "2211.900s",
                          "endTime": "2212.400s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "2212.400s",
                          "endTime": "2212.600s",
                          "word": "bin"
                        },
                        {
                          "startTime": "2212.600s",
                          "endTime": "2213.100s",
                          "word": "aufgewacht."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Was?",
                      "confidence": 0.704703,
                      "words": [
                        {
                          "startTime": "2218.100s",
                          "endTime": "2220.400s",
                          "word": "Was?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Kaufe den Kämpfe wir fangen morgen an, wie geht's dir da drin?",
                      "confidence": 0.84338176,
                      "words": [
                        {
                          "startTime": "2222.700s",
                          "endTime": "2223.300s",
                          "word": "Kaufe"
                        },
                        {
                          "startTime": "2223.300s",
                          "endTime": "2223.400s",
                          "word": "den"
                        },
                        {
                          "startTime": "2223.400s",
                          "endTime": "2223.800s",
                          "word": "Kämpfe"
                        },
                        {
                          "startTime": "2223.800s",
                          "endTime": "2226.600s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2226.600s",
                          "endTime": "2226.800s",
                          "word": "fangen"
                        },
                        {
                          "startTime": "2226.800s",
                          "endTime": "2226.900s",
                          "word": "morgen"
                        },
                        {
                          "startTime": "2226.900s",
                          "endTime": "2227.200s",
                          "word": "an,"
                        },
                        {
                          "startTime": "2227.200s",
                          "endTime": "2234s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2234s",
                          "endTime": "2234.200s",
                          "word": "geht's"
                        },
                        {
                          "startTime": "2234.200s",
                          "endTime": "2234.400s",
                          "word": "dir"
                        },
                        {
                          "startTime": "2234.400s",
                          "endTime": "2234.400s",
                          "word": "da"
                        },
                        {
                          "startTime": "2234.400s",
                          "endTime": "2234.700s",
                          "word": "drin?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Gott soll ich reinkommen oder dann dead dead.",
                      "confidence": 0.77385265,
                      "words": [
                        {
                          "startTime": "2236.200s",
                          "endTime": "2236.800s",
                          "word": "Gott"
                        },
                        {
                          "startTime": "2236.800s",
                          "endTime": "2244.700s",
                          "word": "soll"
                        },
                        {
                          "startTime": "2244.700s",
                          "endTime": "2244.800s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2244.800s",
                          "endTime": "2245.200s",
                          "word": "reinkommen"
                        },
                        {
                          "startTime": "2245.200s",
                          "endTime": "2245.300s",
                          "word": "oder"
                        },
                        {
                          "startTime": "2245.300s",
                          "endTime": "2245.600s",
                          "word": "dann"
                        },
                        {
                          "startTime": "2245.600s",
                          "endTime": "2245.800s",
                          "word": "dead"
                        },
                        {
                          "startTime": "2245.800s",
                          "endTime": "2249.300s",
                          "word": "dead."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Sie fühlte sich in der Taille an ist die zu n du solltest dir nicht nehmen, wenn sie zu eng ist vorgewaschen und bist du sicher, dass du nicht über einen anderen Schnitt bist, wie die wie die ganz engen Jeans ich glaube, die sind gerade sehr in Mode dieses Geld hat Jeans sehe ich aus wie ein Skater. Ich meine ja nur mal, ich habe Hosen Wien große Mami kannst du mir meinen Hosenstall zumachen tust nicht.",
                      "confidence": 0.9098146,
                      "words": [
                        {
                          "startTime": "2251.100s",
                          "endTime": "2266.600s",
                          "word": "Sie"
                        },
                        {
                          "startTime": "2266.600s",
                          "endTime": "2266.900s",
                          "word": "fühlte"
                        },
                        {
                          "startTime": "2266.900s",
                          "endTime": "2267s",
                          "word": "sich"
                        },
                        {
                          "startTime": "2267s",
                          "endTime": "2267.200s",
                          "word": "in"
                        },
                        {
                          "startTime": "2267.200s",
                          "endTime": "2267.300s",
                          "word": "der"
                        },
                        {
                          "startTime": "2267.300s",
                          "endTime": "2267.500s",
                          "word": "Taille"
                        },
                        {
                          "startTime": "2267.500s",
                          "endTime": "2267.700s",
                          "word": "an"
                        },
                        {
                          "startTime": "2267.700s",
                          "endTime": "2267.900s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2267.900s",
                          "endTime": "2268s",
                          "word": "die"
                        },
                        {
                          "startTime": "2268s",
                          "endTime": "2268.200s",
                          "word": "zu"
                        },
                        {
                          "startTime": "2268.200s",
                          "endTime": "2268.300s",
                          "word": "n"
                        },
                        {
                          "startTime": "2268.300s",
                          "endTime": "2269.300s",
                          "word": "du"
                        },
                        {
                          "startTime": "2269.300s",
                          "endTime": "2269.700s",
                          "word": "solltest"
                        },
                        {
                          "startTime": "2269.700s",
                          "endTime": "2269.800s",
                          "word": "dir"
                        },
                        {
                          "startTime": "2269.800s",
                          "endTime": "2269.900s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2269.900s",
                          "endTime": "2270s",
                          "word": "nehmen,"
                        },
                        {
                          "startTime": "2270s",
                          "endTime": "2270.200s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2270.200s",
                          "endTime": "2270.400s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2270.400s",
                          "endTime": "2270.500s",
                          "word": "zu"
                        },
                        {
                          "startTime": "2270.500s",
                          "endTime": "2270.500s",
                          "word": "eng"
                        },
                        {
                          "startTime": "2270.500s",
                          "endTime": "2270.700s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2270.700s",
                          "endTime": "2274.800s",
                          "word": "vorgewaschen"
                        },
                        {
                          "startTime": "2274.800s",
                          "endTime": "2275.300s",
                          "word": "und"
                        },
                        {
                          "startTime": "2275.300s",
                          "endTime": "2275.800s",
                          "word": "bist"
                        },
                        {
                          "startTime": "2275.800s",
                          "endTime": "2275.900s",
                          "word": "du"
                        },
                        {
                          "startTime": "2275.900s",
                          "endTime": "2276s",
                          "word": "sicher,"
                        },
                        {
                          "startTime": "2276s",
                          "endTime": "2276.300s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2276.300s",
                          "endTime": "2276.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "2276.400s",
                          "endTime": "2276.500s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2276.500s",
                          "endTime": "2276.600s",
                          "word": "über"
                        },
                        {
                          "startTime": "2276.600s",
                          "endTime": "2276.800s",
                          "word": "einen"
                        },
                        {
                          "startTime": "2276.800s",
                          "endTime": "2277s",
                          "word": "anderen"
                        },
                        {
                          "startTime": "2277s",
                          "endTime": "2277.400s",
                          "word": "Schnitt"
                        },
                        {
                          "startTime": "2277.400s",
                          "endTime": "2277.700s",
                          "word": "bist,"
                        },
                        {
                          "startTime": "2277.700s",
                          "endTime": "2278.100s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2278.100s",
                          "endTime": "2278.200s",
                          "word": "die"
                        },
                        {
                          "startTime": "2278.200s",
                          "endTime": "2279.200s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2279.200s",
                          "endTime": "2279.400s",
                          "word": "die"
                        },
                        {
                          "startTime": "2279.400s",
                          "endTime": "2279.600s",
                          "word": "ganz"
                        },
                        {
                          "startTime": "2279.600s",
                          "endTime": "2279.900s",
                          "word": "engen"
                        },
                        {
                          "startTime": "2279.900s",
                          "endTime": "2279.900s",
                          "word": "Jeans"
                        },
                        {
                          "startTime": "2279.900s",
                          "endTime": "2280.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2280.300s",
                          "endTime": "2280.600s",
                          "word": "glaube,"
                        },
                        {
                          "startTime": "2280.600s",
                          "endTime": "2280.700s",
                          "word": "die"
                        },
                        {
                          "startTime": "2280.700s",
                          "endTime": "2280.700s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2280.700s",
                          "endTime": "2281.100s",
                          "word": "gerade"
                        },
                        {
                          "startTime": "2281.100s",
                          "endTime": "2281.300s",
                          "word": "sehr"
                        },
                        {
                          "startTime": "2281.300s",
                          "endTime": "2281.400s",
                          "word": "in"
                        },
                        {
                          "startTime": "2281.400s",
                          "endTime": "2281.600s",
                          "word": "Mode"
                        },
                        {
                          "startTime": "2281.600s",
                          "endTime": "2282.200s",
                          "word": "dieses"
                        },
                        {
                          "startTime": "2282.200s",
                          "endTime": "2282.500s",
                          "word": "Geld"
                        },
                        {
                          "startTime": "2282.500s",
                          "endTime": "2282.700s",
                          "word": "hat"
                        },
                        {
                          "startTime": "2282.700s",
                          "endTime": "2283s",
                          "word": "Jeans"
                        },
                        {
                          "startTime": "2283s",
                          "endTime": "2283.800s",
                          "word": "sehe"
                        },
                        {
                          "startTime": "2283.800s",
                          "endTime": "2283.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2283.900s",
                          "endTime": "2284.100s",
                          "word": "aus"
                        },
                        {
                          "startTime": "2284.100s",
                          "endTime": "2284.400s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2284.400s",
                          "endTime": "2284.600s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2284.600s",
                          "endTime": "2285.200s",
                          "word": "Skater."
                        },
                        {
                          "startTime": "2285.200s",
                          "endTime": "2285.900s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "2285.900s",
                          "endTime": "2286.200s",
                          "word": "meine"
                        },
                        {
                          "startTime": "2286.200s",
                          "endTime": "2286.300s",
                          "word": "ja"
                        },
                        {
                          "startTime": "2286.300s",
                          "endTime": "2286.500s",
                          "word": "nur"
                        },
                        {
                          "startTime": "2286.500s",
                          "endTime": "2287.400s",
                          "word": "mal,"
                        },
                        {
                          "startTime": "2287.400s",
                          "endTime": "2287.800s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2287.800s",
                          "endTime": "2288s",
                          "word": "habe"
                        },
                        {
                          "startTime": "2288s",
                          "endTime": "2288.500s",
                          "word": "Hosen"
                        },
                        {
                          "startTime": "2288.500s",
                          "endTime": "2288.800s",
                          "word": "Wien"
                        },
                        {
                          "startTime": "2288.800s",
                          "endTime": "2289.400s",
                          "word": "große"
                        },
                        {
                          "startTime": "2289.400s",
                          "endTime": "2292s",
                          "word": "Mami"
                        },
                        {
                          "startTime": "2292s",
                          "endTime": "2292.600s",
                          "word": "kannst"
                        },
                        {
                          "startTime": "2292.600s",
                          "endTime": "2292.800s",
                          "word": "du"
                        },
                        {
                          "startTime": "2292.800s",
                          "endTime": "2293s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2293s",
                          "endTime": "2293.300s",
                          "word": "meinen"
                        },
                        {
                          "startTime": "2293.300s",
                          "endTime": "2293.800s",
                          "word": "Hosenstall"
                        },
                        {
                          "startTime": "2293.800s",
                          "endTime": "2294.900s",
                          "word": "zumachen"
                        },
                        {
                          "startTime": "2294.900s",
                          "endTime": "2304.300s",
                          "word": "tust"
                        },
                        {
                          "startTime": "2304.300s",
                          "endTime": "2304.600s",
                          "word": "nicht."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Am besten siehst du da gar nicht hin, wir sind offensichtlich total bescheuert.",
                      "confidence": 0.881096,
                      "words": [
                        {
                          "startTime": "2311.100s",
                          "endTime": "2312.800s",
                          "word": "Am"
                        },
                        {
                          "startTime": "2312.800s",
                          "endTime": "2313.200s",
                          "word": "besten"
                        },
                        {
                          "startTime": "2313.200s",
                          "endTime": "2313.400s",
                          "word": "siehst"
                        },
                        {
                          "startTime": "2313.400s",
                          "endTime": "2313.600s",
                          "word": "du"
                        },
                        {
                          "startTime": "2313.600s",
                          "endTime": "2313.600s",
                          "word": "da"
                        },
                        {
                          "startTime": "2313.600s",
                          "endTime": "2313.800s",
                          "word": "gar"
                        },
                        {
                          "startTime": "2313.800s",
                          "endTime": "2313.900s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2313.900s",
                          "endTime": "2314.300s",
                          "word": "hin,"
                        },
                        {
                          "startTime": "2314.300s",
                          "endTime": "2315.300s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2315.300s",
                          "endTime": "2315.400s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2315.400s",
                          "endTime": "2315.700s",
                          "word": "offensichtlich"
                        },
                        {
                          "startTime": "2315.700s",
                          "endTime": "2316.100s",
                          "word": "total"
                        },
                        {
                          "startTime": "2316.100s",
                          "endTime": "2316.900s",
                          "word": "bescheuert."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Also, ich glaube diese Jeans steht dir wirklich gut und deshalb finde ich du solltest die nehmen Ok bitte, warte hier im Augenblick, ich bin sofort wieder da nein mami, ich glaube, ich habe ein paar Pfunde meine neue Hose abgesagt. Hast du Schwierigkeiten zu gehen, ich mache das nur ein Versuch, den solltest du nutzen oder wenn du auf die drei Mädels komm, wir gehen ja. Komm später.",
                      "confidence": 0.88614947,
                      "words": [
                        {
                          "startTime": "2319.500s",
                          "endTime": "2321.600s",
                          "word": "Also,"
                        },
                        {
                          "startTime": "2321.600s",
                          "endTime": "2321.700s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2321.700s",
                          "endTime": "2321.800s",
                          "word": "glaube"
                        },
                        {
                          "startTime": "2321.800s",
                          "endTime": "2323.400s",
                          "word": "diese"
                        },
                        {
                          "startTime": "2323.400s",
                          "endTime": "2323.700s",
                          "word": "Jeans"
                        },
                        {
                          "startTime": "2323.700s",
                          "endTime": "2323.800s",
                          "word": "steht"
                        },
                        {
                          "startTime": "2323.800s",
                          "endTime": "2324s",
                          "word": "dir"
                        },
                        {
                          "startTime": "2324s",
                          "endTime": "2324.100s",
                          "word": "wirklich"
                        },
                        {
                          "startTime": "2324.100s",
                          "endTime": "2324.300s",
                          "word": "gut"
                        },
                        {
                          "startTime": "2324.300s",
                          "endTime": "2324.700s",
                          "word": "und"
                        },
                        {
                          "startTime": "2324.700s",
                          "endTime": "2324.900s",
                          "word": "deshalb"
                        },
                        {
                          "startTime": "2324.900s",
                          "endTime": "2325.300s",
                          "word": "finde"
                        },
                        {
                          "startTime": "2325.300s",
                          "endTime": "2325.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2325.300s",
                          "endTime": "2325.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "2325.400s",
                          "endTime": "2325.500s",
                          "word": "solltest"
                        },
                        {
                          "startTime": "2325.500s",
                          "endTime": "2325.800s",
                          "word": "die"
                        },
                        {
                          "startTime": "2325.800s",
                          "endTime": "2326.100s",
                          "word": "nehmen"
                        },
                        {
                          "startTime": "2326.100s",
                          "endTime": "2326.200s",
                          "word": "Ok"
                        },
                        {
                          "startTime": "2326.200s",
                          "endTime": "2328s",
                          "word": "bitte,"
                        },
                        {
                          "startTime": "2328s",
                          "endTime": "2328.300s",
                          "word": "warte"
                        },
                        {
                          "startTime": "2328.300s",
                          "endTime": "2328.500s",
                          "word": "hier"
                        },
                        {
                          "startTime": "2328.500s",
                          "endTime": "2328.500s",
                          "word": "im"
                        },
                        {
                          "startTime": "2328.500s",
                          "endTime": "2329s",
                          "word": "Augenblick,"
                        },
                        {
                          "startTime": "2329s",
                          "endTime": "2329.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2329.200s",
                          "endTime": "2329.400s",
                          "word": "bin"
                        },
                        {
                          "startTime": "2329.400s",
                          "endTime": "2329.700s",
                          "word": "sofort"
                        },
                        {
                          "startTime": "2329.700s",
                          "endTime": "2329.900s",
                          "word": "wieder"
                        },
                        {
                          "startTime": "2329.900s",
                          "endTime": "2330s",
                          "word": "da"
                        },
                        {
                          "startTime": "2330s",
                          "endTime": "2331.700s",
                          "word": "nein"
                        },
                        {
                          "startTime": "2331.700s",
                          "endTime": "2332.500s",
                          "word": "mami,"
                        },
                        {
                          "startTime": "2332.500s",
                          "endTime": "2332.700s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2332.700s",
                          "endTime": "2333.300s",
                          "word": "glaube,"
                        },
                        {
                          "startTime": "2333.300s",
                          "endTime": "2333.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2333.400s",
                          "endTime": "2333.500s",
                          "word": "habe"
                        },
                        {
                          "startTime": "2333.500s",
                          "endTime": "2333.600s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2333.600s",
                          "endTime": "2333.800s",
                          "word": "paar"
                        },
                        {
                          "startTime": "2333.800s",
                          "endTime": "2334.100s",
                          "word": "Pfunde"
                        },
                        {
                          "startTime": "2334.100s",
                          "endTime": "2334.600s",
                          "word": "meine"
                        },
                        {
                          "startTime": "2334.600s",
                          "endTime": "2334.800s",
                          "word": "neue"
                        },
                        {
                          "startTime": "2334.800s",
                          "endTime": "2335.100s",
                          "word": "Hose"
                        },
                        {
                          "startTime": "2335.100s",
                          "endTime": "2335.900s",
                          "word": "abgesagt."
                        },
                        {
                          "startTime": "2335.900s",
                          "endTime": "2346.100s",
                          "word": "Hast"
                        },
                        {
                          "startTime": "2346.100s",
                          "endTime": "2346.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "2346.200s",
                          "endTime": "2346.400s",
                          "word": "Schwierigkeiten"
                        },
                        {
                          "startTime": "2346.400s",
                          "endTime": "2346.900s",
                          "word": "zu"
                        },
                        {
                          "startTime": "2346.900s",
                          "endTime": "2347.200s",
                          "word": "gehen,"
                        },
                        {
                          "startTime": "2347.200s",
                          "endTime": "2353.800s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2353.800s",
                          "endTime": "2354.100s",
                          "word": "mache"
                        },
                        {
                          "startTime": "2354.100s",
                          "endTime": "2354.200s",
                          "word": "das"
                        },
                        {
                          "startTime": "2354.200s",
                          "endTime": "2355.700s",
                          "word": "nur"
                        },
                        {
                          "startTime": "2355.700s",
                          "endTime": "2355.800s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2355.800s",
                          "endTime": "2356.100s",
                          "word": "Versuch,"
                        },
                        {
                          "startTime": "2356.100s",
                          "endTime": "2356.400s",
                          "word": "den"
                        },
                        {
                          "startTime": "2356.400s",
                          "endTime": "2356.600s",
                          "word": "solltest"
                        },
                        {
                          "startTime": "2356.600s",
                          "endTime": "2356.700s",
                          "word": "du"
                        },
                        {
                          "startTime": "2356.700s",
                          "endTime": "2356.800s",
                          "word": "nutzen"
                        },
                        {
                          "startTime": "2356.800s",
                          "endTime": "2358.600s",
                          "word": "oder"
                        },
                        {
                          "startTime": "2358.600s",
                          "endTime": "2358.800s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2358.800s",
                          "endTime": "2358.800s",
                          "word": "du"
                        },
                        {
                          "startTime": "2358.800s",
                          "endTime": "2358.900s",
                          "word": "auf"
                        },
                        {
                          "startTime": "2358.900s",
                          "endTime": "2359s",
                          "word": "die"
                        },
                        {
                          "startTime": "2359s",
                          "endTime": "2359.100s",
                          "word": "drei"
                        },
                        {
                          "startTime": "2359.100s",
                          "endTime": "2359.300s",
                          "word": "Mädels"
                        },
                        {
                          "startTime": "2359.300s",
                          "endTime": "2367.700s",
                          "word": "komm,"
                        },
                        {
                          "startTime": "2367.700s",
                          "endTime": "2367.900s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2367.900s",
                          "endTime": "2368.100s",
                          "word": "gehen"
                        },
                        {
                          "startTime": "2368.100s",
                          "endTime": "2368.400s",
                          "word": "ja."
                        },
                        {
                          "startTime": "2368.400s",
                          "endTime": "2368.800s",
                          "word": "Komm"
                        },
                        {
                          "startTime": "2368.800s",
                          "endTime": "2372.100s",
                          "word": "später."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Hier sind bloß Kühe.",
                      "confidence": 0.7654312,
                      "words": [
                        {
                          "startTime": "2408.800s",
                          "endTime": "2409.200s",
                          "word": "Hier"
                        },
                        {
                          "startTime": "2409.200s",
                          "endTime": "2409.600s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2409.600s",
                          "endTime": "2409.800s",
                          "word": "bloß"
                        },
                        {
                          "startTime": "2409.800s",
                          "endTime": "2410.100s",
                          "word": "Kühe."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Da muss ein riesen Kuhstall sein, da hinten etwa 3 Kilometer weit aber sehen kann ich niemanden, hast du Kuhstall gesagt, wo die wohnen?",
                      "confidence": 0.8578937,
                      "words": [
                        {
                          "startTime": "2411.300s",
                          "endTime": "2411.600s",
                          "word": "Da"
                        },
                        {
                          "startTime": "2411.600s",
                          "endTime": "2411.800s",
                          "word": "muss"
                        },
                        {
                          "startTime": "2411.800s",
                          "endTime": "2411.900s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2411.900s",
                          "endTime": "2412.300s",
                          "word": "riesen"
                        },
                        {
                          "startTime": "2412.300s",
                          "endTime": "2412.700s",
                          "word": "Kuhstall"
                        },
                        {
                          "startTime": "2412.700s",
                          "endTime": "2413s",
                          "word": "sein,"
                        },
                        {
                          "startTime": "2413s",
                          "endTime": "2413.400s",
                          "word": "da"
                        },
                        {
                          "startTime": "2413.400s",
                          "endTime": "2413.700s",
                          "word": "hinten"
                        },
                        {
                          "startTime": "2413.700s",
                          "endTime": "2414s",
                          "word": "etwa"
                        },
                        {
                          "startTime": "2414s",
                          "endTime": "2414.100s",
                          "word": "3"
                        },
                        {
                          "startTime": "2414.100s",
                          "endTime": "2414.600s",
                          "word": "Kilometer"
                        },
                        {
                          "startTime": "2414.600s",
                          "endTime": "2414.900s",
                          "word": "weit"
                        },
                        {
                          "startTime": "2414.900s",
                          "endTime": "2415.200s",
                          "word": "aber"
                        },
                        {
                          "startTime": "2415.200s",
                          "endTime": "2416.300s",
                          "word": "sehen"
                        },
                        {
                          "startTime": "2416.300s",
                          "endTime": "2416.400s",
                          "word": "kann"
                        },
                        {
                          "startTime": "2416.400s",
                          "endTime": "2416.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2416.600s",
                          "endTime": "2417.100s",
                          "word": "niemanden,"
                        },
                        {
                          "startTime": "2417.100s",
                          "endTime": "2418.200s",
                          "word": "hast"
                        },
                        {
                          "startTime": "2418.200s",
                          "endTime": "2418.200s",
                          "word": "du"
                        },
                        {
                          "startTime": "2418.200s",
                          "endTime": "2418.700s",
                          "word": "Kuhstall"
                        },
                        {
                          "startTime": "2418.700s",
                          "endTime": "2419.300s",
                          "word": "gesagt,"
                        },
                        {
                          "startTime": "2419.300s",
                          "endTime": "2420.900s",
                          "word": "wo"
                        },
                        {
                          "startTime": "2420.900s",
                          "endTime": "2421s",
                          "word": "die"
                        },
                        {
                          "startTime": "2421s",
                          "endTime": "2421.400s",
                          "word": "wohnen?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Die Kühe scheiß drauf man lass uns hier kochen.",
                      "confidence": 0.87795,
                      "words": [
                        {
                          "startTime": "2422.700s",
                          "endTime": "2423s",
                          "word": "Die"
                        },
                        {
                          "startTime": "2423s",
                          "endTime": "2423.300s",
                          "word": "Kühe"
                        },
                        {
                          "startTime": "2423.300s",
                          "endTime": "2425.400s",
                          "word": "scheiß"
                        },
                        {
                          "startTime": "2425.400s",
                          "endTime": "2425.600s",
                          "word": "drauf"
                        },
                        {
                          "startTime": "2425.600s",
                          "endTime": "2425.900s",
                          "word": "man"
                        },
                        {
                          "startTime": "2425.900s",
                          "endTime": "2427.300s",
                          "word": "lass"
                        },
                        {
                          "startTime": "2427.300s",
                          "endTime": "2427.500s",
                          "word": "uns"
                        },
                        {
                          "startTime": "2427.500s",
                          "endTime": "2427.600s",
                          "word": "hier"
                        },
                        {
                          "startTime": "2427.600s",
                          "endTime": "2428s",
                          "word": "kochen."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Kuhstall",
                      "confidence": 0.91906416,
                      "words": [
                        {
                          "startTime": "2429.400s",
                          "endTime": "2431.700s",
                          "word": "Kuhstall"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " gott, steh mir bei",
                      "confidence": 0.91906416,
                      "words": [
                        {
                          "startTime": "2433.400s",
                          "endTime": "2433.900s",
                          "word": "gott,"
                        },
                        {
                          "startTime": "2433.900s",
                          "endTime": "2434.100s",
                          "word": "steh"
                        },
                        {
                          "startTime": "2434.100s",
                          "endTime": "2434.100s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2434.100s",
                          "endTime": "2434.400s",
                          "word": "bei"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " was tun sie denn da, das sind meine guten Sachen.",
                      "confidence": 0.8450247,
                      "words": [
                        {
                          "startTime": "2438.300s",
                          "endTime": "2447.100s",
                          "word": "was"
                        },
                        {
                          "startTime": "2447.100s",
                          "endTime": "2447.300s",
                          "word": "tun"
                        },
                        {
                          "startTime": "2447.300s",
                          "endTime": "2447.400s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2447.400s",
                          "endTime": "2447.500s",
                          "word": "denn"
                        },
                        {
                          "startTime": "2447.500s",
                          "endTime": "2447.700s",
                          "word": "da,"
                        },
                        {
                          "startTime": "2447.700s",
                          "endTime": "2448.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "2448.900s",
                          "endTime": "2449s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2449s",
                          "endTime": "2449.300s",
                          "word": "meine"
                        },
                        {
                          "startTime": "2449.300s",
                          "endTime": "2449.700s",
                          "word": "guten"
                        },
                        {
                          "startTime": "2449.700s",
                          "endTime": "2449.700s",
                          "word": "Sachen."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wenn ich nach hause komme kann ich nicht nach laborie vielleicht nicht ich schon die WoW die Unterhose, die behalten sie aber an oder?",
                      "confidence": 0.852721,
                      "words": [
                        {
                          "startTime": "2451.200s",
                          "endTime": "2452s",
                          "word": "Wenn"
                        },
                        {
                          "startTime": "2452s",
                          "endTime": "2452s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2452s",
                          "endTime": "2452.200s",
                          "word": "nach"
                        },
                        {
                          "startTime": "2452.200s",
                          "endTime": "2452.500s",
                          "word": "hause"
                        },
                        {
                          "startTime": "2452.500s",
                          "endTime": "2452.600s",
                          "word": "komme"
                        },
                        {
                          "startTime": "2452.600s",
                          "endTime": "2452.900s",
                          "word": "kann"
                        },
                        {
                          "startTime": "2452.900s",
                          "endTime": "2453s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2453s",
                          "endTime": "2453.300s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2453.300s",
                          "endTime": "2453.400s",
                          "word": "nach"
                        },
                        {
                          "startTime": "2453.400s",
                          "endTime": "2453.900s",
                          "word": "laborie"
                        },
                        {
                          "startTime": "2453.900s",
                          "endTime": "2455.300s",
                          "word": "vielleicht"
                        },
                        {
                          "startTime": "2455.300s",
                          "endTime": "2455.600s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2455.600s",
                          "endTime": "2455.700s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2455.700s",
                          "endTime": "2455.900s",
                          "word": "schon"
                        },
                        {
                          "startTime": "2455.900s",
                          "endTime": "2458.100s",
                          "word": "die"
                        },
                        {
                          "startTime": "2458.100s",
                          "endTime": "2459.400s",
                          "word": "WoW"
                        },
                        {
                          "startTime": "2459.400s",
                          "endTime": "2460.700s",
                          "word": "die"
                        },
                        {
                          "startTime": "2460.700s",
                          "endTime": "2461.500s",
                          "word": "Unterhose,"
                        },
                        {
                          "startTime": "2461.500s",
                          "endTime": "2461.700s",
                          "word": "die"
                        },
                        {
                          "startTime": "2461.700s",
                          "endTime": "2462.200s",
                          "word": "behalten"
                        },
                        {
                          "startTime": "2462.200s",
                          "endTime": "2462.200s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2462.200s",
                          "endTime": "2462.300s",
                          "word": "aber"
                        },
                        {
                          "startTime": "2462.300s",
                          "endTime": "2462.600s",
                          "word": "an"
                        },
                        {
                          "startTime": "2462.600s",
                          "endTime": "2462.800s",
                          "word": "oder?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Komm jetzt die Sonne brennt mir auf der Haut.",
                      "confidence": 0.84671104,
                      "words": [
                        {
                          "startTime": "2471s",
                          "endTime": "2471.400s",
                          "word": "Komm"
                        },
                        {
                          "startTime": "2471.400s",
                          "endTime": "2471.600s",
                          "word": "jetzt"
                        },
                        {
                          "startTime": "2471.600s",
                          "endTime": "2472.600s",
                          "word": "die"
                        },
                        {
                          "startTime": "2472.600s",
                          "endTime": "2472.800s",
                          "word": "Sonne"
                        },
                        {
                          "startTime": "2472.800s",
                          "endTime": "2472.900s",
                          "word": "brennt"
                        },
                        {
                          "startTime": "2472.900s",
                          "endTime": "2473.100s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2473.100s",
                          "endTime": "2473.200s",
                          "word": "auf"
                        },
                        {
                          "startTime": "2473.200s",
                          "endTime": "2473.400s",
                          "word": "der"
                        },
                        {
                          "startTime": "2473.400s",
                          "endTime": "2473.500s",
                          "word": "Haut."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Also, dieser dieser Look steht ihnen gut und ich glaube sie sind ja nur der zwei oder drei Monate.",
                      "confidence": 0.79273474,
                      "words": [
                        {
                          "startTime": "2476.700s",
                          "endTime": "2484.200s",
                          "word": "Also,"
                        },
                        {
                          "startTime": "2484.200s",
                          "endTime": "2484.400s",
                          "word": "dieser"
                        },
                        {
                          "startTime": "2484.400s",
                          "endTime": "2485s",
                          "word": "dieser"
                        },
                        {
                          "startTime": "2485s",
                          "endTime": "2485.200s",
                          "word": "Look"
                        },
                        {
                          "startTime": "2485.200s",
                          "endTime": "2485.400s",
                          "word": "steht"
                        },
                        {
                          "startTime": "2485.400s",
                          "endTime": "2485.700s",
                          "word": "ihnen"
                        },
                        {
                          "startTime": "2485.700s",
                          "endTime": "2485.700s",
                          "word": "gut"
                        },
                        {
                          "startTime": "2485.700s",
                          "endTime": "2486s",
                          "word": "und"
                        },
                        {
                          "startTime": "2486s",
                          "endTime": "2487.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2487.200s",
                          "endTime": "2487.600s",
                          "word": "glaube"
                        },
                        {
                          "startTime": "2487.600s",
                          "endTime": "2487.800s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2487.800s",
                          "endTime": "2488s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2488s",
                          "endTime": "2488.200s",
                          "word": "ja"
                        },
                        {
                          "startTime": "2488.200s",
                          "endTime": "2488.300s",
                          "word": "nur"
                        },
                        {
                          "startTime": "2488.300s",
                          "endTime": "2488.500s",
                          "word": "der"
                        },
                        {
                          "startTime": "2488.500s",
                          "endTime": "2488.600s",
                          "word": "zwei"
                        },
                        {
                          "startTime": "2488.600s",
                          "endTime": "2489.400s",
                          "word": "oder"
                        },
                        {
                          "startTime": "2489.400s",
                          "endTime": "2514.700s",
                          "word": "drei"
                        },
                        {
                          "startTime": "2514.700s",
                          "endTime": "2515.400s",
                          "word": "Monate."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Das ist erste Sahne, wir haben hier fast alle die sind 5 bis 8 cm lang, das ist pures Glas.",
                      "confidence": 0.8969824,
                      "words": [
                        {
                          "startTime": "2536.700s",
                          "endTime": "2567s",
                          "word": "Das"
                        },
                        {
                          "startTime": "2567s",
                          "endTime": "2567.200s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2567.200s",
                          "endTime": "2567.600s",
                          "word": "erste"
                        },
                        {
                          "startTime": "2567.600s",
                          "endTime": "2567.600s",
                          "word": "Sahne,"
                        },
                        {
                          "startTime": "2567.600s",
                          "endTime": "2569.900s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2569.900s",
                          "endTime": "2570s",
                          "word": "haben"
                        },
                        {
                          "startTime": "2570s",
                          "endTime": "2570.300s",
                          "word": "hier"
                        },
                        {
                          "startTime": "2570.300s",
                          "endTime": "2571.500s",
                          "word": "fast"
                        },
                        {
                          "startTime": "2571.500s",
                          "endTime": "2571.900s",
                          "word": "alle"
                        },
                        {
                          "startTime": "2571.900s",
                          "endTime": "2572.100s",
                          "word": "die"
                        },
                        {
                          "startTime": "2572.100s",
                          "endTime": "2572.300s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2572.300s",
                          "endTime": "2572.800s",
                          "word": "5"
                        },
                        {
                          "startTime": "2572.800s",
                          "endTime": "2573s",
                          "word": "bis"
                        },
                        {
                          "startTime": "2573s",
                          "endTime": "2573.300s",
                          "word": "8"
                        },
                        {
                          "startTime": "2573.300s",
                          "endTime": "2573.500s",
                          "word": "cm"
                        },
                        {
                          "startTime": "2573.500s",
                          "endTime": "2574.200s",
                          "word": "lang,"
                        },
                        {
                          "startTime": "2574.200s",
                          "endTime": "2575.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "2575.700s",
                          "endTime": "2575.900s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2575.900s",
                          "endTime": "2576.200s",
                          "word": "pures"
                        },
                        {
                          "startTime": "2576.200s",
                          "endTime": "2576.400s",
                          "word": "Glas."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Verdammt, sie sind ein Künstler, dass das ist Kunst müsste aber eigentlich ist es nur einfach durch Chemie, aber danke Jessi freut mich, wenn es annehmbar ist. Verdammt noch mal, sie sind Meisterkoch jeder Schwester Joseph von hier bis Timbuktu wird es probieren wollen, ich muss das antesten. Nein, nicht wir verkaufen ist nur wir nehmen das nicht selbst.",
                      "confidence": 0.8718949,
                      "words": [
                        {
                          "startTime": "2578.600s",
                          "endTime": "2579.200s",
                          "word": "Verdammt,"
                        },
                        {
                          "startTime": "2579.200s",
                          "endTime": "2579.300s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2579.300s",
                          "endTime": "2579.500s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2579.500s",
                          "endTime": "2579.600s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2579.600s",
                          "endTime": "2580s",
                          "word": "Künstler,"
                        },
                        {
                          "startTime": "2580s",
                          "endTime": "2581.700s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2581.700s",
                          "endTime": "2582s",
                          "word": "das"
                        },
                        {
                          "startTime": "2582s",
                          "endTime": "2582.100s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2582.100s",
                          "endTime": "2582.600s",
                          "word": "Kunst"
                        },
                        {
                          "startTime": "2582.600s",
                          "endTime": "2583.200s",
                          "word": "müsste"
                        },
                        {
                          "startTime": "2583.200s",
                          "endTime": "2583.300s",
                          "word": "aber"
                        },
                        {
                          "startTime": "2583.300s",
                          "endTime": "2583.500s",
                          "word": "eigentlich"
                        },
                        {
                          "startTime": "2583.500s",
                          "endTime": "2585.300s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2585.300s",
                          "endTime": "2585.500s",
                          "word": "es"
                        },
                        {
                          "startTime": "2585.500s",
                          "endTime": "2585.600s",
                          "word": "nur"
                        },
                        {
                          "startTime": "2585.600s",
                          "endTime": "2586.100s",
                          "word": "einfach"
                        },
                        {
                          "startTime": "2586.100s",
                          "endTime": "2586.400s",
                          "word": "durch"
                        },
                        {
                          "startTime": "2586.400s",
                          "endTime": "2586.700s",
                          "word": "Chemie,"
                        },
                        {
                          "startTime": "2586.700s",
                          "endTime": "2587s",
                          "word": "aber"
                        },
                        {
                          "startTime": "2587s",
                          "endTime": "2587.300s",
                          "word": "danke"
                        },
                        {
                          "startTime": "2587.300s",
                          "endTime": "2587.700s",
                          "word": "Jessi"
                        },
                        {
                          "startTime": "2587.700s",
                          "endTime": "2587.900s",
                          "word": "freut"
                        },
                        {
                          "startTime": "2587.900s",
                          "endTime": "2588.200s",
                          "word": "mich,"
                        },
                        {
                          "startTime": "2588.200s",
                          "endTime": "2588.400s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2588.400s",
                          "endTime": "2588.400s",
                          "word": "es"
                        },
                        {
                          "startTime": "2588.400s",
                          "endTime": "2589.100s",
                          "word": "annehmbar"
                        },
                        {
                          "startTime": "2589.100s",
                          "endTime": "2589.200s",
                          "word": "ist."
                        },
                        {
                          "startTime": "2589.200s",
                          "endTime": "2591.500s",
                          "word": "Verdammt"
                        },
                        {
                          "startTime": "2591.500s",
                          "endTime": "2591.500s",
                          "word": "noch"
                        },
                        {
                          "startTime": "2591.500s",
                          "endTime": "2591.600s",
                          "word": "mal,"
                        },
                        {
                          "startTime": "2591.600s",
                          "endTime": "2591.800s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2591.800s",
                          "endTime": "2591.900s",
                          "word": "sind"
                        },
                        {
                          "startTime": "2591.900s",
                          "endTime": "2592.600s",
                          "word": "Meisterkoch"
                        },
                        {
                          "startTime": "2592.600s",
                          "endTime": "2593.400s",
                          "word": "jeder"
                        },
                        {
                          "startTime": "2593.400s",
                          "endTime": "2593.700s",
                          "word": "Schwester"
                        },
                        {
                          "startTime": "2593.700s",
                          "endTime": "2594s",
                          "word": "Joseph"
                        },
                        {
                          "startTime": "2594s",
                          "endTime": "2594.200s",
                          "word": "von"
                        },
                        {
                          "startTime": "2594.200s",
                          "endTime": "2594.300s",
                          "word": "hier"
                        },
                        {
                          "startTime": "2594.300s",
                          "endTime": "2594.400s",
                          "word": "bis"
                        },
                        {
                          "startTime": "2594.400s",
                          "endTime": "2594.700s",
                          "word": "Timbuktu"
                        },
                        {
                          "startTime": "2594.700s",
                          "endTime": "2595s",
                          "word": "wird"
                        },
                        {
                          "startTime": "2595s",
                          "endTime": "2595s",
                          "word": "es"
                        },
                        {
                          "startTime": "2595s",
                          "endTime": "2595.500s",
                          "word": "probieren"
                        },
                        {
                          "startTime": "2595.500s",
                          "endTime": "2595.700s",
                          "word": "wollen,"
                        },
                        {
                          "startTime": "2595.700s",
                          "endTime": "2598.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2598.300s",
                          "endTime": "2598.400s",
                          "word": "muss"
                        },
                        {
                          "startTime": "2598.400s",
                          "endTime": "2598.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "2598.700s",
                          "endTime": "2599s",
                          "word": "antesten."
                        },
                        {
                          "startTime": "2599s",
                          "endTime": "2599.700s",
                          "word": "Nein,"
                        },
                        {
                          "startTime": "2599.700s",
                          "endTime": "2603.100s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2603.100s",
                          "endTime": "2603.200s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2603.200s",
                          "endTime": "2603.700s",
                          "word": "verkaufen"
                        },
                        {
                          "startTime": "2603.700s",
                          "endTime": "2603.800s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2603.800s",
                          "endTime": "2604s",
                          "word": "nur"
                        },
                        {
                          "startTime": "2604s",
                          "endTime": "2604.100s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2604.100s",
                          "endTime": "2604.400s",
                          "word": "nehmen"
                        },
                        {
                          "startTime": "2604.400s",
                          "endTime": "2604.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "2604.400s",
                          "endTime": "2604.700s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2604.700s",
                          "endTime": "2605s",
                          "word": "selbst."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " aber seit wann",
                      "confidence": 0.9048369,
                      "words": [
                        {
                          "startTime": "2606.100s",
                          "endTime": "2606.600s",
                          "word": "aber"
                        },
                        {
                          "startTime": "2606.600s",
                          "endTime": "2607.200s",
                          "word": "seit"
                        },
                        {
                          "startTime": "2607.200s",
                          "endTime": "2607.300s",
                          "word": "wann"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Mann ich lasse sie hatten so viel mein Handy weiß gesehen, denn so läuft es nicht.",
                      "confidence": 0.828541,
                      "words": [
                        {
                          "startTime": "2608.800s",
                          "endTime": "2609.200s",
                          "word": "Mann"
                        },
                        {
                          "startTime": "2609.200s",
                          "endTime": "2609.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2609.400s",
                          "endTime": "2609.600s",
                          "word": "lasse"
                        },
                        {
                          "startTime": "2609.600s",
                          "endTime": "2609.700s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2609.700s",
                          "endTime": "2609.900s",
                          "word": "hatten"
                        },
                        {
                          "startTime": "2609.900s",
                          "endTime": "2610s",
                          "word": "so"
                        },
                        {
                          "startTime": "2610s",
                          "endTime": "2610.200s",
                          "word": "viel"
                        },
                        {
                          "startTime": "2610.200s",
                          "endTime": "2610.300s",
                          "word": "mein"
                        },
                        {
                          "startTime": "2610.300s",
                          "endTime": "2610.500s",
                          "word": "Handy"
                        },
                        {
                          "startTime": "2610.500s",
                          "endTime": "2610.700s",
                          "word": "weiß"
                        },
                        {
                          "startTime": "2610.700s",
                          "endTime": "2611s",
                          "word": "gesehen,"
                        },
                        {
                          "startTime": "2611s",
                          "endTime": "2611.700s",
                          "word": "denn"
                        },
                        {
                          "startTime": "2611.700s",
                          "endTime": "2611.900s",
                          "word": "so"
                        },
                        {
                          "startTime": "2611.900s",
                          "endTime": "2612.200s",
                          "word": "läuft"
                        },
                        {
                          "startTime": "2612.200s",
                          "endTime": "2612.200s",
                          "word": "es"
                        },
                        {
                          "startTime": "2612.200s",
                          "endTime": "2612.400s",
                          "word": "nicht."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Und was jetzt?",
                      "confidence": 0.88756526,
                      "words": [
                        {
                          "startTime": "2613.200s",
                          "endTime": "2617.100s",
                          "word": "Und"
                        },
                        {
                          "startTime": "2617.100s",
                          "endTime": "2618.400s",
                          "word": "was"
                        },
                        {
                          "startTime": "2618.400s",
                          "endTime": "2618.500s",
                          "word": "jetzt?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wie machen wir weiter?",
                      "confidence": 0.9136394,
                      "words": [
                        {
                          "startTime": "2619.900s",
                          "endTime": "2621.500s",
                          "word": "Wie"
                        },
                        {
                          "startTime": "2621.500s",
                          "endTime": "2621.700s",
                          "word": "machen"
                        },
                        {
                          "startTime": "2621.700s",
                          "endTime": "2621.900s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2621.900s",
                          "endTime": "2622.200s",
                          "word": "weiter?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Morgen kochen wir mehr davon.",
                      "confidence": 0.88912064,
                      "words": [
                        {
                          "startTime": "2625.300s",
                          "endTime": "2627.100s",
                          "word": "Morgen"
                        },
                        {
                          "startTime": "2627.100s",
                          "endTime": "2627.400s",
                          "word": "kochen"
                        },
                        {
                          "startTime": "2627.400s",
                          "endTime": "2627.600s",
                          "word": "wir"
                        },
                        {
                          "startTime": "2627.600s",
                          "endTime": "2627.700s",
                          "word": "mehr"
                        },
                        {
                          "startTime": "2627.700s",
                          "endTime": "2627.900s",
                          "word": "davon."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Und ich weiß genau.",
                      "confidence": 0.91308355,
                      "words": [
                        {
                          "startTime": "2629s",
                          "endTime": "2630.200s",
                          "word": "Und"
                        },
                        {
                          "startTime": "2630.200s",
                          "endTime": "2630.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2630.300s",
                          "endTime": "2630.400s",
                          "word": "weiß"
                        },
                        {
                          "startTime": "2630.400s",
                          "endTime": "2630.600s",
                          "word": "genau."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Mit dem ich bis dahin reden muss, ja, der ist was geht alles klar, ich hatte auch mal so einen Hunger etwa zweimal so groß super reinrassig, also, wenn du mich fragst wird diendorf trainieren, dass er direkt an den Sack geht, zeig mir die Kohle, ich kaufe nicht mal ich verkaufe sag mir dass das nicht das geilste Crystal ist, dass du jemals gesehen hast nur zu bedienen.",
                      "confidence": 0.8957598,
                      "words": [
                        {
                          "startTime": "2632.500s",
                          "endTime": "2632.900s",
                          "word": "Mit"
                        },
                        {
                          "startTime": "2632.900s",
                          "endTime": "2632.900s",
                          "word": "dem"
                        },
                        {
                          "startTime": "2632.900s",
                          "endTime": "2633.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2633.200s",
                          "endTime": "2633.300s",
                          "word": "bis"
                        },
                        {
                          "startTime": "2633.300s",
                          "endTime": "2633.400s",
                          "word": "dahin"
                        },
                        {
                          "startTime": "2633.400s",
                          "endTime": "2633.800s",
                          "word": "reden"
                        },
                        {
                          "startTime": "2633.800s",
                          "endTime": "2634s",
                          "word": "muss,"
                        },
                        {
                          "startTime": "2634s",
                          "endTime": "2644.700s",
                          "word": "ja,"
                        },
                        {
                          "startTime": "2644.700s",
                          "endTime": "2646s",
                          "word": "der"
                        },
                        {
                          "startTime": "2646s",
                          "endTime": "2646.300s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2646.300s",
                          "endTime": "2646.400s",
                          "word": "was"
                        },
                        {
                          "startTime": "2646.400s",
                          "endTime": "2646.600s",
                          "word": "geht"
                        },
                        {
                          "startTime": "2646.600s",
                          "endTime": "2652s",
                          "word": "alles"
                        },
                        {
                          "startTime": "2652s",
                          "endTime": "2652.100s",
                          "word": "klar,"
                        },
                        {
                          "startTime": "2652.100s",
                          "endTime": "2658.200s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2658.200s",
                          "endTime": "2658.400s",
                          "word": "hatte"
                        },
                        {
                          "startTime": "2658.400s",
                          "endTime": "2658.600s",
                          "word": "auch"
                        },
                        {
                          "startTime": "2658.600s",
                          "endTime": "2658.800s",
                          "word": "mal"
                        },
                        {
                          "startTime": "2658.800s",
                          "endTime": "2658.900s",
                          "word": "so"
                        },
                        {
                          "startTime": "2658.900s",
                          "endTime": "2659.100s",
                          "word": "einen"
                        },
                        {
                          "startTime": "2659.100s",
                          "endTime": "2659.300s",
                          "word": "Hunger"
                        },
                        {
                          "startTime": "2659.300s",
                          "endTime": "2659.700s",
                          "word": "etwa"
                        },
                        {
                          "startTime": "2659.700s",
                          "endTime": "2660.100s",
                          "word": "zweimal"
                        },
                        {
                          "startTime": "2660.100s",
                          "endTime": "2660.300s",
                          "word": "so"
                        },
                        {
                          "startTime": "2660.300s",
                          "endTime": "2660.600s",
                          "word": "groß"
                        },
                        {
                          "startTime": "2660.600s",
                          "endTime": "2661.600s",
                          "word": "super"
                        },
                        {
                          "startTime": "2661.600s",
                          "endTime": "2662.200s",
                          "word": "reinrassig,"
                        },
                        {
                          "startTime": "2662.200s",
                          "endTime": "2663.500s",
                          "word": "also,"
                        },
                        {
                          "startTime": "2663.500s",
                          "endTime": "2663.700s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2663.700s",
                          "endTime": "2663.800s",
                          "word": "du"
                        },
                        {
                          "startTime": "2663.800s",
                          "endTime": "2663.900s",
                          "word": "mich"
                        },
                        {
                          "startTime": "2663.900s",
                          "endTime": "2664s",
                          "word": "fragst"
                        },
                        {
                          "startTime": "2664s",
                          "endTime": "2664.600s",
                          "word": "wird"
                        },
                        {
                          "startTime": "2664.600s",
                          "endTime": "2664.800s",
                          "word": "diendorf"
                        },
                        {
                          "startTime": "2664.800s",
                          "endTime": "2665.200s",
                          "word": "trainieren,"
                        },
                        {
                          "startTime": "2665.200s",
                          "endTime": "2665.300s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2665.300s",
                          "endTime": "2665.400s",
                          "word": "er"
                        },
                        {
                          "startTime": "2665.400s",
                          "endTime": "2665.700s",
                          "word": "direkt"
                        },
                        {
                          "startTime": "2665.700s",
                          "endTime": "2665.900s",
                          "word": "an"
                        },
                        {
                          "startTime": "2665.900s",
                          "endTime": "2666.100s",
                          "word": "den"
                        },
                        {
                          "startTime": "2666.100s",
                          "endTime": "2666.400s",
                          "word": "Sack"
                        },
                        {
                          "startTime": "2666.400s",
                          "endTime": "2666.600s",
                          "word": "geht,"
                        },
                        {
                          "startTime": "2666.600s",
                          "endTime": "2667.600s",
                          "word": "zeig"
                        },
                        {
                          "startTime": "2667.600s",
                          "endTime": "2667.700s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2667.700s",
                          "endTime": "2667.800s",
                          "word": "die"
                        },
                        {
                          "startTime": "2667.800s",
                          "endTime": "2668.100s",
                          "word": "Kohle,"
                        },
                        {
                          "startTime": "2668.100s",
                          "endTime": "2669.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2669.100s",
                          "endTime": "2669.400s",
                          "word": "kaufe"
                        },
                        {
                          "startTime": "2669.400s",
                          "endTime": "2669.700s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2669.700s",
                          "endTime": "2669.900s",
                          "word": "mal"
                        },
                        {
                          "startTime": "2669.900s",
                          "endTime": "2671.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2671.500s",
                          "endTime": "2672.100s",
                          "word": "verkaufe"
                        },
                        {
                          "startTime": "2672.100s",
                          "endTime": "2682.500s",
                          "word": "sag"
                        },
                        {
                          "startTime": "2682.500s",
                          "endTime": "2682.700s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2682.700s",
                          "endTime": "2682.800s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2682.800s",
                          "endTime": "2682.900s",
                          "word": "das"
                        },
                        {
                          "startTime": "2682.900s",
                          "endTime": "2683.200s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2683.200s",
                          "endTime": "2683.200s",
                          "word": "das"
                        },
                        {
                          "startTime": "2683.200s",
                          "endTime": "2683.500s",
                          "word": "geilste"
                        },
                        {
                          "startTime": "2683.500s",
                          "endTime": "2684.200s",
                          "word": "Crystal"
                        },
                        {
                          "startTime": "2684.200s",
                          "endTime": "2684.300s",
                          "word": "ist,"
                        },
                        {
                          "startTime": "2684.300s",
                          "endTime": "2684.500s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2684.500s",
                          "endTime": "2684.600s",
                          "word": "du"
                        },
                        {
                          "startTime": "2684.600s",
                          "endTime": "2684.900s",
                          "word": "jemals"
                        },
                        {
                          "startTime": "2684.900s",
                          "endTime": "2685.200s",
                          "word": "gesehen"
                        },
                        {
                          "startTime": "2685.200s",
                          "endTime": "2685.500s",
                          "word": "hast"
                        },
                        {
                          "startTime": "2685.500s",
                          "endTime": "2687.100s",
                          "word": "nur"
                        },
                        {
                          "startTime": "2687.100s",
                          "endTime": "2687.200s",
                          "word": "zu"
                        },
                        {
                          "startTime": "2687.200s",
                          "endTime": "2687.800s",
                          "word": "bedienen."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Was habe ich gesagt? Ist okay, okay, okay okay, bist du wieder im Geschäft und darf ich das bin und zwar gewaltig so locker muss Kohle verdienen jetzt wo dein Cousin weggesperrt das sonst so übrigens homee, was das betrifft hat mich echt mitgenommen, das mit dem Ilias wie ein Bruder für mich ist. Ja okay, hast du von ihm gehört, ich habe mit ihm geredet. Er sagte als die Bullen kam, hast du gerade bei der Nachbarin Rohr verlegt, weißt du, ich hatte doppelt gelöscht, ich weiß nicht man Emilio.",
                      "confidence": 0.89306265,
                      "words": [
                        {
                          "startTime": "2692.400s",
                          "endTime": "2697.600s",
                          "word": "Was"
                        },
                        {
                          "startTime": "2697.600s",
                          "endTime": "2697.700s",
                          "word": "habe"
                        },
                        {
                          "startTime": "2697.700s",
                          "endTime": "2697.700s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2697.700s",
                          "endTime": "2698s",
                          "word": "gesagt?"
                        },
                        {
                          "startTime": "2698s",
                          "endTime": "2699.200s",
                          "word": "Ist"
                        },
                        {
                          "startTime": "2699.200s",
                          "endTime": "2699.400s",
                          "word": "okay,"
                        },
                        {
                          "startTime": "2699.400s",
                          "endTime": "2700.500s",
                          "word": "okay,"
                        },
                        {
                          "startTime": "2700.500s",
                          "endTime": "2701.500s",
                          "word": "okay"
                        },
                        {
                          "startTime": "2701.500s",
                          "endTime": "2701.700s",
                          "word": "okay,"
                        },
                        {
                          "startTime": "2701.700s",
                          "endTime": "2703.700s",
                          "word": "bist"
                        },
                        {
                          "startTime": "2703.700s",
                          "endTime": "2703.700s",
                          "word": "du"
                        },
                        {
                          "startTime": "2703.700s",
                          "endTime": "2703.900s",
                          "word": "wieder"
                        },
                        {
                          "startTime": "2703.900s",
                          "endTime": "2704s",
                          "word": "im"
                        },
                        {
                          "startTime": "2704s",
                          "endTime": "2704.200s",
                          "word": "Geschäft"
                        },
                        {
                          "startTime": "2704.200s",
                          "endTime": "2704.900s",
                          "word": "und"
                        },
                        {
                          "startTime": "2704.900s",
                          "endTime": "2705.100s",
                          "word": "darf"
                        },
                        {
                          "startTime": "2705.100s",
                          "endTime": "2705.100s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2705.100s",
                          "endTime": "2705.300s",
                          "word": "das"
                        },
                        {
                          "startTime": "2705.300s",
                          "endTime": "2705.500s",
                          "word": "bin"
                        },
                        {
                          "startTime": "2705.500s",
                          "endTime": "2705.600s",
                          "word": "und"
                        },
                        {
                          "startTime": "2705.600s",
                          "endTime": "2706.700s",
                          "word": "zwar"
                        },
                        {
                          "startTime": "2706.700s",
                          "endTime": "2707.200s",
                          "word": "gewaltig"
                        },
                        {
                          "startTime": "2707.200s",
                          "endTime": "2708.200s",
                          "word": "so"
                        },
                        {
                          "startTime": "2708.200s",
                          "endTime": "2708.500s",
                          "word": "locker"
                        },
                        {
                          "startTime": "2708.500s",
                          "endTime": "2708.800s",
                          "word": "muss"
                        },
                        {
                          "startTime": "2708.800s",
                          "endTime": "2709.100s",
                          "word": "Kohle"
                        },
                        {
                          "startTime": "2709.100s",
                          "endTime": "2709.600s",
                          "word": "verdienen"
                        },
                        {
                          "startTime": "2709.600s",
                          "endTime": "2710.300s",
                          "word": "jetzt"
                        },
                        {
                          "startTime": "2710.300s",
                          "endTime": "2710.500s",
                          "word": "wo"
                        },
                        {
                          "startTime": "2710.500s",
                          "endTime": "2710.600s",
                          "word": "dein"
                        },
                        {
                          "startTime": "2710.600s",
                          "endTime": "2710.900s",
                          "word": "Cousin"
                        },
                        {
                          "startTime": "2710.900s",
                          "endTime": "2711.400s",
                          "word": "weggesperrt"
                        },
                        {
                          "startTime": "2711.400s",
                          "endTime": "2711.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "2711.700s",
                          "endTime": "2712s",
                          "word": "sonst"
                        },
                        {
                          "startTime": "2712s",
                          "endTime": "2712s",
                          "word": "so"
                        },
                        {
                          "startTime": "2712s",
                          "endTime": "2714.100s",
                          "word": "übrigens"
                        },
                        {
                          "startTime": "2714.100s",
                          "endTime": "2714.500s",
                          "word": "homee,"
                        },
                        {
                          "startTime": "2714.500s",
                          "endTime": "2715.600s",
                          "word": "was"
                        },
                        {
                          "startTime": "2715.600s",
                          "endTime": "2715.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "2715.800s",
                          "endTime": "2716s",
                          "word": "betrifft"
                        },
                        {
                          "startTime": "2716s",
                          "endTime": "2718.100s",
                          "word": "hat"
                        },
                        {
                          "startTime": "2718.100s",
                          "endTime": "2718.200s",
                          "word": "mich"
                        },
                        {
                          "startTime": "2718.200s",
                          "endTime": "2718.300s",
                          "word": "echt"
                        },
                        {
                          "startTime": "2718.300s",
                          "endTime": "2718.700s",
                          "word": "mitgenommen,"
                        },
                        {
                          "startTime": "2718.700s",
                          "endTime": "2719s",
                          "word": "das"
                        },
                        {
                          "startTime": "2719s",
                          "endTime": "2719.100s",
                          "word": "mit"
                        },
                        {
                          "startTime": "2719.100s",
                          "endTime": "2719.200s",
                          "word": "dem"
                        },
                        {
                          "startTime": "2719.200s",
                          "endTime": "2719.600s",
                          "word": "Ilias"
                        },
                        {
                          "startTime": "2719.600s",
                          "endTime": "2721.500s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2721.500s",
                          "endTime": "2721.600s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2721.600s",
                          "endTime": "2721.700s",
                          "word": "Bruder"
                        },
                        {
                          "startTime": "2721.700s",
                          "endTime": "2721.900s",
                          "word": "für"
                        },
                        {
                          "startTime": "2721.900s",
                          "endTime": "2722.100s",
                          "word": "mich"
                        },
                        {
                          "startTime": "2722.100s",
                          "endTime": "2723.700s",
                          "word": "ist."
                        },
                        {
                          "startTime": "2723.700s",
                          "endTime": "2723.800s",
                          "word": "Ja"
                        },
                        {
                          "startTime": "2723.800s",
                          "endTime": "2724.100s",
                          "word": "okay,"
                        },
                        {
                          "startTime": "2724.100s",
                          "endTime": "2724.200s",
                          "word": "hast"
                        },
                        {
                          "startTime": "2724.200s",
                          "endTime": "2724.300s",
                          "word": "du"
                        },
                        {
                          "startTime": "2724.300s",
                          "endTime": "2724.400s",
                          "word": "von"
                        },
                        {
                          "startTime": "2724.400s",
                          "endTime": "2724.500s",
                          "word": "ihm"
                        },
                        {
                          "startTime": "2724.500s",
                          "endTime": "2724.700s",
                          "word": "gehört,"
                        },
                        {
                          "startTime": "2724.700s",
                          "endTime": "2725.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2725.300s",
                          "endTime": "2725.400s",
                          "word": "habe"
                        },
                        {
                          "startTime": "2725.400s",
                          "endTime": "2725.600s",
                          "word": "mit"
                        },
                        {
                          "startTime": "2725.600s",
                          "endTime": "2725.700s",
                          "word": "ihm"
                        },
                        {
                          "startTime": "2725.700s",
                          "endTime": "2725.900s",
                          "word": "geredet."
                        },
                        {
                          "startTime": "2725.900s",
                          "endTime": "2726.200s",
                          "word": "Er"
                        },
                        {
                          "startTime": "2726.200s",
                          "endTime": "2726.900s",
                          "word": "sagte"
                        },
                        {
                          "startTime": "2726.900s",
                          "endTime": "2727.100s",
                          "word": "als"
                        },
                        {
                          "startTime": "2727.100s",
                          "endTime": "2727.200s",
                          "word": "die"
                        },
                        {
                          "startTime": "2727.200s",
                          "endTime": "2727.300s",
                          "word": "Bullen"
                        },
                        {
                          "startTime": "2727.300s",
                          "endTime": "2727.700s",
                          "word": "kam,"
                        },
                        {
                          "startTime": "2727.700s",
                          "endTime": "2727.800s",
                          "word": "hast"
                        },
                        {
                          "startTime": "2727.800s",
                          "endTime": "2727.900s",
                          "word": "du"
                        },
                        {
                          "startTime": "2727.900s",
                          "endTime": "2728s",
                          "word": "gerade"
                        },
                        {
                          "startTime": "2728s",
                          "endTime": "2728.400s",
                          "word": "bei"
                        },
                        {
                          "startTime": "2728.400s",
                          "endTime": "2728.600s",
                          "word": "der"
                        },
                        {
                          "startTime": "2728.600s",
                          "endTime": "2728.900s",
                          "word": "Nachbarin"
                        },
                        {
                          "startTime": "2728.900s",
                          "endTime": "2729.200s",
                          "word": "Rohr"
                        },
                        {
                          "startTime": "2729.200s",
                          "endTime": "2729.500s",
                          "word": "verlegt,"
                        },
                        {
                          "startTime": "2729.500s",
                          "endTime": "2731.500s",
                          "word": "weißt"
                        },
                        {
                          "startTime": "2731.500s",
                          "endTime": "2731.600s",
                          "word": "du,"
                        },
                        {
                          "startTime": "2731.600s",
                          "endTime": "2732.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2732.300s",
                          "endTime": "2732.400s",
                          "word": "hatte"
                        },
                        {
                          "startTime": "2732.400s",
                          "endTime": "2732.900s",
                          "word": "doppelt"
                        },
                        {
                          "startTime": "2732.900s",
                          "endTime": "2733.200s",
                          "word": "gelöscht,"
                        },
                        {
                          "startTime": "2733.200s",
                          "endTime": "2733.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2733.500s",
                          "endTime": "2733.600s",
                          "word": "weiß"
                        },
                        {
                          "startTime": "2733.600s",
                          "endTime": "2733.900s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2733.900s",
                          "endTime": "2734.100s",
                          "word": "man"
                        },
                        {
                          "startTime": "2734.100s",
                          "endTime": "2735.900s",
                          "word": "Emilio."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " glaub du hast dich vielleicht verpassen, dass das ja völliger Blödsinn",
                      "confidence": 0.84397787,
                      "words": [
                        {
                          "startTime": "2737.300s",
                          "endTime": "2739.500s",
                          "word": "glaub"
                        },
                        {
                          "startTime": "2739.500s",
                          "endTime": "2739.600s",
                          "word": "du"
                        },
                        {
                          "startTime": "2739.600s",
                          "endTime": "2739.800s",
                          "word": "hast"
                        },
                        {
                          "startTime": "2739.800s",
                          "endTime": "2739.900s",
                          "word": "dich"
                        },
                        {
                          "startTime": "2739.900s",
                          "endTime": "2740s",
                          "word": "vielleicht"
                        },
                        {
                          "startTime": "2740s",
                          "endTime": "2740.600s",
                          "word": "verpassen,"
                        },
                        {
                          "startTime": "2740.600s",
                          "endTime": "2742.500s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2742.500s",
                          "endTime": "2742.700s",
                          "word": "das"
                        },
                        {
                          "startTime": "2742.700s",
                          "endTime": "2743.100s",
                          "word": "ja"
                        },
                        {
                          "startTime": "2743.100s",
                          "endTime": "2743.600s",
                          "word": "völliger"
                        },
                        {
                          "startTime": "2743.600s",
                          "endTime": "2743.900s",
                          "word": "Blödsinn"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Das ist Blödsinn. Crazy eight allein für den Gedanken sollte ich in den Arsch aufreißen, wenn du das nächste Mal mit dem mir hier redest, dann richte ihm das von mir aus ja.",
                      "confidence": 0.88217014,
                      "words": [
                        {
                          "startTime": "2745.800s",
                          "endTime": "2746.200s",
                          "word": "Das"
                        },
                        {
                          "startTime": "2746.200s",
                          "endTime": "2746.400s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2746.400s",
                          "endTime": "2746.900s",
                          "word": "Blödsinn."
                        },
                        {
                          "startTime": "2746.900s",
                          "endTime": "2747.300s",
                          "word": "Crazy"
                        },
                        {
                          "startTime": "2747.300s",
                          "endTime": "2747.700s",
                          "word": "eight"
                        },
                        {
                          "startTime": "2747.700s",
                          "endTime": "2748.500s",
                          "word": "allein"
                        },
                        {
                          "startTime": "2748.500s",
                          "endTime": "2748.700s",
                          "word": "für"
                        },
                        {
                          "startTime": "2748.700s",
                          "endTime": "2748.800s",
                          "word": "den"
                        },
                        {
                          "startTime": "2748.800s",
                          "endTime": "2749.300s",
                          "word": "Gedanken"
                        },
                        {
                          "startTime": "2749.300s",
                          "endTime": "2749.600s",
                          "word": "sollte"
                        },
                        {
                          "startTime": "2749.600s",
                          "endTime": "2749.600s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2749.600s",
                          "endTime": "2749.800s",
                          "word": "in"
                        },
                        {
                          "startTime": "2749.800s",
                          "endTime": "2749.900s",
                          "word": "den"
                        },
                        {
                          "startTime": "2749.900s",
                          "endTime": "2750.100s",
                          "word": "Arsch"
                        },
                        {
                          "startTime": "2750.100s",
                          "endTime": "2750.800s",
                          "word": "aufreißen,"
                        },
                        {
                          "startTime": "2750.800s",
                          "endTime": "2751.600s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2751.600s",
                          "endTime": "2751.700s",
                          "word": "du"
                        },
                        {
                          "startTime": "2751.700s",
                          "endTime": "2751.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "2751.800s",
                          "endTime": "2752s",
                          "word": "nächste"
                        },
                        {
                          "startTime": "2752s",
                          "endTime": "2752.300s",
                          "word": "Mal"
                        },
                        {
                          "startTime": "2752.300s",
                          "endTime": "2752.400s",
                          "word": "mit"
                        },
                        {
                          "startTime": "2752.400s",
                          "endTime": "2752.500s",
                          "word": "dem"
                        },
                        {
                          "startTime": "2752.500s",
                          "endTime": "2752.700s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2752.700s",
                          "endTime": "2752.800s",
                          "word": "hier"
                        },
                        {
                          "startTime": "2752.800s",
                          "endTime": "2753.200s",
                          "word": "redest,"
                        },
                        {
                          "startTime": "2753.200s",
                          "endTime": "2754.300s",
                          "word": "dann"
                        },
                        {
                          "startTime": "2754.300s",
                          "endTime": "2754.600s",
                          "word": "richte"
                        },
                        {
                          "startTime": "2754.600s",
                          "endTime": "2754.700s",
                          "word": "ihm"
                        },
                        {
                          "startTime": "2754.700s",
                          "endTime": "2754.800s",
                          "word": "das"
                        },
                        {
                          "startTime": "2754.800s",
                          "endTime": "2755s",
                          "word": "von"
                        },
                        {
                          "startTime": "2755s",
                          "endTime": "2755.200s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2755.200s",
                          "endTime": "2755.200s",
                          "word": "aus"
                        },
                        {
                          "startTime": "2755.200s",
                          "endTime": "2755.600s",
                          "word": "ja."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Am besten sagst du es ihm selber, ich habe heute früh wegen Kaution gestellt mir den Arsch, also hast du das her.",
                      "confidence": 0.9044972,
                      "words": [
                        {
                          "startTime": "2759.700s",
                          "endTime": "2760.100s",
                          "word": "Am"
                        },
                        {
                          "startTime": "2760.100s",
                          "endTime": "2760.400s",
                          "word": "besten"
                        },
                        {
                          "startTime": "2760.400s",
                          "endTime": "2760.600s",
                          "word": "sagst"
                        },
                        {
                          "startTime": "2760.600s",
                          "endTime": "2760.700s",
                          "word": "du"
                        },
                        {
                          "startTime": "2760.700s",
                          "endTime": "2760.800s",
                          "word": "es"
                        },
                        {
                          "startTime": "2760.800s",
                          "endTime": "2760.900s",
                          "word": "ihm"
                        },
                        {
                          "startTime": "2760.900s",
                          "endTime": "2761.200s",
                          "word": "selber,"
                        },
                        {
                          "startTime": "2761.200s",
                          "endTime": "2761.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2761.900s",
                          "endTime": "2762s",
                          "word": "habe"
                        },
                        {
                          "startTime": "2762s",
                          "endTime": "2762.200s",
                          "word": "heute"
                        },
                        {
                          "startTime": "2762.200s",
                          "endTime": "2762.300s",
                          "word": "früh"
                        },
                        {
                          "startTime": "2762.300s",
                          "endTime": "2762.500s",
                          "word": "wegen"
                        },
                        {
                          "startTime": "2762.500s",
                          "endTime": "2762.900s",
                          "word": "Kaution"
                        },
                        {
                          "startTime": "2762.900s",
                          "endTime": "2763.300s",
                          "word": "gestellt"
                        },
                        {
                          "startTime": "2763.300s",
                          "endTime": "2765.500s",
                          "word": "mir"
                        },
                        {
                          "startTime": "2765.500s",
                          "endTime": "2765.700s",
                          "word": "den"
                        },
                        {
                          "startTime": "2765.700s",
                          "endTime": "2765.900s",
                          "word": "Arsch,"
                        },
                        {
                          "startTime": "2765.900s",
                          "endTime": "2766.700s",
                          "word": "also"
                        },
                        {
                          "startTime": "2766.700s",
                          "endTime": "2771.300s",
                          "word": "hast"
                        },
                        {
                          "startTime": "2771.300s",
                          "endTime": "2771.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "2771.400s",
                          "endTime": "2771.500s",
                          "word": "das"
                        },
                        {
                          "startTime": "2771.500s",
                          "endTime": "2771.600s",
                          "word": "her."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ich weiß, dass du blödkopf das nicht gekocht hast.",
                      "confidence": 0.897658,
                      "words": [
                        {
                          "startTime": "2772.700s",
                          "endTime": "2775s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "2775s",
                          "endTime": "2775.200s",
                          "word": "weiß,"
                        },
                        {
                          "startTime": "2775.200s",
                          "endTime": "2775.300s",
                          "word": "dass"
                        },
                        {
                          "startTime": "2775.300s",
                          "endTime": "2775.500s",
                          "word": "du"
                        },
                        {
                          "startTime": "2775.500s",
                          "endTime": "2775.800s",
                          "word": "blödkopf"
                        },
                        {
                          "startTime": "2775.800s",
                          "endTime": "2776.200s",
                          "word": "das"
                        },
                        {
                          "startTime": "2776.200s",
                          "endTime": "2776.400s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "2776.400s",
                          "endTime": "2776.700s",
                          "word": "gekocht"
                        },
                        {
                          "startTime": "2776.700s",
                          "endTime": "2776.800s",
                          "word": "hast."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Hey Mann, bist du in Nudist oder was ist ein geiles Zeug, was du da gekauft hast, wie wäre es wenn du für mich arbeitest?",
                      "confidence": 0.85998696,
                      "words": [
                        {
                          "startTime": "2805.300s",
                          "endTime": "2807.300s",
                          "word": "Hey"
                        },
                        {
                          "startTime": "2807.300s",
                          "endTime": "2807.500s",
                          "word": "Mann,"
                        },
                        {
                          "startTime": "2807.500s",
                          "endTime": "2808.800s",
                          "word": "bist"
                        },
                        {
                          "startTime": "2808.800s",
                          "endTime": "2808.900s",
                          "word": "du"
                        },
                        {
                          "startTime": "2808.900s",
                          "endTime": "2809s",
                          "word": "in"
                        },
                        {
                          "startTime": "2809s",
                          "endTime": "2809.100s",
                          "word": "Nudist"
                        },
                        {
                          "startTime": "2809.100s",
                          "endTime": "2809.600s",
                          "word": "oder"
                        },
                        {
                          "startTime": "2809.600s",
                          "endTime": "2809.900s",
                          "word": "was"
                        },
                        {
                          "startTime": "2809.900s",
                          "endTime": "2813s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2813s",
                          "endTime": "2813.100s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2813.100s",
                          "endTime": "2813.400s",
                          "word": "geiles"
                        },
                        {
                          "startTime": "2813.400s",
                          "endTime": "2813.500s",
                          "word": "Zeug,"
                        },
                        {
                          "startTime": "2813.500s",
                          "endTime": "2813.900s",
                          "word": "was"
                        },
                        {
                          "startTime": "2813.900s",
                          "endTime": "2814s",
                          "word": "du"
                        },
                        {
                          "startTime": "2814s",
                          "endTime": "2814.100s",
                          "word": "da"
                        },
                        {
                          "startTime": "2814.100s",
                          "endTime": "2814.300s",
                          "word": "gekauft"
                        },
                        {
                          "startTime": "2814.300s",
                          "endTime": "2814.600s",
                          "word": "hast,"
                        },
                        {
                          "startTime": "2814.600s",
                          "endTime": "2815.900s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2815.900s",
                          "endTime": "2816.200s",
                          "word": "wäre"
                        },
                        {
                          "startTime": "2816.200s",
                          "endTime": "2816.200s",
                          "word": "es"
                        },
                        {
                          "startTime": "2816.200s",
                          "endTime": "2816.300s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "2816.300s",
                          "endTime": "2816.500s",
                          "word": "du"
                        },
                        {
                          "startTime": "2816.500s",
                          "endTime": "2816.700s",
                          "word": "für"
                        },
                        {
                          "startTime": "2816.700s",
                          "endTime": "2816.800s",
                          "word": "mich"
                        },
                        {
                          "startTime": "2816.800s",
                          "endTime": "2817.100s",
                          "word": "arbeitest?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ich bin bereit es dir zu verkaufen.",
                      "confidence": 0.86699754,
                      "words": [
                        {
                          "startTime": "2819.600s",
                          "endTime": "2820s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "2820s",
                          "endTime": "2820.100s",
                          "word": "bin"
                        },
                        {
                          "startTime": "2820.100s",
                          "endTime": "2820.400s",
                          "word": "bereit"
                        },
                        {
                          "startTime": "2820.400s",
                          "endTime": "2820.600s",
                          "word": "es"
                        },
                        {
                          "startTime": "2820.600s",
                          "endTime": "2820.700s",
                          "word": "dir"
                        },
                        {
                          "startTime": "2820.700s",
                          "endTime": "2820.900s",
                          "word": "zu"
                        },
                        {
                          "startTime": "2820.900s",
                          "endTime": "2821.500s",
                          "word": "verkaufen."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wenn der Preis stimmt.",
                      "confidence": 0.91906416,
                      "words": [
                        {
                          "startTime": "2822.800s",
                          "endTime": "2823.300s",
                          "word": "Wenn"
                        },
                        {
                          "startTime": "2823.300s",
                          "endTime": "2823.400s",
                          "word": "der"
                        },
                        {
                          "startTime": "2823.400s",
                          "endTime": "2823.500s",
                          "word": "Preis"
                        },
                        {
                          "startTime": "2823.500s",
                          "endTime": "2823.700s",
                          "word": "stimmt."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Du bist hier draußen ganz alleine.",
                      "confidence": 0.86720085,
                      "words": [
                        {
                          "startTime": "2833.700s",
                          "endTime": "2835.600s",
                          "word": "Du"
                        },
                        {
                          "startTime": "2835.600s",
                          "endTime": "2835.800s",
                          "word": "bist"
                        },
                        {
                          "startTime": "2835.800s",
                          "endTime": "2835.900s",
                          "word": "hier"
                        },
                        {
                          "startTime": "2835.900s",
                          "endTime": "2836.200s",
                          "word": "draußen"
                        },
                        {
                          "startTime": "2836.200s",
                          "endTime": "2836.300s",
                          "word": "ganz"
                        },
                        {
                          "startTime": "2836.300s",
                          "endTime": "2836.800s",
                          "word": "alleine."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Hey ich kenn dich, er war da ziemlich geschnappt haben, der von der DJ nein du abgedeckt Spitze Sinus",
                      "confidence": 0.83513784,
                      "words": [
                        {
                          "startTime": "2841.400s",
                          "endTime": "2845.200s",
                          "word": "Hey"
                        },
                        {
                          "startTime": "2845.200s",
                          "endTime": "2845.400s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2845.400s",
                          "endTime": "2846.900s",
                          "word": "kenn"
                        },
                        {
                          "startTime": "2846.900s",
                          "endTime": "2847s",
                          "word": "dich,"
                        },
                        {
                          "startTime": "2847s",
                          "endTime": "2847.900s",
                          "word": "er"
                        },
                        {
                          "startTime": "2847.900s",
                          "endTime": "2848.100s",
                          "word": "war"
                        },
                        {
                          "startTime": "2848.100s",
                          "endTime": "2848.200s",
                          "word": "da"
                        },
                        {
                          "startTime": "2848.200s",
                          "endTime": "2848.500s",
                          "word": "ziemlich"
                        },
                        {
                          "startTime": "2848.500s",
                          "endTime": "2848.800s",
                          "word": "geschnappt"
                        },
                        {
                          "startTime": "2848.800s",
                          "endTime": "2849.100s",
                          "word": "haben,"
                        },
                        {
                          "startTime": "2849.100s",
                          "endTime": "2849.500s",
                          "word": "der"
                        },
                        {
                          "startTime": "2849.500s",
                          "endTime": "2849.700s",
                          "word": "von"
                        },
                        {
                          "startTime": "2849.700s",
                          "endTime": "2849.900s",
                          "word": "der"
                        },
                        {
                          "startTime": "2849.900s",
                          "endTime": "2850.400s",
                          "word": "DJ"
                        },
                        {
                          "startTime": "2850.400s",
                          "endTime": "2851.200s",
                          "word": "nein"
                        },
                        {
                          "startTime": "2851.200s",
                          "endTime": "2852.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "2852.400s",
                          "endTime": "2852.800s",
                          "word": "abgedeckt"
                        },
                        {
                          "startTime": "2852.800s",
                          "endTime": "2853.400s",
                          "word": "Spitze"
                        },
                        {
                          "startTime": "2853.400s",
                          "endTime": "2855.700s",
                          "word": "Sinus"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Am besten belegen sie beide um.",
                      "confidence": 0.8214683,
                      "words": [
                        {
                          "startTime": "2865.500s",
                          "endTime": "2866.800s",
                          "word": "Am"
                        },
                        {
                          "startTime": "2866.800s",
                          "endTime": "2867.200s",
                          "word": "besten"
                        },
                        {
                          "startTime": "2867.200s",
                          "endTime": "2867.400s",
                          "word": "belegen"
                        },
                        {
                          "startTime": "2867.400s",
                          "endTime": "2867.500s",
                          "word": "sie"
                        },
                        {
                          "startTime": "2867.500s",
                          "endTime": "2867.800s",
                          "word": "beide"
                        },
                        {
                          "startTime": "2867.800s",
                          "endTime": "2867.900s",
                          "word": "um."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Hast wirklich du dieses Mass gekocht?",
                      "confidence": 0.8527441,
                      "words": [
                        {
                          "startTime": "2875.200s",
                          "endTime": "2876s",
                          "word": "Hast"
                        },
                        {
                          "startTime": "2876s",
                          "endTime": "2876.200s",
                          "word": "wirklich"
                        },
                        {
                          "startTime": "2876.200s",
                          "endTime": "2876.400s",
                          "word": "du"
                        },
                        {
                          "startTime": "2876.400s",
                          "endTime": "2876.600s",
                          "word": "dieses"
                        },
                        {
                          "startTime": "2876.600s",
                          "endTime": "2876.800s",
                          "word": "Mass"
                        },
                        {
                          "startTime": "2876.800s",
                          "endTime": "2877.300s",
                          "word": "gekocht?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Du bist ein Künstler.",
                      "confidence": 0.91906416,
                      "words": [
                        {
                          "startTime": "2879.700s",
                          "endTime": "2880.600s",
                          "word": "Du"
                        },
                        {
                          "startTime": "2880.600s",
                          "endTime": "2880.800s",
                          "word": "bist"
                        },
                        {
                          "startTime": "2880.800s",
                          "endTime": "2880.900s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2880.900s",
                          "endTime": "2881s",
                          "word": "Künstler."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Bist echt ein Jammer. Bin auf dem Weg, ich mache dir ein Vorschlag. Ich zeige dir wie mein Rezept geht. Willst du auch so kochen?",
                      "confidence": 0.86226773,
                      "words": [
                        {
                          "startTime": "2884s",
                          "endTime": "2884.400s",
                          "word": "Bist"
                        },
                        {
                          "startTime": "2884.400s",
                          "endTime": "2884.500s",
                          "word": "echt"
                        },
                        {
                          "startTime": "2884.500s",
                          "endTime": "2884.700s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2884.700s",
                          "endTime": "2884.800s",
                          "word": "Jammer."
                        },
                        {
                          "startTime": "2884.800s",
                          "endTime": "2887.300s",
                          "word": "Bin"
                        },
                        {
                          "startTime": "2887.300s",
                          "endTime": "2887.400s",
                          "word": "auf"
                        },
                        {
                          "startTime": "2887.400s",
                          "endTime": "2887.500s",
                          "word": "dem"
                        },
                        {
                          "startTime": "2887.500s",
                          "endTime": "2887.600s",
                          "word": "Weg,"
                        },
                        {
                          "startTime": "2887.600s",
                          "endTime": "2889.500s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2889.500s",
                          "endTime": "2889.700s",
                          "word": "mache"
                        },
                        {
                          "startTime": "2889.700s",
                          "endTime": "2889.800s",
                          "word": "dir"
                        },
                        {
                          "startTime": "2889.800s",
                          "endTime": "2889.900s",
                          "word": "ein"
                        },
                        {
                          "startTime": "2889.900s",
                          "endTime": "2890.300s",
                          "word": "Vorschlag."
                        },
                        {
                          "startTime": "2890.300s",
                          "endTime": "2890.400s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "2890.400s",
                          "endTime": "2891.600s",
                          "word": "zeige"
                        },
                        {
                          "startTime": "2891.600s",
                          "endTime": "2891.800s",
                          "word": "dir"
                        },
                        {
                          "startTime": "2891.800s",
                          "endTime": "2891.800s",
                          "word": "wie"
                        },
                        {
                          "startTime": "2891.800s",
                          "endTime": "2892s",
                          "word": "mein"
                        },
                        {
                          "startTime": "2892s",
                          "endTime": "2892.400s",
                          "word": "Rezept"
                        },
                        {
                          "startTime": "2892.400s",
                          "endTime": "2892.600s",
                          "word": "geht."
                        },
                        {
                          "startTime": "2892.600s",
                          "endTime": "2894.500s",
                          "word": "Willst"
                        },
                        {
                          "startTime": "2894.500s",
                          "endTime": "2894.600s",
                          "word": "du"
                        },
                        {
                          "startTime": "2894.600s",
                          "endTime": "2894.700s",
                          "word": "auch"
                        },
                        {
                          "startTime": "2894.700s",
                          "endTime": "2894.800s",
                          "word": "so"
                        },
                        {
                          "startTime": "2894.800s",
                          "endTime": "2895.100s",
                          "word": "kochen?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Lass uns beide leben.",
                      "confidence": 0.7985813,
                      "words": [
                        {
                          "startTime": "2899.600s",
                          "endTime": "2900s",
                          "word": "Lass"
                        },
                        {
                          "startTime": "2900s",
                          "endTime": "2900.100s",
                          "word": "uns"
                        },
                        {
                          "startTime": "2900.100s",
                          "endTime": "2900.400s",
                          "word": "beide"
                        },
                        {
                          "startTime": "2900.400s",
                          "endTime": "2900.700s",
                          "word": "leben."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Dann bringe ich es dir bei.",
                      "confidence": 0.9190641,
                      "words": [
                        {
                          "startTime": "2902.600s",
                          "endTime": "2903s",
                          "word": "Dann"
                        },
                        {
                          "startTime": "2903s",
                          "endTime": "2903.200s",
                          "word": "bringe"
                        },
                        {
                          "startTime": "2903.200s",
                          "endTime": "2903.300s",
                          "word": "ich"
                        },
                        {
                          "startTime": "2903.300s",
                          "endTime": "2903.400s",
                          "word": "es"
                        },
                        {
                          "startTime": "2903.400s",
                          "endTime": "2903.500s",
                          "word": "dir"
                        },
                        {
                          "startTime": "2903.500s",
                          "endTime": "2903.700s",
                          "word": "bei."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Mach die Zigarette aus bitte.",
                      "confidence": 0.82062846,
                      "words": [
                        {
                          "startTime": "2908.400s",
                          "endTime": "2936.200s",
                          "word": "Mach"
                        },
                        {
                          "startTime": "2936.200s",
                          "endTime": "2936.300s",
                          "word": "die"
                        },
                        {
                          "startTime": "2936.300s",
                          "endTime": "2936.400s",
                          "word": "Zigarette"
                        },
                        {
                          "startTime": "2936.400s",
                          "endTime": "2937s",
                          "word": "aus"
                        },
                        {
                          "startTime": "2937s",
                          "endTime": "2941.100s",
                          "word": "bitte."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Bald ist ja der mit den ganzen Tag Zeit.",
                      "confidence": 0.75882703,
                      "words": [
                        {
                          "startTime": "2952.700s",
                          "endTime": "2986.100s",
                          "word": "Bald"
                        },
                        {
                          "startTime": "2986.100s",
                          "endTime": "2986.300s",
                          "word": "ist"
                        },
                        {
                          "startTime": "2986.300s",
                          "endTime": "2986.400s",
                          "word": "ja"
                        },
                        {
                          "startTime": "2986.400s",
                          "endTime": "2987.300s",
                          "word": "der"
                        },
                        {
                          "startTime": "2987.300s",
                          "endTime": "2987.400s",
                          "word": "mit"
                        },
                        {
                          "startTime": "2987.400s",
                          "endTime": "2987.500s",
                          "word": "den"
                        },
                        {
                          "startTime": "2987.500s",
                          "endTime": "2987.800s",
                          "word": "ganzen"
                        },
                        {
                          "startTime": "2987.800s",
                          "endTime": "2987.900s",
                          "word": "Tag"
                        },
                        {
                          "startTime": "2987.900s",
                          "endTime": "2988.100s",
                          "word": "Zeit."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Buch ja",
                      "confidence": 0.6433047,
                      "words": [
                        {
                          "startTime": "3149.500s",
                          "endTime": "3151.200s",
                          "word": "Buch"
                        },
                        {
                          "startTime": "3151.200s",
                          "endTime": "3162s",
                          "word": "ja"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " was ist passiert",
                      "confidence": 0.85800993,
                      "words": [
                        {
                          "startTime": "3188.200s",
                          "endTime": "3244.500s",
                          "word": "was"
                        },
                        {
                          "startTime": "3244.500s",
                          "endTime": "3244.600s",
                          "word": "ist"
                        },
                        {
                          "startTime": "3244.600s",
                          "endTime": "3244.900s",
                          "word": "passiert"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Was haben sie mit dem gemacht?",
                      "confidence": 0.86072737,
                      "words": [
                        {
                          "startTime": "3248.700s",
                          "endTime": "3250.100s",
                          "word": "Was"
                        },
                        {
                          "startTime": "3250.100s",
                          "endTime": "3250.200s",
                          "word": "haben"
                        },
                        {
                          "startTime": "3250.200s",
                          "endTime": "3250.300s",
                          "word": "sie"
                        },
                        {
                          "startTime": "3250.300s",
                          "endTime": "3250.300s",
                          "word": "mit"
                        },
                        {
                          "startTime": "3250.300s",
                          "endTime": "3250.500s",
                          "word": "dem"
                        },
                        {
                          "startTime": "3250.500s",
                          "endTime": "3250.700s",
                          "word": "gemacht?"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Roter Phosphor wird beschleunigt durch Hitze und in Anwesenheit von Feuchtigkeit so Phosphorhydrid.",
                      "confidence": 0.8766573,
                      "words": [
                        {
                          "startTime": "3253.100s",
                          "endTime": "3253.500s",
                          "word": "Roter"
                        },
                        {
                          "startTime": "3253.500s",
                          "endTime": "3254s",
                          "word": "Phosphor"
                        },
                        {
                          "startTime": "3254s",
                          "endTime": "3254.300s",
                          "word": "wird"
                        },
                        {
                          "startTime": "3254.300s",
                          "endTime": "3254.700s",
                          "word": "beschleunigt"
                        },
                        {
                          "startTime": "3254.700s",
                          "endTime": "3254.900s",
                          "word": "durch"
                        },
                        {
                          "startTime": "3254.900s",
                          "endTime": "3255.200s",
                          "word": "Hitze"
                        },
                        {
                          "startTime": "3255.200s",
                          "endTime": "3255.400s",
                          "word": "und"
                        },
                        {
                          "startTime": "3255.400s",
                          "endTime": "3255.500s",
                          "word": "in"
                        },
                        {
                          "startTime": "3255.500s",
                          "endTime": "3255.700s",
                          "word": "Anwesenheit"
                        },
                        {
                          "startTime": "3255.700s",
                          "endTime": "3256.200s",
                          "word": "von"
                        },
                        {
                          "startTime": "3256.200s",
                          "endTime": "3256.500s",
                          "word": "Feuchtigkeit"
                        },
                        {
                          "startTime": "3256.500s",
                          "endTime": "3257.600s",
                          "word": "so"
                        },
                        {
                          "startTime": "3257.600s",
                          "endTime": "3259.200s",
                          "word": "Phosphorhydrid."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Phosphor Gas und ein Hauch davon",
                      "confidence": 0.89660156,
                      "words": [
                        {
                          "startTime": "3260.400s",
                          "endTime": "3261.100s",
                          "word": "Phosphor"
                        },
                        {
                          "startTime": "3261.100s",
                          "endTime": "3261.400s",
                          "word": "Gas"
                        },
                        {
                          "startTime": "3261.400s",
                          "endTime": "3263.200s",
                          "word": "und"
                        },
                        {
                          "startTime": "3263.200s",
                          "endTime": "3263.300s",
                          "word": "ein"
                        },
                        {
                          "startTime": "3263.300s",
                          "endTime": "3263.600s",
                          "word": "Hauch"
                        },
                        {
                          "startTime": "3263.600s",
                          "endTime": "3263.700s",
                          "word": "davon"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Fresse",
                      "confidence": 0.698866,
                      "words": [
                        {
                          "startTime": "3287s",
                          "endTime": "3290.300s",
                          "word": "Fresse"
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Wir müssen das Wirtschaftswunder Nordafrikaner.",
                      "confidence": 0.87986016,
                      "words": [
                        {
                          "startTime": "3293.300s",
                          "endTime": "3293.600s",
                          "word": "Wir"
                        },
                        {
                          "startTime": "3293.600s",
                          "endTime": "3293.900s",
                          "word": "müssen"
                        },
                        {
                          "startTime": "3293.900s",
                          "endTime": "3295.300s",
                          "word": "das"
                        },
                        {
                          "startTime": "3295.300s",
                          "endTime": "3313.800s",
                          "word": "Wirtschaftswunder"
                        },
                        {
                          "startTime": "3313.800s",
                          "endTime": "3343.400s",
                          "word": "Nordafrikaner."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Ich weiß nicht, was in letzter Zeit mit dir los ist, aber nichts, aber was es auch ist. Eins sage ich dir, ich mag es gar nicht, wenn du nicht mit mir redet das Schlimmste, was du mir antun kannst, ist mich auch schon Kanutouren Oma Ursula Neo BTC hingetan.",
                      "confidence": 0.8849385,
                      "words": [
                        {
                          "startTime": "3353.200s",
                          "endTime": "3358.700s",
                          "word": "Ich"
                        },
                        {
                          "startTime": "3358.700s",
                          "endTime": "3358.900s",
                          "word": "weiß"
                        },
                        {
                          "startTime": "3358.900s",
                          "endTime": "3359.100s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "3359.100s",
                          "endTime": "3359.300s",
                          "word": "was"
                        },
                        {
                          "startTime": "3359.300s",
                          "endTime": "3359.900s",
                          "word": "in"
                        },
                        {
                          "startTime": "3359.900s",
                          "endTime": "3360s",
                          "word": "letzter"
                        },
                        {
                          "startTime": "3360s",
                          "endTime": "3360.300s",
                          "word": "Zeit"
                        },
                        {
                          "startTime": "3360.300s",
                          "endTime": "3360.600s",
                          "word": "mit"
                        },
                        {
                          "startTime": "3360.600s",
                          "endTime": "3360.700s",
                          "word": "dir"
                        },
                        {
                          "startTime": "3360.700s",
                          "endTime": "3360.900s",
                          "word": "los"
                        },
                        {
                          "startTime": "3360.900s",
                          "endTime": "3361.100s",
                          "word": "ist,"
                        },
                        {
                          "startTime": "3361.100s",
                          "endTime": "3361.300s",
                          "word": "aber"
                        },
                        {
                          "startTime": "3361.300s",
                          "endTime": "3361.900s",
                          "word": "nichts,"
                        },
                        {
                          "startTime": "3361.900s",
                          "endTime": "3364.200s",
                          "word": "aber"
                        },
                        {
                          "startTime": "3364.200s",
                          "endTime": "3364.500s",
                          "word": "was"
                        },
                        {
                          "startTime": "3364.500s",
                          "endTime": "3364.700s",
                          "word": "es"
                        },
                        {
                          "startTime": "3364.700s",
                          "endTime": "3364.800s",
                          "word": "auch"
                        },
                        {
                          "startTime": "3364.800s",
                          "endTime": "3365s",
                          "word": "ist."
                        },
                        {
                          "startTime": "3365s",
                          "endTime": "3366.600s",
                          "word": "Eins"
                        },
                        {
                          "startTime": "3366.600s",
                          "endTime": "3366.900s",
                          "word": "sage"
                        },
                        {
                          "startTime": "3366.900s",
                          "endTime": "3366.900s",
                          "word": "ich"
                        },
                        {
                          "startTime": "3366.900s",
                          "endTime": "3367s",
                          "word": "dir,"
                        },
                        {
                          "startTime": "3367s",
                          "endTime": "3369s",
                          "word": "ich"
                        },
                        {
                          "startTime": "3369s",
                          "endTime": "3369.100s",
                          "word": "mag"
                        },
                        {
                          "startTime": "3369.100s",
                          "endTime": "3369.400s",
                          "word": "es"
                        },
                        {
                          "startTime": "3369.400s",
                          "endTime": "3369.600s",
                          "word": "gar"
                        },
                        {
                          "startTime": "3369.600s",
                          "endTime": "3369.700s",
                          "word": "nicht,"
                        },
                        {
                          "startTime": "3369.700s",
                          "endTime": "3370s",
                          "word": "wenn"
                        },
                        {
                          "startTime": "3370s",
                          "endTime": "3370.100s",
                          "word": "du"
                        },
                        {
                          "startTime": "3370.100s",
                          "endTime": "3370.200s",
                          "word": "nicht"
                        },
                        {
                          "startTime": "3370.200s",
                          "endTime": "3370.500s",
                          "word": "mit"
                        },
                        {
                          "startTime": "3370.500s",
                          "endTime": "3370.600s",
                          "word": "mir"
                        },
                        {
                          "startTime": "3370.600s",
                          "endTime": "3371.100s",
                          "word": "redet"
                        },
                        {
                          "startTime": "3371.100s",
                          "endTime": "3373.400s",
                          "word": "das"
                        },
                        {
                          "startTime": "3373.400s",
                          "endTime": "3373.800s",
                          "word": "Schlimmste,"
                        },
                        {
                          "startTime": "3373.800s",
                          "endTime": "3373.900s",
                          "word": "was"
                        },
                        {
                          "startTime": "3373.900s",
                          "endTime": "3374.100s",
                          "word": "du"
                        },
                        {
                          "startTime": "3374.100s",
                          "endTime": "3374.100s",
                          "word": "mir"
                        },
                        {
                          "startTime": "3374.100s",
                          "endTime": "3374.500s",
                          "word": "antun"
                        },
                        {
                          "startTime": "3374.500s",
                          "endTime": "3374.800s",
                          "word": "kannst,"
                        },
                        {
                          "startTime": "3374.800s",
                          "endTime": "3375.100s",
                          "word": "ist"
                        },
                        {
                          "startTime": "3375.100s",
                          "endTime": "3375.100s",
                          "word": "mich"
                        },
                        {
                          "startTime": "3375.100s",
                          "endTime": "3375.300s",
                          "word": "auch"
                        },
                        {
                          "startTime": "3375.300s",
                          "endTime": "3375.600s",
                          "word": "schon"
                        },
                        {
                          "startTime": "3375.600s",
                          "endTime": "3385.600s",
                          "word": "Kanutouren"
                        },
                        {
                          "startTime": "3385.600s",
                          "endTime": "3386s",
                          "word": "Oma"
                        },
                        {
                          "startTime": "3386s",
                          "endTime": "3390.900s",
                          "word": "Ursula"
                        },
                        {
                          "startTime": "3390.900s",
                          "endTime": "3406s",
                          "word": "Neo"
                        },
                        {
                          "startTime": "3406s",
                          "endTime": "3409.200s",
                          "word": "BTC"
                        },
                        {
                          "startTime": "3409.200s",
                          "endTime": "3411.900s",
                          "word": "hingetan."
                        }
                      ]
                    }
                  ]
                },
                {
                  "alternatives": [
                    {
                      "transcript": " Hund Chihuahua Geburtstagskarte",
                      "confidence": 0.7324425,
                      "words": [
                        {
                          "startTime": "3413.200s",
                          "endTime": "3423s",
                          "word": "Hund"
                        },
                        {
                          "startTime": "3423s",
                          "endTime": "3450.800s",
                          "word": "Chihuahua"
                        },
                        {
                          "startTime": "3450.800s",
                          "endTime": "3470.400s",
                          "word": "Geburtstagskarte"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
          `;
*/
        var data = JSON.parse(jsonString);

        var wordIndex = 0;
        window.words = [];
        window.createdSubs = [];

        for(let result of data.response.results) {
            for(let word of result.alternatives[0].words) {
                
                // var top = (wordIndex % 5) * 20;
                
                var finishPixel = parseFloat(word.endTime)*100;
                var startPixel = parseFloat(word.startTime)*100;
                let width = finishPixel - startPixel;
                if(width > 50) { 
                    width = 50;
                    startPixel = finishPixel - 50;
                }
                width+=20;

                var $debugTrackWordsDiv = $("#debugTrackWords" + (1+ wordIndex % 5));

                // Draw subs 1
                
                var text = word.word;
                // var IndexString = `[${thisIndex}]`;

                // padding-top: ${top}px;
                $debugTrackWordsDiv.append(`<div id="${wordIndex}" class="word" style="font-family: sans-serif; left: ${startPixel}px; width: ${width}px; height: 20px; position: absolute; background: transparent; border-radius: 10px; border-style: solid; border-color: rgba(0,0,0,0.2); box-sizing: border-box; color: black;">${text}</div>`);

                let wordData = {};
                wordData.startPixel = startPixel;
                wordData.finishPixel = finishPixel;
                wordData.text = word.word;
                window.words.push(wordData);

                wordIndex += 1;
            }
        }
        
        window.selectedIndex = null;

        $(".word").on('click', function(event) {
            event.stopPropagation();
            if(window.selectedIndex !== null) {
                util.log(`Creating new sub, ${window.selectedIndex}-${event.target.id};`);

                var index1 = parseInt(window.selectedIndex);
                var index2 = parseInt(event.target.id);

                var lowestIndex = parseInt(Math.min(index1, index2));
                var highestIndex = parseInt(Math.max(index1, index2));

                util.log(lowestIndex);
                util.log(highestIndex);

                let startPixel = window.words[lowestIndex].startPixel;
                let width = window.words[highestIndex].finishPixel - startPixel;

                let curIndex = lowestIndex;
                let text = "";

                do {
                    text += window.words[curIndex].text;
                    text += ' ';
                    curIndex += 1;
                } while (curIndex !== (highestIndex + 1));
                
                var $debugTrackCreateDiv = $("#debugTrackCreate");
                $debugTrackCreateDiv.append(`<div style="font-family: sans-serif; left: ${startPixel}px; width: ${width}px; height: 65px; position: absolute; background: transparent; border-radius: 10px; border-style: solid; border-color: rgba(0,0,0,0.2); box-sizing: border-box; color: black;">${text}</div>`);

                // {text: "123", begin: XXX, end: XXX}
                var newSub = {};
                newSub.text = text;
                newSub.begin = window.words[lowestIndex].startPixel*10;
                newSub.end = window.words[highestIndex].finishPixel*10;
                window.createdSubs.push(newSub);

                window.selectedIndex = null;
            }
            else {
              util.log(`Selected DIV: ${event.target.id}`);
                window.selectedIndex = event.target.id;
            }
        });

        $("#subsDebug").on('click', function(event) {
            window.selectedIndex = null;
        });


        
    }

    obj.printSubs = [];

    obj.align = function(sourceSubsArray, translationSubsArray) {

      checkTypes(arguments, "array,array");

        // calculate overlap time between two subs (ms)
        // if they don't overlap, return the gap in ms, up to 1000ms
        function getSubOverlap(sub2, sub1) {
            return Math.max(
                Math.min(sub1.end, sub2.end) - Math.max(sub1.begin, sub2.begin), -1000);
        }

        
        function getSubIndexWithMostOverlap(inputSub, inputSubArray) {

            var returnArray = [];

            // First find the sub with the longest overlap/smallest gap.
            var maxOverlap = 0;
            var indexWithMostOverlap = -1;
            for (let i = 0; i < inputSubArray.length; i++) {
              let subOverlap = getSubOverlap(inputSub, inputSubArray[i]);
                if( subOverlap > maxOverlap) {
                    maxOverlap = subOverlap;
                    indexWithMostOverlap = i;
                }
            }

            if( indexWithMostOverlap !== -1) {
                returnArray.push(indexWithMostOverlap);
            }

            // add any subs that also overlap at least 500ms or 80%
            for (let i = 0; i < inputSubArray.length; i++) {

                let testSub = inputSubArray[i];
                let overlap = getSubOverlap(inputSub, testSub);
                let testSub_len = testSub.end - testSub.begin;

                if(  overlap > 500  ||  ((overlap/testSub_len) > 0.8)  ) {
                    if(!returnArray.includes(i)) { returnArray.push(i); }
                }
            }

            return returnArray;
        }

        // go through all subtitles in translationSubsArray, and find where each of them belongs
        alignedTranslationSubs = {};

        // var alignTypes = {};

        // alignedIndexes[sourceSubIndex] = [translationSubIndex, translationSubIndex];
        var alignedIndexes = {};
        var discardedTranslationIndexes = [];
        var oneTranslationToMultipleIndexes = [];
        var translationAppearsWhere = [];

        // loop over translations, what to do with translation i?

        for (let i = 0; i < translationSubsArray.length; i++) {
            // Get the sourceSub indexes where each translation sub should be added
            let thisTranslationSub = translationSubsArray[i];
            var matchingSourceSubIndexes = getSubIndexWithMostOverlap(thisTranslationSub, sourceSubsArray);
            translationAppearsWhere.push(matchingSourceSubIndexes);

            var alignType = 'UNKNOWN';

            // DISCARD
            if (matchingSourceSubIndexes.length === 0) {
                discardedTranslationIndexes.push(i);
                //util.log(`ALIGN: Discaridng sub no. ${i}, text: ${translationSubsArray[i].text}`);
                continue;
            }

            // ONE_TRANSLATION_TO_MULTIPLE
            else if(matchingSourceSubIndexes.length > 1) {
                alignType = 'ONE_TRANSLATION_TO_MULTIPLE';
                //util.log(`ALIGN: Translation ${i} to multiple: ${matchingSourceSubIndexes}`);
            }

            // Loop over the matchingSourceSubIndexes where this translation should be inserted..
            for(let matchingSourceSubIndex of matchingSourceSubIndexes) {

                if(alignedIndexes[matchingSourceSubIndex] === undefined) {
                    alignedIndexes[matchingSourceSubIndex] = [i];
                    alignedTranslationSubs[matchingSourceSubIndex] = translationSubsArray[i].text;
                }
                else {
                    // One source sub has more than one translation associated with it.
                    alignedIndexes[matchingSourceSubIndex].push(i);
                    alignedTranslationSubs[matchingSourceSubIndex] = alignedTranslationSubs[matchingSourceSubIndex] + ' ' + translationSubsArray[i].text;
                }
                
                if(alignType === 'ONE_TRANSLATION_TO_MULTIPLE') {
                    oneTranslationToMultipleIndexes.push(matchingSourceSubIndex);
                    // alignTypes[matchingSourceSubIndex] = 'ONE_TRANSLATION_TO_MULTIPLE';
                }
            }
        }

        var extraInfo = {};

        // alignedIndexes[sourceSubIndex] = [translationSubIndex, translationSubIndex];
        /*
        alignedIndexes[43]
        -> [41] (source sub index no. 43 contains translation sub index no. 41)
        translationAppearsWhere[41]
        (2) [44, 43]
        */

        // disable for v3.1.9
//
        let sortedKeys = Object.keys(alignedIndexes).map(x => parseInt(x)).sort((a, b) => a - b);

        // console.log('sortedKeys ', sortedKeys)
        
        // for each alignedTranslationSub
        for(let j = 0; j < sortedKeys.length; j++) {

          let sourceSubIndex = sortedKeys[j];

          extraInfo[sourceSubIndex] = [];

          if(alignedIndexes[sourceSubIndex].length === 1) {

            // This source sub is formed from one translation sub
            let translationSubIndex = alignedIndexes[sourceSubIndex][0];

            // where does this sub appear?
            let taw = translationAppearsWhere[translationSubIndex];

            if(taw.indexOf(sourceSubIndex) !== -1) {
              extraInfo[sourceSubIndex].push([translationSubIndex,taw.sort((a, b) => a - b).indexOf(sourceSubIndex), taw.length]);
            }
          }
          else if(alignedIndexes[sourceSubIndex].length > 1) {

            // This source sub is formed from more than one translation sub
            for(let translationSubIndex of alignedIndexes[sourceSubIndex]) {

              // where does this translation appear?
              let taw = translationAppearsWhere[translationSubIndex];

              // console.log(taw.sort((a, b) => a - b))

              if(taw.indexOf(sourceSubIndex) !== -1) {
                extraInfo[sourceSubIndex].push([translationSubIndex,taw.sort((a, b) => a - b).indexOf(sourceSubIndex), taw.length]);
              }
            }
          }
        }
//
        // make print subs
        // horrible code, won't even bother to comment it.

        // Black slate
        obj.printSubs = [];

        function arraysSame(array1, array2) {

          if(array1.length !== array2.length) { return false; }

          for(var i = 0; i < array1.length; i++) {
            if(array1[i] !== array2[i]) { return false; }
          }

          return true;
        }

        var lastStuff = [];
        var bufferS = "";
        var bufferT = "";

        var MERGE_CHAR = " ";

        for(key of Object.keys( alignedIndexes ).sort((a, b) => a - b) ) // ascending order
        {
            var thisValue = alignedIndexes[key];

            // Same? carry on
            if(arraysSame(lastStuff, thisValue)) {
              if(bufferS.length > 0) { bufferS += MERGE_CHAR; }
              bufferS += sourceSubsArray[key].text;
            }
            else {
              // changed? push old.
              // check to avoid empty pair at beginning of output.
              if(bufferS.length > 0 || bufferT.length > 0) {
                obj.printSubs.push( [bufferS.split("\n").join(" "),bufferT.split("\n").join(" ")] );
              }
              var bufferS = "";
              var bufferT = "";

              // add new
              bufferS += sourceSubsArray[key].text;

              for(let subIndex of thisValue) {
                if(bufferT.length > 0) { bufferT += MERGE_CHAR; }
                bufferT += translationSubsArray[subIndex].text;
              }
            }
            
            lastStuff = thisValue;
        }

        if(bufferS.length > 0 || bufferT.length > 0) {
          obj.printSubs.push( [bufferS.split("\n").join(" "),bufferT.split("\n").join(" ")] );
        }

        // Sub debug / creator view
        if(obj.debug) {

            $("#subsDebug").show();

            var $debugTrackOneDiv = $("#debugTrackOne");
            // Draw subs 1
            for(let thisIndex = 0; thisIndex < sourceSubsArray.length; thisIndex++) {

                var startPixel = sourceSubsArray[thisIndex].begin/10;
                var finishPixel = sourceSubsArray[thisIndex].end/10;
                let width = finishPixel - startPixel;
                var text = sourceSubsArray[thisIndex].text;
                var IndexString = `[${thisIndex}]`;

                $debugTrackOneDiv.append(`<div style="left: ${startPixel}px; width: ${width}px; height: 45px; position: absolute; background: lightgrey; border-style: solid; border-color: black">${IndexString}: ${text}</div>`);
                
            }

            var $debugTrackTwoDiv = $("#debugTrackTwo");

            // Draw subs 2
            for(let thisIndex = 0; thisIndex < translationSubsArray.length; thisIndex++) {

                var startPixel = translationSubsArray[thisIndex].begin/10;
                var finishPixel = translationSubsArray[thisIndex].end/10;
                let width = finishPixel - startPixel;
                var text = translationSubsArray[thisIndex].text;
                var IndexString = `[${thisIndex}]`;

                let bcolor = 'grey';
                if(discardedTranslationIndexes.includes(thisIndex)) {
                    // RED or some shit
                    bcolor = 'red';
                }

                $debugTrackTwoDiv.append(`<div style="left: ${startPixel}px; width: ${width}px; height: 45px; position: absolute; background: ${bcolor}; border-style: solid; border-color: black">${IndexString}: ${text}</div>`);
            }

            var $debugTrackThreeDiv = $("#debugTrackThree");
            
            window.alignedTranslationSubs = alignedTranslationSubs;
            window.oneTranslationToMultipleIndexes = oneTranslationToMultipleIndexes;
            window.alignedIndexes = alignedIndexes;
            window.translationAppearsWhere = translationAppearsWhere;
            

            // Draw merged subs
            for(let thisIndex = 0; thisIndex < Object.keys(alignedTranslationSubs).length; thisIndex++) {

                // key here is a sub1 index
                var key = Object.keys(alignedTranslationSubs)[thisIndex];

                var startPixel = sourceSubsArray[key].begin/10;
                var finishPixel = sourceSubsArray[key].end/10;
                let width = finishPixel - startPixel;
                var text = alignedTranslationSubs[key];
                var IndexString = `[${alignedIndexes[key]}]`;

                let bcolor = 'grey';

                if(alignedIndexes[key].length === 0) {
                    // No translation for this sub1 sub
                    bcolor = 'orange';

                }
                else if(oneTranslationToMultipleIndexes.includes(parseInt(key))) {
                    // ONE TO MANY
                    bcolor = 'purple';

                }
                else if(alignedIndexes[key].length === 1) {
                    // ONE TO ONE
                    bcolor = 'green';

                }
                else if(alignedIndexes[key].length > 1) {
                    // MANY TO ONE
                    bcolor = 'yellow';
                    
                }

                $debugTrackThreeDiv.append(`<div style="left: ${startPixel}px; width: ${width}px; height: 45px; position: absolute; background: ${bcolor};  border-style: solid; border-color:  black">${IndexString}: ${text}</div>`);

            }
        }

        // return dictionary in format {subs1_key: subs2_text}
        return { alignedTranslationSubs: alignedTranslationSubs, extraInfo: extraInfo };
        // return { alignedTranslationSubs: alignedTranslationSubs, alignedIndexes: alignedIndexes, 
    }

    /**
     * Created by Ognjen on 10/19/15.
     */

// counts differences between subtitles (text lengths over intervals)
// function getDiff(subs1, subs2, k, n, searchIntervals, searchNumSubs){
//     var diffs = {};
//     var subLen, subTime, key;
//     for (var i in searchIntervals){
//         var interval = searchIntervals[i];
//         for(var i1 in subs1){
//             subLen = subs1[i1].text.length;
//             subTime = Math.round(subs1[i1].begin / interval);
//             key = interval + '|' + subTime;
//             diffs[key] = (diffs[key] || 0) + subLen;
//             if(i1 > searchNumSubs) break;
//         }
//         for(var i2 in subs2){
//             subLen = subs2[i2].text.length;
//             subTime = Math.round((subs2[i2].begin * k + n) / interval);
//             key = interval + '|' + subTime;
//             diffs[key] = (diffs[key] || 0) - subLen;
//             if(i2 > searchNumSubs) break;
//         }
//     }
//     // just sum absolute values of all diff values
//     var diff = 0;
//     for (key in diffs) {
//         diff += Math.abs(diffs[key]);
//     }
//     return diff;
// }

/*
    // counts differences between subtitles (text lengths over intervals)
    function getDiff(subs1, subs2, k, n, searchIntervals, searchNumSubs) {
        var diffs = {};
        var subLen, subTime, key;
        for (var i in searchIntervals) {
            var interval = searchIntervals[i];
            for(var sub of subs1) {
                subLen = sub.text.length;
                subTime = Math.round(sub.begin / interval);
                key = interval + '|' + subTime;
                diffs[key] = (diffs[key] || 0) + subLen;
                if(i1 > searchNumSubs) break;
            }
            for(var sub of subs2) {
                subLen = sub.text.length;
                subTime = Math.round((sub.begin * k + n) / interval);
                key = interval + '|' + subTime;
                diffs[key] = (diffs[key] || 0) - subLen;
                if(i2 > searchNumSubs) break;
            }
        }
        // just sum absolute values of all diff values
        var diff = 0;
        for (key in diffs) {
            diff += Math.abs(diffs[key]);
        }
        return diff;
    }
*/


    // // returns best k, n (subtitle timing t is transformed like: t*k+n)
    // function getBestTransform(subs1, subs2) {
    //     var params = {
    //         rates: [1, 23.976 / 25.0, 25.0 / 23.976, 30.0 / 23.976, 23.976 / 30.0], //  // 24.0, 30.0
    //         range1: 30.0, delta1: 1,
    //         range2: 3.0, delta2: 0.2,
    //         searchIntervals: [2, 20],
    //         searchNumSubs: 200
    //     };
    //     var start = new Date().getTime();
    //     var best = {diff: null, k: 1, n:0};
    //     var diff;
    //     for (var ki in params.rates) {
    //         var k = params.rates[ki];
    //         for(var n = - params.range1; n <= params.range1; n+=params.delta1) {
    //             diff = getDiff(subs1, subs2, k, n, params.searchIntervals, params.searchNumSubs);
    //             if (best.diff === null || diff < best.diff) {
    //                 best = {diff:diff, k:k, n:n};
    //             }
    //         }
    //         for(var n2 = best.n - params.range2; n2 <= best.n + params.range2; n2+=params.delta2) {
    //             diff = getDiff(subs1, subs2, k, n2, params.searchIntervals, params.searchNumSubs);
    //             if (best.diff === null || diff < best.diff) {
    //                 best = {diff:diff, k:k, n:n2};
    //             }
    //         }
    //     }
    //     best.duration = new Date().getTime() - start;
    //     return best;
    //
    // };

    //     Underscore.js 1.9.1
    //     http://underscorejs.org
    //     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Underscore may be freely distributed under the MIT license.
    !function() {var n="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||this||{},r=n._,e=Array.prototype,o=Object.prototype,s="undefined"!=typeof Symbol?Symbol.prototype:null,u=e.push,c=e.slice,p=o.toString,i=o.hasOwnProperty,t=Array.isArray,a=Object.keys,l=Object.create,f=function() {},h=function(n) {return n instanceof h?n:this instanceof h?void(this._wrapped=n):new h(n)};"undefined"==typeof exports||exports.nodeType?n._=h:("undefined"!=typeof module&&!module.nodeType&&module.exports&&(exports=module.exports=h),exports._=h),h.VERSION="1.9.1";var v,y=function(u,i,n) {if(void 0===i)return u;switch(null==n?3:n) {case 1:return function(n) {return u.call(i,n)};case 3:return function(n,r,t) {return u.call(i,n,r,t)};case 4:return function(n,r,t,e) {return u.call(i,n,r,t,e)}}return function() {return u.apply(i,arguments)}},d=function(n,r,t) {return h.iteratee!==v?h.iteratee(n,r):null==n?h.identity:h.isFunction(n)?y(n,r,t):h.isObject(n)&&!h.isArray(n)?h.matcher(n):h.property(n)};h.iteratee=v=function(n,r) {return d(n,r,1/0)};var g=function(u,i) {return i=null==i?u.length-1:+i,function() {for(var n=Math.max(arguments.length-i,0),r=Array(n),t=0;t<n;t++)r[t]=arguments[t+i];switch(i) {case 0:return u.call(this,r);case 1:return u.call(this,arguments[0],r);case 2:return u.call(this,arguments[0],arguments[1],r)}var e=Array(i+1);for(t=0;t<i;t++)e[t]=arguments[t];return e[i]=r,u.apply(this,e)}},m=function(n) {if(!h.isObject(n))return{};if(l)return l(n);f.prototype=n;var r=new f;return f.prototype=null,r},b=function(r) {return function(n) {return null==n?void 0:n[r]}},j=function(n,r) {return null!=n&&i.call(n,r)},x=function(n,r) {for(var t=r.length,e=0;e<t;e++) {if(null==n)return;n=n[r[e]]}return t?n:void 0},_=Math.pow(2,53)-1,A=b("length"),w=function(n) {var r=A(n);return"number"==typeof r&&0<=r&&r<=_};h.each=h.forEach=function(n,r,t) {var e,u;if(r=y(r,t),w(n))for(e=0,u=n.length;e<u;e++)r(n[e],e,n);else{var i=h.keys(n);for(e=0,u=i.length;e<u;e++)r(n[i[e]],i[e],n)}return n},h.map=h.collect=function(n,r,t) {r=d(r,t);for(var e=!w(n)&&h.keys(n),u=(e||n).length,i=Array(u),o=0;o<u;o++) {var a=e?e[o]:o;i[o]=r(n[a],a,n)}return i};var O=function(c) {return function(n,r,t,e) {var u=3<=arguments.length;return function(n,r,t,e) {var u=!w(n)&&h.keys(n),i=(u||n).length,o=0<c?0:i-1;for(e||(t=n[u?u[o]:o],o+=c);0<=o&&o<i;o+=c) {var a=u?u[o]:o;t=r(t,n[a],a,n)}return t}(n,y(r,e,4),t,u)}};h.reduce=h.foldl=h.inject=O(1),h.reduceRight=h.foldr=O(-1),h.find=h.detect=function(n,r,t) {var e=(w(n)?h.findIndex:h.findKey)(n,r,t);if(void 0!==e&&-1!==e)return n[e]},h.filter=h.select=function(n,e,r) {var u=[];return e=d(e,r),h.each(n,function(n,r,t) {e(n,r,t)&&u.push(n)}),u},h.reject=function(n,r,t) {return h.filter(n,h.negate(d(r)),t)},h.every=h.all=function(n,r,t) {r=d(r,t);for(var e=!w(n)&&h.keys(n),u=(e||n).length,i=0;i<u;i++) {var o=e?e[i]:i;if(!r(n[o],o,n))return!1}return!0},h.some=h.any=function(n,r,t) {r=d(r,t);for(var e=!w(n)&&h.keys(n),u=(e||n).length,i=0;i<u;i++) {var o=e?e[i]:i;if(r(n[o],o,n))return!0}return!1},h.contains=h.includes=h.include=function(n,r,t,e) {return w(n)||(n=h.values(n)),("number"!=typeof t||e)&&(t=0),0<=h.indexOf(n,r,t)},h.invoke=g(function(n,t,e) {var u,i;return h.isFunction(t)?i=t:h.isArray(t)&&(u=t.slice(0,-1),t=t[t.length-1]),h.map(n,function(n) {var r=i;if(!r) {if(u&&u.length&&(n=x(n,u)),null==n)return;r=n[t]}return null==r?r:r.apply(n,e)})}),h.pluck=function(n,r) {return h.map(n,h.property(r))},h.where=function(n,r) {return h.filter(n,h.matcher(r))},h.findWhere=function(n,r) {return h.find(n,h.matcher(r))},h.max=function(n,e,r) {var t,u,i=-1/0,o=-1/0;if(null==e||"number"==typeof e&&"object"!=typeof n[0]&&null!=n)for(var a=0,c=(n=w(n)?n:h.values(n)).length;a<c;a++)null!=(t=n[a])&&i<t&&(i=t);else e=d(e,r),h.each(n,function(n,r,t) {u=e(n,r,t),(o<u||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i},h.min=function(n,e,r) {var t,u,i=1/0,o=1/0;if(null==e||"number"==typeof e&&"object"!=typeof n[0]&&null!=n)for(var a=0,c=(n=w(n)?n:h.values(n)).length;a<c;a++)null!=(t=n[a])&&t<i&&(i=t);else e=d(e,r),h.each(n,function(n,r,t) {((u=e(n,r,t))<o||u===1/0&&i===1/0)&&(i=n,o=u)});return i},h.shuffle=function(n) {return h.sample(n,1/0)},h.sample=function(n,r,t) {if(null==r||t)return w(n)||(n=h.values(n)),n[h.random(n.length-1)];var e=w(n)?h.clone(n):h.values(n),u=A(e);r=Math.max(Math.min(r,u),0);for(var i=u-1,o=0;o<r;o++) {var a=h.random(o,i),c=e[o];e[o]=e[a],e[a]=c}return e.slice(0,r)},h.sortBy=function(n,e,r) {var u=0;return e=d(e,r),h.pluck(h.map(n,function(n,r,t) {return{value:n,index:u++,criteria:e(n,r,t)}}).sort(function(n,r) {var t=n.criteria,e=r.criteria;if(t!==e) {if(e<t||void 0===t)return 1;if(t<e||void 0===e)return-1}return n.index-r.index}),"value")};var k=function(o,r) {return function(e,u,n) {var i=r?[[],[]]:{};return u=d(u,n),h.each(e,function(n,r) {var t=u(n,r,e);o(i,n,t)}),i}};h.groupBy=k(function(n,r,t) {j(n,t)?n[t].push(r):n[t]=[r]}),h.indexBy=k(function(n,r,t) {n[t]=r}),h.countBy=k(function(n,r,t) {j(n,t)?n[t]++:n[t]=1});var S=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;h.toArray=function(n) {return n?h.isArray(n)?c.call(n):h.isString(n)?n.match(S):w(n)?h.map(n,h.identity):h.values(n):[]},h.size=function(n) {return null==n?0:w(n)?n.length:h.keys(n).length},h.partition=k(function(n,r,t) {n[t?0:1].push(r)},!0),h.first=h.head=h.take=function(n,r,t) {return null==n||n.length<1?null==r?void 0:[]:null==r||t?n[0]:h.initial(n,n.length-r)},h.initial=function(n,r,t) {return c.call(n,0,Math.max(0,n.length-(null==r||t?1:r)))},h.last=function(n,r,t) {return null==n||n.length<1?null==r?void 0:[]:null==r||t?n[n.length-1]:h.rest(n,Math.max(0,n.length-r))},h.rest=h.tail=h.drop=function(n,r,t) {return c.call(n,null==r||t?1:r)},h.compact=function(n) {return h.filter(n,Boolean)};var M=function(n,r,t,e) {for(var u=(e=e||[]).length,i=0,o=A(n);i<o;i++) {var a=n[i];if(w(a)&&(h.isArray(a)||h.isArguments(a)))if(r)for(var c=0,l=a.length;c<l;)e[u++]=a[c++];else M(a,r,t,e),u=e.length;else t||(e[u++]=a)}return e};h.flatten=function(n,r) {return M(n,r,!1)},h.without=g(function(n,r) {return h.difference(n,r)}),h.uniq=h.unique=function(n,r,t,e) {h.isBoolean(r)||(e=t,t=r,r=!1),null!=t&&(t=d(t,e));for(var u=[],i=[],o=0,a=A(n);o<a;o++) {var c=n[o],l=t?t(c,o,n):c;r&&!t?(o&&i===l||u.push(c),i=l):t?h.contains(i,l)||(i.push(l),u.push(c)):h.contains(u,c)||u.push(c)}return u},h.union=g(function(n) {return h.uniq(M(n,!0,!0))}),h.intersection=function(n) {for(var r=[],t=arguments.length,e=0,u=A(n);e<u;e++) {var i=n[e];if(!h.contains(r,i)) {var o;for(o=1;o<t&&h.contains(arguments[o],i);o++);o===t&&r.push(i)}}return r},h.difference=g(function(n,r) {return r=M(r,!0,!0),h.filter(n,function(n) {return!h.contains(r,n)})}),h.unzip=function(n) {for(var r=n&&h.max(n,A).length||0,t=Array(r),e=0;e<r;e++)t[e]=h.pluck(n,e);return t},h.zip=g(h.unzip),h.object=function(n,r) {for(var t={},e=0,u=A(n);e<u;e++)r?t[n[e]]=r[e]:t[n[e][0]]=n[e][1];return t};var F=function(i) {return function(n,r,t) {r=d(r,t);for(var e=A(n),u=0<i?0:e-1;0<=u&&u<e;u+=i)if(r(n[u],u,n))return u;return-1}};h.findIndex=F(1),h.findLastIndex=F(-1),h.sortedIndex=function(n,r,t,e) {for(var u=(t=d(t,e,1))(r),i=0,o=A(n);i<o;) {var a=Math.floor((i+o)/2);t(n[a])<u?i=a+1:o=a}return i};var E=function(i,o,a) {return function(n,r,t) {var e=0,u=A(n);if("number"==typeof t)0<i?e=0<=t?t:Math.max(t+u,e):u=0<=t?Math.min(t+1,u):t+u+1;else if(a&&t&&u)return n[t=a(n,r)]===r?t:-1;if(r!=r)return 0<=(t=o(c.call(n,e,u),h.isNaN))?t+e:-1;for(t=0<i?e:u-1;0<=t&&t<u;t+=i)if(n[t]===r)return t;return-1}};h.indexOf=E(1,h.findIndex,h.sortedIndex),h.lastIndexOf=E(-1,h.findLastIndex),h.range=function(n,r,t) {null==r&&(r=n||0,n=0),t||(t=r<n?-1:1);for(var e=Math.max(Math.ceil((r-n)/t),0),u=Array(e),i=0;i<e;i++,n+=t)u[i]=n;return u},h.chunk=function(n,r) {if(null==r||r<1)return[];for(var t=[],e=0,u=n.length;e<u;)t.push(c.call(n,e,e+=r));return t};var N=function(n,r,t,e,u) {if(!(e instanceof r))return n.apply(t,u);var i=m(n.prototype),o=n.apply(i,u);return h.isObject(o)?o:i};h.bind=g(function(r,t,e) {if(!h.isFunction(r))throw new TypeError("Bind must be called on a function");var u=g(function(n) {return N(r,u,t,this,e.concat(n))});return u}),h.partial=g(function(u,i) {var o=h.partial.placeholder,a=function() {for(var n=0,r=i.length,t=Array(r),e=0;e<r;e++)t[e]=i[e]===o?arguments[n++]:i[e];for(;n<arguments.length;)t.push(arguments[n++]);return N(u,a,this,this,t)};return a}),(h.partial.placeholder=h).bindAll=g(function(n,r) {var t=(r=M(r,!1,!1)).length;if(t<1)throw new Error("bindAll must be passed function names");for(;t--;) {var e=r[t];n[e]=h.bind(n[e],n)}}),h.memoize=function(e,u) {var i=function(n) {var r=i.cache,t=""+(u?u.apply(this,arguments):n);return j(r,t)||(r[t]=e.apply(this,arguments)),r[t]};return i.cache={},i},h.delay=g(function(n,r,t) {return setTimeout(function() {return n.apply(null,t)},r)}),h.defer=h.partial(h.delay,h,1),h.throttle=function(t,e,u) {var i,o,a,c,l=0;u||(u={});var f=function() {l=!1===u.leading?0:h.now(),i=null,c=t.apply(o,a),i||(o=a=null)},n=function() {var n=h.now();l||!1!==u.leading||(l=n);var r=e-(n-l);return o=this,a=arguments,r<=0||e<r?(i&&(clearTimeout(i),i=null),l=n,c=t.apply(o,a),i||(o=a=null)):i||!1===u.trailing||(i=setTimeout(f,r)),c};return n.cancel=function() {clearTimeout(i),l=0,i=o=a=null},n},h.debounce=function(t,e,u) {var i,o,a=function(n,r) {i=null,r&&(o=t.apply(n,r))},n=g(function(n) {if(i&&clearTimeout(i),u) {var r=!i;i=setTimeout(a,e),r&&(o=t.apply(this,n))}else i=h.delay(a,e,this,n);return o});return n.cancel=function() {clearTimeout(i),i=null},n},h.wrap=function(n,r) {return h.partial(r,n)},h.negate=function(n) {return function() {return!n.apply(this,arguments)}},h.compose=function() {var t=arguments,e=t.length-1;return function() {for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}},h.after=function(n,r) {return function() {if(--n<1)return r.apply(this,arguments)}},h.before=function(n,r) {var t;return function() {return 0<--n&&(t=r.apply(this,arguments)),n<=1&&(r=null),t}},h.once=h.partial(h.before,2),h.restArguments=g;var I=!{toString:null}.propertyIsEnumerable("toString"),T=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],B=function(n,r) {var t=T.length,e=n.constructor,u=h.isFunction(e)&&e.prototype||o,i="constructor";for(j(n,i)&&!h.contains(r,i)&&r.push(i);t--;)(i=T[t])in n&&n[i]!==u[i]&&!h.contains(r,i)&&r.push(i)};h.keys=function(n) {if(!h.isObject(n))return[];if(a)return a(n);var r=[];for(var t in n)j(n,t)&&r.push(t);return I&&B(n,r),r},h.allKeys=function(n) {if(!h.isObject(n))return[];var r=[];for(var t in n)r.push(t);return I&&B(n,r),r},h.values=function(n) {for(var r=h.keys(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=n[r[u]];return e},h.mapObject=function(n,r,t) {r=d(r,t);for(var e=h.keys(n),u=e.length,i={},o=0;o<u;o++) {var a=e[o];i[a]=r(n[a],a,n)}return i},h.pairs=function(n) {for(var r=h.keys(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=[r[u],n[r[u]]];return e},h.invert=function(n) {for(var r={},t=h.keys(n),e=0,u=t.length;e<u;e++)r[n[t[e]]]=t[e];return r},h.functions=h.methods=function(n) {var r=[];for(var t in n)h.isFunction(n[t])&&r.push(t);return r.sort()};var R=function(c,l) {return function(n) {var r=arguments.length;if(l&&(n=Object(n)),r<2||null==n)return n;for(var t=1;t<r;t++)for(var e=arguments[t],u=c(e),i=u.length,o=0;o<i;o++) {var a=u[o];l&&void 0!==n[a]||(n[a]=e[a])}return n}};h.extend=R(h.allKeys),h.extendOwn=h.assign=R(h.keys),h.findKey=function(n,r,t) {r=d(r,t);for(var e,u=h.keys(n),i=0,o=u.length;i<o;i++)if(r(n[e=u[i]],e,n))return e};var q,K,z=function(n,r,t) {return r in t};h.pick=g(function(n,r) {var t={},e=r[0];if(null==n)return t;h.isFunction(e)?(1<r.length&&(e=y(e,r[1])),r=h.allKeys(n)):(e=z,r=M(r,!1,!1),n=Object(n));for(var u=0,i=r.length;u<i;u++) {var o=r[u],a=n[o];e(a,o,n)&&(t[o]=a)}return t}),h.omit=g(function(n,t) {var r,e=t[0];return h.isFunction(e)?(e=h.negate(e),1<t.length&&(r=t[1])):(t=h.map(M(t,!1,!1),String),e=function(n,r) {return!h.contains(t,r)}),h.pick(n,e,r)}),h.defaults=R(h.allKeys,!0),h.create=function(n,r) {var t=m(n);return r&&h.extendOwn(t,r),t},h.clone=function(n) {return h.isObject(n)?h.isArray(n)?n.slice():h.extend({},n):n},h.tap=function(n,r) {return r(n),n},h.isMatch=function(n,r) {var t=h.keys(r),e=t.length;if(null==n)return!e;for(var u=Object(n),i=0;i<e;i++) {var o=t[i];if(r[o]!==u[o]||!(o in u))return!1}return!0},q=function(n,r,t,e) {if(n===r)return 0!==n||1/n==1/r;if(null==n||null==r)return!1;if(n!=n)return r!=r;var u=typeof n;return("function"===u||"object"===u||"object"==typeof r)&&K(n,r,t,e)},K=function(n,r,t,e) {n instanceof h&&(n=n._wrapped),r instanceof h&&(r=r._wrapped);var u=p.call(n);if(u!==p.call(r))return!1;switch(u) {case"[object RegExp]":case"[object String]":return""+n==""+r;case"[object Number]":return+n!=+n?+r!=+r:0==+n?1/+n==1/r:+n==+r;case"[object Date]":case"[object Boolean]":return+n==+r;case"[object Symbol]":return s.valueOf.call(n)===s.valueOf.call(r)}var i="[object Array]"===u;if(!i) {if("object"!=typeof n||"object"!=typeof r)return!1;var o=n.constructor,a=r.constructor;if(o!==a&&!(h.isFunction(o)&&o instanceof o&&h.isFunction(a)&&a instanceof a)&&"constructor"in n&&"constructor"in r)return!1}e=e||[];for(var c=(t=t||[]).length;c--;)if(t[c]===n)return e[c]===r;if(t.push(n),e.push(r),i) {if((c=n.length)!==r.length)return!1;for(;c--;)if(!q(n[c],r[c],t,e))return!1}else{var l,f=h.keys(n);if(c=f.length,h.keys(r).length!==c)return!1;for(;c--;)if(l=f[c],!j(r,l)||!q(n[l],r[l],t,e))return!1}return t.pop(),e.pop(),!0},h.isEqual=function(n,r) {return q(n,r)},h.isEmpty=function(n) {return null==n||(w(n)&&(h.isArray(n)||h.isString(n)||h.isArguments(n))?0===n.length:0===h.keys(n).length)},h.isElement=function(n) {return!(!n||1!==n.nodeType)},h.isArray=t||function(n) {return"[object Array]"===p.call(n)},h.isObject=function(n) {var r=typeof n;return"function"===r||"object"===r&&!!n},h.each(["Arguments","Function","String","Number","Date","RegExp","Error","Symbol","Map","WeakMap","Set","WeakSet"],function(r) {h["is"+r]=function(n) {return p.call(n)==="[object "+r+"]"}}),h.isArguments(arguments)||(h.isArguments=function(n) {return j(n,"callee")});var D=n.document&&n.document.childNodes;"function"!=typeof/./&&"object"!=typeof Int8Array&&"function"!=typeof D&&(h.isFunction=function(n) {return"function"==typeof n||!1}),h.isFinite=function(n) {return!h.isSymbol(n)&&isFinite(n)&&!isNaN(parseFloat(n))},h.isNaN=function(n) {return h.isNumber(n)&&isNaN(n)},h.isBoolean=function(n) {return!0===n||!1===n||"[object Boolean]"===p.call(n)},h.isNull=function(n) {return null===n},h.isUndefined=function(n) {return void 0===n},h.has=function(n,r) {if(!h.isArray(r))return j(n,r);for(var t=r.length,e=0;e<t;e++) {var u=r[e];if(null==n||!i.call(n,u))return!1;n=n[u]}return!!t},h.noConflict=function() {return n._=r,this},h.identity=function(n) {return n},h.constant=function(n) {return function() {return n}},h.noop=function() {},h.property=function(r) {return h.isArray(r)?function(n) {return x(n,r)}:b(r)},h.propertyOf=function(r) {return null==r?function() {}:function(n) {return h.isArray(n)?x(r,n):r[n]}},h.matcher=h.matches=function(r) {return r=h.extendOwn({},r),function(n) {return h.isMatch(n,r)}},h.times=function(n,r,t) {var e=Array(Math.max(0,n));r=y(r,t,1);for(var u=0;u<n;u++)e[u]=r(u);return e},h.random=function(n,r) {return null==r&&(r=n,n=0),n+Math.floor(Math.random()*(r-n+1))},h.now=Date.now||function() {return(new Date).getTime()};var L={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},P=h.invert(L),W=function(r) {var t=function(n) {return r[n]},n="(?:"+h.keys(r).join("|")+")",e=RegExp(n),u=RegExp(n,"g");return function(n) {return n=null==n?"":""+n,e.test(n)?n.replace(u,t):n}};h.escape=W(L),h.unescape=W(P),h.result=function(n,r,t) {h.isArray(r)||(r=[r]);var e=r.length;if(!e)return h.isFunction(t)?t.call(n):t;for(var u=0;u<e;u++) {var i=null==n?void 0:n[r[u]];void 0===i&&(i=t,u=e),n=h.isFunction(i)?i.call(n):i}return n};var C=0;h.uniqueId=function(n) {var r=++C+"";return n?n+r:r},h.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var J=/(.)^/,U={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},V=/\\|'|\r|\n|\u2028|\u2029/g,$=function(n) {return"\\"+U[n]};h.template=function(i,n,r) {!n&&r&&(n=r),n=h.defaults({},n,h.templateSettings);var t,e=RegExp([(n.escape||J).source,(n.interpolate||J).source,(n.evaluate||J).source].join("|")+"|$","g"),o=0,a="__p+='";i.replace(e,function(n,r,t,e,u) {return a+=i.slice(o,u).replace(V,$),o=u+n.length,r?a+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":t?a+="'+\n((__t=("+t+"))==null?'':__t)+\n'":e&&(a+="';\n"+e+"\n__p+='"),n}),a+="';\n",n.variable||(a="with(obj||{}) {\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,"+"print=function() {__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{t=new Function(n.variable||"obj","_",a)}catch(n) {throw n.source=a,n}var u=function(n) {return t.call(this,n,h)},c=n.variable||"obj";return u.source="function("+c+") {\n"+a+"}",u},h.chain=function(n) {var r=h(n);return r._chain=!0,r};var G=function(n,r) {return n._chain?h(r).chain():r};h.mixin=function(t) {return h.each(h.functions(t),function(n) {var r=h[n]=t[n];h.prototype[n]=function() {var n=[this._wrapped];return u.apply(n,arguments),G(this,r.apply(h,n))}}),h},h.mixin(h),h.each(["pop","push","reverse","shift","sort","splice","unshift"],function(r) {var t=e[r];h.prototype[r]=function() {var n=this._wrapped;return t.apply(n,arguments),"shift"!==r&&"splice"!==r||0!==n.length||delete n[0],G(this,n)}}),h.each(["concat","join","slice"],function(n) {var r=e[n];h.prototype[n]=function() {return G(this,r.apply(this._wrapped,arguments))}}),h.prototype.value=function() {return this._wrapped},h.prototype.valueOf=h.prototype.toJSON=h.prototype.value,h.prototype.toString=function() {return String(this._wrapped)},"function"==typeof define&&define.amd&&define("underscore",[],function() {return h})}();

    /**
     * Aligns a pair of subtitles recursively
     * @param sub1 - 1st subtitle (subtitle's data property)
     * @param sub2 - 2nd subtitle
     * @param _i1 - index in sub1 to look from
     * @param _i2 - index in sub2 to look from
     * @param numAligned - num. of aligned captions so far (for stats)
     * @param numUnaligned - num. of unaligned captions so far
     * @param pairs - output pairs
     */
    // function tryAndAlign(sub1, sub2, _i1, _i2, numAligned, numUnaligned, pairs) {
    //     var i1 = _i1, i2 = _i2;
    //
    //     // make sure we're not out of range
    //     if(i1 < sub1.length && i2 < sub2.length) {
    //         s1 = sub1[i1].begin;
    //         s2 = sub2[i2].begin;
    //
    //         // check if timings are near enough to be merged
    //         var diff = Math.abs(s1 - s2);
    //         if (diff <= 1.5) { // 1 second precision
    //             pairs.push([JSON.parse(JSON.stringify(sub1[i1])), JSON.parse(JSON.stringify(sub2[i2]))]);
    //             // merge them
    //             if (s1 > s2) {
    //                 sub1[i1].begin = s2;
    //             } else {
    //                 sub2[i2].begin = s1;
    //             }
    //             // continue
    //             return tryAndAlign(sub1, sub2, i1 + 1, i2 + 1, numAligned + 2 - diff, numUnaligned, pairs);
    //         } else {
    //             // continue with next possible pair
    //             if (s1 < s2) {
    //                 pairs.push([JSON.parse(JSON.stringify(sub1[i1])), null]);
    //                 // merge subs if possible
    //                 if(i1-1 >= 0 && sub1[i1-1].text.length + sub1[i1].text.length < 180 &&
    //                     Math.abs(sub1[i1].begin - sub1[i1-1].begin) < 12) {
    //                     sub1[i1-1].text += ' ' + sub1[i1].text;
    //                     sub1.splice(i1, 1);
    //                     i1 -= 1;
    //                 }
    //                 return tryAndAlign(sub1, sub2, i1 + 1, i2, numAligned, numUnaligned + 1, pairs);
    //             } else {
    //                 pairs.push([null, JSON.parse(JSON.stringify(sub2[i2]))]);
    //                 // merge subs if possible
    //                 if(i2-1 >= 0 && sub2[i2-1].text.length + sub2[i2].text.length < 180 &&
    //                     Math.abs(sub2[i2].begin - sub2[i2-1].begin) < 12) {
    //                     sub2[i2-1].text += ' ' + sub2[i2].text;
    //                     sub2.splice(i2, 1);
    //                     i2 -= 1;
    //                 }
    //                 return tryAndAlign(sub1, sub2, i1, i2 + 1, numAligned, numUnaligned + 1, pairs)
    //             }
    //         }
    //     } else {
    //         // return stats (% match)
    //         return {
    //             match: numAligned / (numAligned + numUnaligned)
    //         };
    //     }
    // }

    /**
     * Aligns a pair of subtitles
     * @param sub1 - 1st subs
     * @param sub2 - 2nd subs
     * @param sync - k & n for 2nd sub
     * @returns {{sub1: first sub aligned, sub2: second sub aligned}}
     */


    // function alignSubs (sub1, sub2, sync){
    //     // make deep copy of subs
    //     var sub1Copy = JSON.parse(JSON.stringify(sub1));
    //     var sub2Copy = JSON.parse(JSON.stringify(sub2));
    //     var pairs = [];
    //     // align subs
    //     for(var ii in sub2Copy){
    //         sub2Copy[ii].begin *= sync.k;
    //         sub2Copy[ii].begin += sync.n;
    //     }
    //     if(sub1 && sub2){
    //         var stats = tryAndAlign(sub1Copy, sub2Copy, 0, 0, 0, 0, pairs);
    //     }
    //
    //     // update ids
    //     if(sub1){
    //         for(var i = 0; i < sub1Copy.length; i++){
    //             sub1Copy[i].id = i + 1;
    //         }
    //     }
    //     if(sub2){
    //         for(i = 0; i < sub2Copy.length; i++){
    //             sub2Copy[i].id = i + 1;
    //         }
    //     }
    //     return {
    //         sub1: sub1Copy,
    //         sub2: sub2Copy,
    //         match: stats.match,
    //         pairs: pairs
    //     }
    // };

    return obj;
}

////////// License related code //////////

var License = function(lln) {

    var obj = {};

    // watchout, I think this ID is in content.html too.
    const PADDLE_VENDOR_ID = 49703;
    const PADDLE_PRODUCT_ID = 564184;

    ////////////////////  Public API  ////////////////////

    obj.userEmail = false;
    obj.authTokenValid = false;
    obj.loggedIn = false;
    obj.proFeaturesEnabled = false;

    obj.userData = false;

    // functions:
    // obj.accessProFeature;    

    ////////////////////  end Public API  ////////////////////

    ///// Some general modal code

    // close a modal on clicking cross
    $(document).on('click', '.lln-modal', function(e){
        $(this).hide();
    });
    // something boring
    $(document).on('click', '.lln-modal-content', function(e){
        e.stopPropagation();
    });
    // no idea
    $(document).on('click', '[show-lln-modal]', function(e){
        e.preventDefault();
        $($(this).attr('show-lln-modal')).show();
    });
    //
    $(document).on('click', '.lln-close-modal', function(e){
        e.preventDefault();
        $(this).closest('.lln-modal').hide();
    });

    $(document).on('click', '.lln-force-link', function(e){
        e.preventDefault();
        window.open($(this).attr('href'),'_blank');
    });

    $(document).on('click', '.lln-close-popover', function(e){
        e.preventDefault();
        tippy.hideAll()
    });

    function closeModals() {
        $('.lln-modal').hide();
    }

    var _licenseStatus = 'NOT_SIGNED_IN';

    function setLicenseStatus(newValue) {

        checkTypes(arguments, "string");

        if(newValue === _licenseStatus) { return; }

        //2. Check newValue is valid. No? Console message then return.
        if(newValue !== "FULL" && newValue !== "TRIAL" && newValue !== "OVER" && newValue !== "NONE" && newValue !== "NOT_SIGNED_IN") {
            util.fuck("LIMAN: setLicenseStatus(): newValue invalid: " + newValue);
            return;
        }

        util.log(`LIMAN: setting _licenseStatus to ${newValue}`);

        //3. Set value = newValue
        _licenseStatus = newValue;

        //4. Update UI

        /*
                        <div>
                    <label >
                        <span class="lln-label-text">__MSG_signInStatus__</span>
                        <span id="lln-signin-status">__MSG_notSignedIn__</span>

                        <span class="lln-red-button lln-btn-open-login-modal">__MSG_signIn__</span>
                        <span style="display: none;" class="lln-cancel-button lln-btn-signOut">__MSG_signOut__</span>
                    </label>
                </div>

                <div>
                    <label >
                        <span class="lln-label-text">__MSG_mode__</span>
                        <span id="lln-license-status">__MSG_notSignedIn__</span>

                        <span style="display: none;" class="lln-cancel-button" id="lln-btn-manage-subscription">__MSG_manageSubscription__</span>
                    </label>
                </div>
        */
        
        if(_licenseStatus === "NOT_SIGNED_IN") {

            $(".lln-btn-open-login-modal").show();
            $(".lln-btn-signOut").hide();

            $("#lln-signin-status").text(lln_i18n.notSignedIn);
            obj.loggedIn = false;
        }
        else {

            $(".lln-btn-open-login-modal").hide();
            $(".lln-btn-signOut").show();

            var shortEmail;

            // Keep the length under control.
            if(obj.userEmail.length > 22) {
                shortEmail = obj.userEmail.slice(0,22) + "...";
            }
            else {
                shortEmail = obj.userEmail;
            }

            $("#lln-signin-status").text(shortEmail);
            obj.loggedIn = true;
        }

        if(_licenseStatus === "NOT_SIGNED_IN") { $("#lln-license-status").text(lln_i18n.notSignedIn); }
        if(_licenseStatus === "FULL") { $("#lln-license-status").text(lln_i18n.mode_pro); }
        if(_licenseStatus === "TRIAL") { $("#lln-license-status").text(lln_i18n.mode_trial); }
        if(_licenseStatus === "OVER") { $("#lln-license-status").text(lln_i18n.mode_free); }
        if(_licenseStatus === "NONE") { $("#lln-license-status").text(lln_i18n.mode_free); }

        if(_licenseStatus !== "NOT_SIGNED_IN") {
            $("#lln-btn-manage-subscription").show();
        }
        else {
            $("#lln-btn-manage-subscription").hide();
        }

        if(_licenseStatus === "FULL" || _licenseStatus === "TRIAL") {
            obj.proFeaturesEnabled = true;
            // fixme: add a 'Pro' label on LLN icon.
            $(".pro-enabled-label").show();
            $(".pro-feature-button").hide();
        }
        else {
            obj.proFeaturesEnabled = false;
            $(".pro-enabled-label").hide();
            $(".pro-feature-button").show();
        }

        //5. Perform other necesary operations

        // Reload the subs, so that machine translations etc. are available.
        // This also handles the MT translations UI stuff.
        lln.subMan.setupMTranslations();

        lln.savedItems.loadItems();
    }

    // successCallback gets called only after successful google sign-in,
    // and successful getUserData method to LLN BE.
    // Otherwise an appropriate message is shown to the user. 

    // Note: google login has no real meaning for the user, it's only with
    // getUserData that we confirm the user's licenseStatus and get their saved items.
    // So, configLogin(true) is only called after successful CF_RPC("getUserData"..
    // Also, login does $("#lln-modal-loading").show() during login process, if loud login.
    function login(loud, successCallback) {

        checkTypes(arguments, "boolean,function");

        util.log(`LIMAN: Login start, loud ${loud}`);

        if(loud) {
            $("#lln-modal-loading").show();
        }

        // First step is to do google Auth token stuff.

        CF_RPC("login", loud, function(result) {

            if(result.status === "success" && result.data.loginSuccess) {

                obj.authTokenValid = true;
                // fixme: double check this is the right email:
                obj.userEmail = result.data.email;
                util.log(`LIMAN: Firebase login succeeded for user: ${obj.userEmail}`);
                onLoginTasks(successCallback);
                return;
            }

            if(result.status !== "success") {
                util.fuck("LIMAN: Google Auth failed. result: " + JSON.stringify(result) );
                // detect error and continue in function
            }

            // This path happens before they set up an LLN account etc.

            obj.authTokenValid = false;
            obj.userEmail = false;
            
            // This is to cancel the 'loading' status
            lln.savedItems.loadItems();

            setLicenseStatus("NOT_SIGNED_IN");

            // fixme: call this, but wait a while?
            obj.proFeaturesEnabled = false;

            $("#lln-modal-loading").hide();

            // alert("Login failed."); // fixme, i18n. Not sure this ever shows though.
            // It would if there was a sign-out feature.
    
        });

    }

    // Listen for logout events
    // This is an unsolicited message, so handle it differently.
    window.addEventListener('message', function(event) {

        if(!event.data) { return; }
      
        if(!event.data.topic) { return; }
        
        if(event.data.topic !== "ps_logout") { return; }
      
        util.log(`LIMAN: Received logout message`);

        setLicenseStatus('NOT_SIGNED_IN');
        
      });

      // Remind once per 7 days?
      // 60s * 60mins * 24hrs * 7days
      // var _studyReminderInterval_s = 60*60*24*7;
      var _studyReminderInterval_s = 604800;

    $(document).on('lln_startupComplete', function() {

        chromeStorageGet( { lastActiveTime: false }, function(storageData) {

            const lastActiveTime = storageData.lastActiveTime;

            // In seconds
            const currentTime = Math.floor(Date.now() / 1000);

            if(!lastActiveTime) {
                // No value in storage, set initial value
                chromeStorageSet( { lastActiveTime: currentTime }, function() {} );
                util.log("TEST: Setting initial value for lastActiveTime.");
                return;
            }

            if(lln.setMan.getLingoActive()) {
                // LLN is active
                util.log("TEST: Nice, you are studying.");
                chromeStorageSet( { lastActiveTime: currentTime }, function() {} );
                // That's all
                return;
            }

            // valid lastActiveTime and LLN is not active, possibly show reminder

            const timeInterval_s = currentTime - lastActiveTime;

            util.log(`TEST: Time interval: ${timeInterval_s}`);

            if(timeInterval_s > _studyReminderInterval_s) {

                util.log(`TEST: Showing reminder!`);

                // Reset lastActiveTime
                chromeStorageSet( { lastActiveTime: currentTime }, function() {} );

                // Wait 5s for the waters to calm.
                setTimeout(showStudyReminder, 8000);
            }

        });
    });

    // On LLN set active
    $(document).on('lln_setActive', function() {

        const currentTime = Math.floor(Date.now() / 1000);
        util.log("TEST: Nice, you are studying.");
        chromeStorageSet( { lastActiveTime: currentTime }, function() {} );
        // That's all
        return;

    });

    function showRateUsReminder() {
        tippy.hideAll()
        document.getElementById('lln-rate-us-popover')._tippy.show();

    }

    function showStudyReminder() {
        tippy.hideAll()
        document.getElementById('lln-study-reminder-popover')._tippy.show()
/*
        var attemptCounter = 0;

        function tryShowPopover() {

            var $netflixElement = $("#netflixElement");

            if(netflixElement.length > 1) {
                // render popover here
            }
            else {
                if(attemptCounter < 10) {
                    attemptCounter += 1;
                    setTimeout(tryShowPopover, 1000);
                }
            }
        }

        tryShowPopover();
*/
    }

    // Silent login at startup

    login(false, function() {

        util.log(`LIMAN: Silent login success.`);

    });

    // Wait till extension is active.
    $(document).on('lln_setActive', function() {

        // Show update modal on update
        CF_RPC("showOnUpdateMessage", {}, function(response) { 
            if(response.data.showOnUpdateMessage) {

                configAndShowUpdateModal();
            }
        });

    });


    // Use later for welcome modal:
    /*
            // Wait for Paddle script to load (dynamically)
            var timeoutCheck = 0;
            function checkAndShow() {
                if(Paddle) {
                    configAndShowWelcomeModal();
                }
                else if (timeoutCheck < 10000) { // wait up to 10s
                    timeoutCheck += 100;
                    setTimeout(checkAndShow, 100);
                }
            }
            checkAndShow();
    */

    function onLoginTasks(successCallback) {

        checkTypes(arguments, "function");

        // Get new user data
        CF_RPC("getUserData", {savedItemKeysOnly: true}, function(result) {
/*
            // List from updateUserData:
            userInfo.id // Google ID
            userInfo.email // Get this from other functions
            options.licenseStatus // This lives on BE now.
            options.licenseCreated // This lives on BE now.
            Options.referer // Not using at the moment.
            options.userCountry // Not using at the moment.
            options.userLanguage // Not using at the moment.
            options.subCount 
            options.pauseCount 
            extensionVersion
            navigator.userAgent
            
*/

            if(result.status !== "success") {
                util.fuck(`CF_RPC("getUserData"..: result.status !== "success". result: ${JSON.stringify(result)}`);
                // Logged in, but couldn't get userData.
                // We don't know payment status, let's leave current licenseStatus.
                util.userError("Failed to obtain user data from server. Please try reloading the page, or else contact LLN developers.");
                setLicenseStatus("NOT_SIGNED_IN");
                $("#lln-modal-loading").hide();
                return;
            }

            // Check licenseStatus field is there at least.
            if(!result.data.licenseStatus) {
                util.fuck(`CF_RPC("getUserData"..: !result.data.licenseStatus result: ${JSON.stringify(result)}`);
                // Logged in, but couldn't get userData.
                // We don't know payment status, let's leave current licenseStatus.
                util.userError("Failed to obtain user data from server. Please try reloading the page, or else contact LLN developers.");
                setLicenseStatus("NOT_SIGNED_IN");
                $("#lln-modal-loading").hide();
                return;
            }

            // save to the object, to access some more info later.
            obj.userData = result.data;

            util.log("LIMAN: User logged in.");
            util.log(`LIMAN: server license status: ${obj.userData.licenseStatus}`);
            util.log(`LIMAN: payment provider: ${obj.userData.paymentProvider}`);

            chromeStorageGet( { licenseStatus: 'NONE' }, function(storageData) {

                // Wow callback hell.

                ///// Figure out if trial just ended.
                let localLicenseStatus = storageData.licenseStatus;

                // Set the new version for next time
                CF_RPC("chromeStorageSet", { licenseStatus: obj.userData.licenseStatus }, function() {} );
                
                let trialJustEnded = false;
                if(obj.userData.licenseStatus === "OVER" && localLicenseStatus === 'TRIAL') {
                    trialJustEnded = true;
                }

                util.log(`LIMAN: Trial just ended: ${trialJustEnded}`);

                ///// Just do some checks to make sure some required data is present.
                if(obj.userData.licenseStatus === "FULL") {

                    if(!obj.userData.paymentProvider) {
                        util.fuck(`userData.licenseStatus === "FULL" but !userData.paymentProvider`); 
                    }
    
                    if(obj.userData.paymentProvider === "PADDLE") {
                        if(!obj.userData.cancel_url) { 
                            util.fuck(`obj.userData.paymentProvider === "PADDLE" but !userData.cancel_url`); 
                        }
    
                        if(!obj.userData.update_url) {
                            util.fuck(`obj.userData.paymentProvider === "PADDLE" but !userData.update_url`); 
                        }
                    }
                }

                ///// Set the new licenseStatus and do related tasks
                $("#lln-modal-loading").hide();
                setLicenseStatus(obj.userData.licenseStatus);

                ///// If required, request user to update payment info.
                if(obj.userData.paymentProvider === "PADDLE" && obj.userData.payment_failed) {
                    // fuck whatever you were doing
                    // no money no honey
                    configAndShowUpdatePaymentModal();
                    return;
                }

                ///// If trial just ended, elegantly degrade and show payment modal.
                if(trialJustEnded) {
                    
                    if(lln.setMan.getShowMT() && !lln.setMan.getShowHT()) {
                        lln.setMan.setShowHT(true);
                    }
    
                    configAndShowPrePaymentModal();
                    return;
                }

                ///// All good, continue.
                successCallback();

            });

        });
    }

    ////////// Access Pro Feature Function! //////////

    $(document).on('click', '.pro-feature-button', function(e) {
        obj.accessProFeature();
        return false;
    });

    obj.accessProFeature = function() 
    {
        // 		            Logged in		Not Logged in
        // Has access    	allow			log in
        // No access	    pro modal		pro modal

        if(obj.loggedIn === false) {
            closeModals(); // Hide any open modal
            // This modal will show trial/payment modal in turn, if required.
            $("#lln-modal-access-pro-feature-login").show(); 
            return false; // ACCESS WAS DENIED
        }
        if(_licenseStatus === "NONE") {
            configAndShowRequestTrialModal();
            return false; // ACCESS WAS DENIED
        }
        else if(_licenseStatus === "OVER") {
            // Need to pay $$ motherfucker
            configAndShowPrePaymentModal();
            return false; // ACCESS WAS DENIED
        }
        else {
            return true;
        }
    }

    ////////// Modal text //////////

    var _price = "$4Bn"

function tt(text) {
    return `<span class="tippy lln-info-btn" data-tippy-content="${text}">
    <span class="svg-span svg-info-tooltip"></span>
</span>`
}

function proFeatures_html() {
return `<p>${lln_i18n.proFeatures_line1_string}</p>
<ul>
<li>${lln_i18n.proFeatures_line2_string} ${tt(lln_i18n.proFeatures_tt2_string)}</li>
<li>${lln_i18n.proFeatures_line3_string} ${tt(lln_i18n.proFeatures_tt3_string)}</li>
<li>${lln_i18n.proFeatures_line4_string} ${tt(lln_i18n.proFeatures_tt4_string)}</li>
<li>${lln_i18n.proFeatures_line5_string} ${tt(lln_i18n.proFeatures_tt5_string)}</li>
</ul>
`
}

/// Logout button

    $(document).on('click', '.lln-btn-signOut', function(e) {
        e.preventDefault();
        CF_RPC("signOut", {}, function(){});
    });

    ////////// Login Modal Stuff //////////

    // This modal can be opened by:
    // obj.accessProFeature
    // or the button in the setting, present when the user isn't logged in:

    $(document).on('click', '.lln-btn-open-login-modal', function(e) {
        e.preventDefault();
        closeModals(); // Hide any open modal
        $("#lln-modal-login").show();
    });

    $(document).on('click', '.lln-login', function(e) {
        e.preventDefault();

        closeModals();

        login(true, function() {

            util.log(`LIMAN: login_modal_onLogin_callback`);

            closeModals(); // Hide any open modal

        });
        
    });

    ////////// Access Pro Feature //////////

    // Log the user in
    // Then show them trial or prepayment modal, if necessary.

    $(document).on('click', '#lln-btn-access-pro-feature-login', function(e) {
        e.preventDefault();

        closeModals();

        login(true, function() {

            util.log(`LIMAN: login_modal_onLogin_callback`);

            $("#lln-modal-loading").show();

            if(_licenseStatus === "NONE") {
                configAndShowRequestTrialModal();
                return; // ACCESS WAS DENIED
            }
            else if(_licenseStatus === "OVER") {
                // Need to pay $$ motherfucker
                configAndShowPrePaymentModal();
                return; // ACCESS WAS DENIED
            }
            else {
                // FULL or TRIAL
                closeModals(); // Hide any open modal
                return;
            }

        });
        
    });

    ////////// Request Trial Modal Stuff //////////

    // Trial modal is opened by liMan.accessProFeature()

    function configAndShowRequestTrialModal(doYouLike) {

        // reset usuage
        obj.activity("RESET");

        Paddle.Product.Prices(PADDLE_PRODUCT_ID, function(prices) {
            
            _price = prices.price.gross;

            var bodyHTML = 
`<img src="chrome-extension://${window.__IS_YOUTUBE ? 'jkhhdcaafjabenpmpcpgdjiffdpmmcjb' : 'hoombieeljmmljlkjmnheibnpciblicm'}/images/tt.png" style="width: 300px; margin: auto; display: block;" />
${doYouLike ? `<p>${lln_i18n.doYouLikeOurExtension}</p>` : ''}
${proFeatures_html()}
<p>${lln_i18n.price_string} ${_price}</p>
<p>${lln_i18n.freeTrial7_line_string}</p>
<p>${lln_i18n.noCharge}</p>

<div class="lln-modal-buttons right">
    <a href="#" class="lln-btn lln-close-modal secondary">${lln_i18n.notNow_btn_string}</a>
    <a href="#" class="lln-btn lln-modal-request-trial-btn-continue">${lln_i18n.tryForFree}</a>
</div>`

            $('#lln-modal-request-trial-body').html(bodyHTML);
            closeModals(); // Hide any open modal
            $('#lln-modal-request-trial').show();

        });
    }

    $(document).on('click', '.lln-modal-request-trial-btn-continue', function(e) {
        e.preventDefault();

        closeModals(); // Hide any open modal

        login(true, function() {

            util.log(`LIMAN: request_trial_modal_onLogin_callback`);
    
            if(_licenseStatus !== "NONE") {
                util.fuck( `_licenseStatus ${_licenseStatus} in lln-modal-request-trial.`);
                util.userError("LLN could not activate trial. Please try reloading the page.");
                closeModals(); // Hide any open modal
                // call it a day.
                return;
            }

            $("#lln-modal-loading").show();

            CF_RPC("activateTrial", {}, function(result) {

                closeModals(); // Hide any open modal
                //$("#lln-modal-loading").hide();
    
                if(result.status !== "success") { // fixme
                    util.fuck( `CF_RPC("activateTrial"..: result.status !== "success". result: ${JSON.stringify(result)}`);
                    util.userError("LLN error communicating with server. Please try reloading the page.");
                    return;
                }
    
                if(result.data.licenseStatus === "TRIAL") {
                    util.log(`LIMAN: trial activated.`);
    
                    // Enable MT as courtesy
                    lln.setMan.setShowMT(true);
    
                    setLicenseStatus("TRIAL");

                    // Set the new version for next time
                    CF_RPC("chromeStorageSet", { licenseStatus: "TRIAL" }, function() {} );
    
                    
                    configAndShowTrialBegunModal();
                }
                else {
                    util.fuck( `CF_RPC activateTrial. Server returned didn't return TRIAL: ${JSON.stringify(result)}`);
                    util.userError("LLN trial could not be activated. Please try reloading the page.");
                }
            });

        });
        
    });

    function configAndShowTrialBegunModal() {

        var bodyHTML = 
`<p>${lln_i18n.trialBegunModal_body_string}</p>

<div class="lln-modal-buttons ">
    <a href="#" class="lln-btn lln-close-modal">${lln_i18n.ok_btn_string}</a>
</div>`

        $('#lln-modal-request-trial-body').html(bodyHTML);
        closeModals(); // Hide any open modal
        $('#lln-modal-request-trial').show();
    }

    ////////// Welcome modal stuff //////////

    function configAndShowWelcomeModal() {

        Paddle.Product.Prices(PADDLE_PRODUCT_ID, function(prices) {

            _price = prices.price.gross;

            var bodyHTML = 
// fimxe: extension id hardcoded, can use CF_RPC("getURL", ..)

`<img src="chrome-extension://${window.__IS_YOUTUBE ? 'jkhhdcaafjabenpmpcpgdjiffdpmmcjb' : 'hoombieeljmmljlkjmnheibnpciblicm'}/images/tt.png" style="width: 300px; margin: auto; display: block;" />
<p>${lln_i18n.welcomeModal_line1_string}</p>
<p>${lln_i18n.welcomeModal_line2_string}</p>
<ul>
<li>${lln_i18n.welcomeModal_line3_string}</li>
<li>${lln_i18n.welcomeModal_line4_string}</li>
<li>${lln_i18n.welcomeModal_line5_string}</li>
</ul>
${proFeatures_html()}
<p>${lln_i18n.welcomeModal_line6_string}</p>

<p>${lln_i18n.freeTrial7_line_string}</p>
<p>${lln_i18n.noCharge}</p>

<div class="lln-modal-buttons right">
    <a href="#" class="lln-btn lln-close-modal secondary" target="_blank">${lln_i18n.notNow_btn_string}</a>
    <a href="#" class="lln-btn lln-modal-request-trial-btn-continue">${lln_i18n.tryForFree}</a>
</div>`

            $('#lln-modal-welcome-body').html(bodyHTML);

            closeModals(); // Hide any open modal
            $('#lln-modal-welcome').show();
        });
    }

    ////////// Update modal stuff //////////

    function configAndShowUpdateModal() {

        const turtleImg = `
<div style="height: 110px; display: flex; margin-bottom: -10px;">
<img class="spinning-turtle" src="chrome-extension://${window.__IS_YOUTUBE ? 'jkhhdcaafjabenpmpcpgdjiffdpmmcjb' : 'hoombieeljmmljlkjmnheibnpciblicm'}/images/rand_t.png" style="width: 120px; margin: auto; display: block;" />
</div>`;
        const closeBtn = `
<div class="lln-modal-buttons right">
    <a href="#" class="lln-btn lln-close-modal secondary" target="_blank">${lln_i18n.close}</a>
</div>`;

            var bodyHTML = {
"en": ////////////////////////////////////////
`
${turtleImg}
<p>
NEW! WOW! There is now an internet forum! You can chat with other LLN fans, and make new friends! Talk about your favorite movies, the best way to study.
</p>
<p>
<a style="color: #75ccff; text-decoration: underline;" href="http://forum.languagelearningwithnetflix.com/" target="_blank">LLN Web Forum</a>
</p>
${closeBtn}
`,
 "zh_TW": ////////////////////////////////////////
     `
${turtleImg}
<p>
新！ 哇！ 現在有一個互聯網論壇！ 您可以與其他用戶聊天，並結交新朋友！ 談論您最喜歡的電影，以及最好的學習方式。
</p>
<p>
<a style="color: #75ccff; text-decoration: underline;" href="http://forum.languagelearningwithnetflix.com/" target="_blank">LLN Web Forum</a>
</p>
${closeBtn}
`,
 "ja": ////////////////////////////////////////
     `
${turtleImg}
<p>
新しい！ うわー！ 現在、インターネットフォーラムがあります！ 他のユーザーとチャットし、新しい友達を作ることができます！ お気に入りの映画、そして勉強するための最良の方法について話してください。
</p>
<p>
<a style="color: #75ccff; text-decoration: underline;" href="http://forum.languagelearningwithnetflix.com/" target="_blank">LLN Web Forum</a>
</p>
${closeBtn}
`,
 "ko": ////////////////////////////////////////
     `
${turtleImg}
<p>
새로운! 와우! 인터넷 포럼이 있습니다! 다른 사용자와 채팅하고 새로운 친구를 사! 수 있습니다! 좋아하는 영화와 공부하는 가장 좋은 방법에 대해 이야기하십시오.
</p>
<p>
<a style="color: #75ccff; text-decoration: underline;" href="http://forum.languagelearningwithnetflix.com/" target="_blank">LLN Web Forum</a>
</p>
${closeBtn}
`,
 "th": ////////////////////////////////////////
     `
${turtleImg}
<p>
ใหม่! ว้าว! ขณะนี้มีฟอรัมอินเทอร์เน็ต! คุณสามารถแชทกับผู้ใช้อื่นและทำความรู้จักกับเพื่อนใหม่! พูดคุยเกี่ยวกับภาพยนตร์ที่คุณชื่นชอบและวิธีที่ดีที่สุดในการศึกษา
</p>
<p>
<a style="color: #75ccff; text-decoration: underline;" href="http://forum.languagelearningwithnetflix.com/" target="_blank">LLN Web Forum</a>
</p>
${closeBtn}
`,
            };

            $('#lln-modal-update-body').html(bodyHTML[lln_i18n.langCode] || bodyHTML['en']);

            closeModals(); // Hide any open modal
            // show update modal, disabled for development
            if (!util.dev) {
                $('#lln-modal-update').show();
            }
    }

    ////////// Pre Payment/Trial over Modal Stuff //////////

    // This modal shows info about pro mode, and the button does login,
    // then shows the actual payment modal.
    // This modal can only show after the trial is over, when licenseStatus is OVER
    // It could be called 'TRIAL OVER MODAL'

/*
    // Needed?
    // 'Show pro info' button in login modal
    $(document).on('click', '#lln-pro-info-button', function() {
        configAndShowPrePaymentModal();
    });
*/

    // configAndShowPrePaymentModal is called by:
    // obj.accessProFeature()
    // and also when licenseStatus moves from TRIAL to OVER
    // during silent login and Login modal login.

    function configAndShowPrePaymentModal(doYouLike) {

        // reset usuage
        obj.activity("RESET");

        /*
        // extra check
        if(_licenseStatus !== "OVER") {
            util.fuck(`configAndShowPrePaymentModal, _licenseStatus: ${_licenseStatus}`);
            util.userError("Nasty error that should never ever happen.");
            closeModals(); // Hide any open modal
            return;
        }
*/
        Paddle.Product.Prices(PADDLE_PRODUCT_ID, function(prices) {

            _price = prices.price.gross;

            var bodyHTML = 
`<img src="chrome-extension://${window.__IS_YOUTUBE ? 'jkhhdcaafjabenpmpcpgdjiffdpmmcjb' : 'hoombieeljmmljlkjmnheibnpciblicm'}/images/tt.png" style="width: 300px; margin: auto; display: block;" />
<p>${doYouLike ? lln_i18n.doYouLikeOurExtension : lln_i18n.prePaymentModal_line1_string}</p>
${proFeatures_html()}
<p>${lln_i18n.price_string} ${_price}</p>

<div class="lln-modal-buttons ">
        <a href="#" class="lln-btn secondary" id="lln-btn-pay-with-paddle">
            <svg width="70px" height="27px" viewBox="0 0 1336 500" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;"><g><path d="M225.703,129.366c-24.871,-20.318 -59.64,-29.541 -100.552,-26.684c-18.691,1.306 -62.378,11.051 -83.726,15.894c-22.786,5.169 -28.957,17.604 -31.873,32.666l-9.552,49.357c0,0 43.633,-14.929 70.521,-21.474l-20.734,27.701c-4.672,6.24 -8.194,16.833 -8.194,24.64l0,268.534l36.787,-14.432c20.988,-7.613 30.492,-26.349 30.492,-44.721l0,-63.042c14.268,5.598 32.149,8.006 50.918,6.697c34.394,-2.404 64.427,-18.819 84.566,-46.22c20.55,-27.955 29.848,-65.074 26.892,-107.344c-3.167,-45.296 -18.491,-79.47 -45.545,-101.572Zm774.01,247.688l-27.989,0c-13.199,0 -25.499,-8.748 -30.561,-20.684c-16.022,16.967 -38.616,25.544 -67.408,25.544c-32.403,0 -59.302,-12.698 -77.794,-36.724c-18.126,-23.549 -27.707,-57.713 -27.707,-98.799c0,-42.886 9.444,-78.733 27.312,-103.667c18.666,-26.047 46.038,-39.815 79.158,-39.815c23.383,0 45.718,8.403 61.524,22.386l0,-125.295l22.393,0c22.646,0 41.072,18.422 41.072,41.067l0,335.987Zm-250.012,0l-27.989,0c-13.199,0 -25.499,-8.748 -30.562,-20.684c-16.021,16.967 -38.616,25.544 -67.407,25.544c-32.402,0 -59.303,-12.698 -77.794,-36.724c-18.125,-23.549 -27.707,-57.713 -27.707,-98.799c0,-42.886 9.445,-78.733 27.313,-103.666c18.665,-26.048 46.037,-39.816 79.156,-39.816c23.384,0 45.719,8.403 61.525,22.386l0,-125.295l22.392,0c22.647,0 41.073,18.422 41.073,41.067l0,335.987Zm-452.758,-190.682c0,0 68.896,-28.725 102.322,-28.725c8.928,0 35.181,0.002 37.802,41c-15.582,1.492 -38.995,5.076 -62.873,11.289c-57.073,14.575 -89.806,48.352 -89.806,92.669c0,43.927 35.583,78.337 81.009,78.337c34.345,0 58.472,-7.306 76.286,-23.423c6.799,11.379 20.128,19.54 33.201,19.54l25.975,0l0,-190.399c0,-48.529 -41.35,-83.72 -99.656,-83.72c0,0 -6.038,0 -6.091,0.048c0,0 -20.296,-0.075 -48.945,7.585c0,0 -39.527,10.112 -43.357,35.85c-3.83,25.738 -5.87,39.948 -5.87,39.948l0.003,0.001Zm932.647,139.141c-21.63,0 -46.29,-10.846 -53.77,-34.459c19.93,-1.936 56.73,-6.061 89.29,-19.97c44.31,-18.921 66.77,-49.378 66.77,-90.527c0,-50.403 -35.52,-79.31 -97.45,-79.31c-37.12,0 -70.39,14.562 -93.66,41.003c-22.42,25.464 -34.77,60.79 -34.77,99.47c0,85.45 46.99,138.531 122.62,138.531c26.78,0 61.62,-9.026 63,-9.389c17.75,-4.404 28.31,-15.022 32.29,-32.462l11.83,-51.883c0,0 -42.19,38.996 -106.15,38.996Zm-141.62,-127.153c-0.02,-77.397 -0.04,-156.758 -0.04,-156.881c0,-21.755 -15.82,-41.456 -41.15,-41.456l-22.331,-0.014c0,0 0.031,90.379 0.051,178.765c0.02,77.397 0.05,156.759 0.05,156.882c0,21.755 15.82,41.455 41.15,41.455l22.32,0.014c0,0 -0.03,-90.378 -0.05,-178.765Zm-148.45,40.168c0,59.651 -17.182,88.647 -52.527,88.647c-47.95,0 -53.496,-47.822 -53.496,-83.793c0,-25.194 4.93,-83.793 50.592,-83.793c48.229,0 55.431,49.458 55.431,78.939Zm-252.604,0c0,59.651 -17.182,88.647 -52.528,88.647c-47.952,0 -53.497,-47.822 -53.497,-83.793c0,-25.194 4.93,-83.793 50.594,-83.793c48.229,0 55.431,49.458 55.431,78.939Zm-249.638,50.484c0,18.77 -27.456,37.193 -55.431,37.193c-16.489,0 -34.143,-10.264 -34.143,-25.543c0,-15.288 5.328,-25.857 32.64,-34.664c20.98,-7.017 40.24,-10.66 56.934,-13.082l0,36.096Zm-284.128,32.062c-18.403,1.291 -33.64,-3.002 -44.278,-12.419l0,-138.277c12.755,-2.679 22.118,-4.339 26.11,-4.619c40.797,-2.853 65.961,21.287 69.105,66.22c2.059,29.44 -5.938,85.947 -50.937,89.095Zm1115.27,-139.809c0,36.725 -51.85,50.397 -98.72,55.248c2.55,-49.022 28.08,-81.381 65.12,-81.381c12.99,0 33.6,7.095 33.6,26.133Z" style="fill:#445a7d;"/></g></svg><br>
            <div>${lln_i18n.payWithPaddle_btn_string}</div>
        </a>
</div>`

            $('#lln-modal-pre-payment-body').html(bodyHTML);
            closeModals(); // Hide any open modal
		    $('#lln-modal-pre-payment').show();
        });
    }

    // Start Webstore checkout on button press
    $(document).on('click', '#lln-btn-pay-with-paddle', function(e) {
        e.preventDefault();
        // fixme: check we are logged in?
    
        // Note: trial must be finished in this case.
        if(_licenseStatus !== "OVER") {
            util.fuck(`pre_payment_modal_onLogin_callback, _licenseStatus is ${_licenseStatus}`);
            util.userError("Nasty error that should never ever happen.");
            closeModals(); // Hide any open modal
            return;
        }

        startPaddlePaymentFlow();
    });

    ////////// Payment pending modal //////////

    function configAndShowPaymentPendingModal() {

        var bodyHTML = 

`<p>${lln_i18n.paymentSuccessfulPaddleMessage_line_string}</p>

<div class="lln-modal-buttons right">
<a href="#" class="lln-btn lln-close-modal">${lln_i18n.ok_btn_string}</a>
</div>`

        $('#lln-modal-payment-pending-body').html(bodyHTML);

        closeModals(); // Hide any open modal
        $('#lln-modal-payment-pending').show();

    }

    ////////// Payment supporting functions //////////
    
    function startPaddlePaymentFlow() {

        if(!obj.loggedIn) {
            alert("You are no longer signed in to LLN. Please refresh the window.");
        }

        $("#lln-modal-loading").show();

        // let's get fresh userData
        onLoginTasks(function() {

            if(obj.userData.paymentPending === true) {
                configAndShowPaymentPendingModal();
                return;
            }

            Paddle.Setup({ vendor: PADDLE_VENDOR_ID });

            Paddle.Checkout.open({ 
                product: PADDLE_PRODUCT_ID,
                title: "LLN 'Pro'",
                message: lln_i18n.subscriptionToProFeatures,
                email: obj.userEmail,
                // disableLogout: true,
                passthrough: { googleEmail: obj.userEmail },
                loadCallback: function() { 
                    util.log("LIMAN: Paddle Loaded"); 
                },
                successCallback: function(data) {
                    var checkoutId = data.checkout.id;
    
                    util.log("LIMAN: PADDLE DATA ", data);
    
                    util.log("LIMAN: Paddle Checkout Success");
    
                    closeModals();
    
                    $("#lln-modal-loading").show();
    
                    // Wait 8s to make sure firebase got the webhook, and will
                    // allow g2 request.
                    setTimeout(function() {
    
                        $("#lln-modal-loading").hide();
    
                        configAndShowPaymentSuccessModal("PADDLE");
    
                        lln.setMan.setShowMT(true);
                        // should get and set the cancel_url from the server.
                        onLoginTasks(function() {});
                        // fixme: on cancel modal close too.
                    }, 8000);
    
                    /*
                    Paddle.Order.details(checkoutId, function(data) {
                      // Order data, downloads, receipts etc... available within 'data' variable.
                      util.log(data);
                    });
                    */
                },
                closeCallback: function() {
                    util.log("LIMAN: Paddle Checkout Closed"); 
                }
            });
        })
    }

    function configAndShowPaymentSuccessModal(paymentProvider) {

        checkTypes(arguments, "string");

        var bodyHTML = `
            <p>${lln_i18n.paymentSuccessful_line1_string}</p>
            <p>${lln_i18n.paymentSuccessful_line2_string}</p>
        `;

        if(paymentProvider === "PADDLE") {
            bodyHTML += `<p>${lln_i18n.paymentSuccessfulPaddleMessage_line_string}</p>`
        }

        bodyHTML+= `
            <div class="lln-modal-buttons">
                <a href="#" class="lln-btn lln-close-modal">${lln_i18n.ok_btn_string}</a>
            </div>
        `;
        $("#lln-modal-payment-success-body").html(bodyHTML);
        closeModals();
        $("#lln-modal-payment-success").show();
    }

    ////////// Cancel subscription modal stuff //////////

    $(document).on('click', '#lln-btn-manage-subscription', function(e) {
        e.preventDefault();

        closeModals();

        login(true, function() {

            if(_licenseStatus === "FULL" || _licenseStatus === "TRIAL") {
                // just a cancel button
                configAndShowManageSubscriptionModal();
                // fixme: add subscription start date, some more info, your subscription is currently active etc.
            }
            if(_licenseStatus === "OVER") { 
                configAndShowPrePaymentModal(); 
            }
            if(_licenseStatus === "NONE") { 
                configAndShowRequestTrialModal();
            }
        });
    });

    function configAndShowManageSubscriptionModal() {

        // This needs to handle FULL and TRIAL

        // fixme: i18n
        var bodyHTML = `<p>${lln_i18n.signInStatus} '${obj.userEmail}'.</p>`;

        if(_licenseStatus === "FULL") {
            
            bodyHTML += `<p>${lln_i18n.subscriptionActive}</p>`;
            // Fixme: add monthly price,
            // Next payment date
            // etc.

            if(obj.userData.paymentProvider === "PADDLE") {
                if(!obj.userData.cancel_url) {
                    util.fuck(`configAndShowManageSubscriptionModal(): obj.userData.paymentProvider === "PADDLE" but !result.data.cancel_url`);
                }
    
                bodyHTML += 
                `<div class="lln-modal-buttons ">
                    <a href="${obj.userData.cancel_url}" class="lln-btn" id="lln-btn-cancel" style="background: #b31d1d;" target="_blank">${lln_i18n.cancelSubscription_btn_string}</a>
                </div>`
            }
            else {
                util.fuck(`configAndShowManageSubscriptionModal(): obj.userData.paymentProvider: ${obj.userData.paymentProvider}, WTF?`);
                util.userError("Error communicating with server, please try again later.");
                return;
            }

            bodyHTML +=
                `<div class="lln-modal-buttons ">
                    <a href="#" class="lln-btn lln-close-modal">${lln_i18n.close}</a>
                </div>`
        }

        else if(_licenseStatus === "TRIAL") {


            // giving odd values, fix properly later.
            /*
            if(obj.userData && obj.userData.trialStarted) {

                var d = new Date();
                var timeNow = d.getTime();
                const trialPeriod = 1000 * 60 * 60 * 24 * 3;

                const remaining = obj.userData.trialStarted + trialPeriod - timeNow;

                if(remaining > 0) {
                    const hours = Math.round( remaining / (1000 * 60 * 60) );

                    // fixme: i18n
                    bodyHTML += `<p>Trial expires in ${hours} hours.</p>`;
                }
                else {
                    bodyHTML += `<p>Trial has expired. Please refresh the browser window.</p>`;
                }
            }
            */

            bodyHTML += `<p>${lln_i18n.trialBegunModal_body_string}</p>
<p>${lln_i18n.noCharge}</p>`;
    
        }

        $('#lln-modal-manage-subscription-body').html(bodyHTML);
        closeModals(); // Hide any open modal
        $('#lln-modal-manage-subscription').show();

    }

    ////////// Update payment modal stuff //////////

    function configAndShowUpdatePaymentModal() {

        var bodyHTML =

`<p>${lln_i18n.problemWithPayment_line1_string}</p>
<p>${lln_i18n.problemWithPayment_line2_string}</p>

<div class="lln-modal-buttons ">
    <a href="${obj.userData.update_url}" class="lln-btn" id="lln-btn-update" target="_blank">${lln_i18n.updatePayment_btn_string}</a>
</div>`

        $('#lln-modal-update-payment-body').html(bodyHTML);
        closeModals(); // Hide any open modal
        $('#lln-modal-update-payment').show();
    }

    ////////// Bonus function //////////

    var _i = 0;

    obj.showNextModal = function() {

        _i += 1;

        switch(_i) {
            case 1:
                configAndShowWelcomeModal();
                break;
            case 2:
                configAndShowUpdateModal();
                break;
            case 3:
                configAndShowRequestTrialModal(true);
                break;
            case 4:
                configAndShowTrialBegunModal();
                break;
            case 5:
                configAndShowPrePaymentModal(true);
                break;
            case 6:
                configAndShowPaymentPendingModal();
                break;
            case 7:
                configAndShowPaymentSuccessModal("PADDLE");
                break;
            case 8:
                configAndShowManageSubscriptionModal();
                break;
            case 9:
                configAndShowUpdatePaymentModal();
                break;
            case 10:
                closeModals();
                $("#lln-modal-login").show();
                break;
            default:
                _i = 0;
                obj.showNextModal();
        }
    }

    ////////// User temperature //////////

    // On mouse clicks
    $(document).on('click', function() {

        if(__LLN_ACTIVE) {
            obj.activity("INPUT");
        }
    });

    // On keypresses
    $(document).on('keydown', function() {

        if(__LLN_ACTIVE) {
            obj.activity("INPUT");
        }
    });

    // create a mutex object
    var activity_mutex = david_mutex();

    var _activityCounter = 0;

    obj.activity = function(eventName) {

        checkTypes(arguments, "string");

        if(_licenseStatus === "TRIAL" || _licenseStatus === "FULL") { return; }

        _activityCounter +=1;

        // Every ten events
        if(_activityCounter % 10 !== 0) { return; }

        activity_mutex.acquire(function() {

            chromeStorageGet( { activity_lastEventTime: false, activity_lastPoints: false }, function(storageData) {

                var activity_lastEventTime = storageData.activity_lastEventTime;
                var activity_lastPoints = storageData.activity_lastPoints;

                const currentTime = Math.floor(Date.now() / 1000);
                
                if(activity_lastEventTime === false || activity_lastPoints === false ) {
                    // No previous data
                    var timePassed = 0;
                    var currentPoints = 0;
                }
                else {

                    var timePassed = currentTime - activity_lastEventTime;
                    var currentPoints = activity_lastPoints;
                }

                switch(eventName) {
                    case "INPUT":
                        // Stop counting time after 40s of disactivity.
                        // 1 pt per 1 min
                        currentPoints += Math.min(timePassed, 60) / 60; 
                        break;
                    case "DICT":
                        // currentPoints += 10;
                        break;
                    case "RESET":
                        currentPoints = 0;
                        break;
                    case "NULL":
                        break;
                    default:
                        util.fuck(`WTF is this? ${eventName}`);
                }

                util.log(`USE: ${currentPoints} points.`);

                // 40 min study session: 20 min video, 200 subs, 30 mins active (30 points)
                
                // Low use: 2 session per week ~ 60/week, 8.6/day
                // Medium use: 4 sessions per week ~  120/week, 17.1/day
                // High use: 8 sessions per week ~ 240/week, 34.3/day

                // Trigger requestTrial modal every 6 sessions (~4 hrs of use). (180 points)

                if(currentPoints > 180) {

                    util.log(`HEAT: Critical temp reached!`);
                    currentPoints = 0;

                    if(_licenseStatus === "NOT_SIGNED_IN" || _licenseStatus === "NONE") {
                        
                        configAndShowRequestTrialModal(true);
                    }
                    else if(_licenseStatus === "OVER") {

                        configAndShowPrePaymentModal(true);
                    }
                }

                CF_RPC("chromeStorageSet", 
                    { activity_lastEventTime: currentTime, activity_lastPoints: currentPoints }, 
                    function() {
                        activity_mutex.release();
                    }
                );
            });
        });
    }

    return obj;
}



var Naudio = function(lln) {

    /*!
 *  howler.js v2.1.2
 *  howlerjs.com
 *
 *  (c) 2013-2019, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

    'use strict';
  
    /** Global Methods **/
    /***************************************************************************/
  
    /**
     * Create the global controller. All contained methods and properties apply
     * to all sounds that are currently playing or will be in the future.
     */
    var HowlerGlobal = function() {
      this.init();
    };
    HowlerGlobal.prototype = {
      /**
       * Initialize the global Howler object.
       * @return {Howler}
       */
      init: function() {
        var self = this || Howler;
  
        // Create a global ID counter.
        self._counter = 1000;
  
        // Pool of unlocked HTML5 Audio objects.
        self._html5AudioPool = [];
        self.html5PoolSize = 10;
  
        // Internal properties.
        self._codecs = {};
        self._howls = [];
        self._muted = false;
        self._volume = 1;
        self._canPlayEvent = 'canplaythrough';
        self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;
  
        // Public properties.
        self.masterGain = null;
        self.noAudio = false;
        self.usingWebAudio = true;
        self.autoSuspend = true;
        self.ctx = null;
  
        // Set to false to disable the auto audio unlocker.
        self.autoUnlock = true;
  
        // Setup the various state values for global tracking.
        self._setup();
  
        return self;
      },
  
      /**
       * Get/set the global volume for all sounds.
       * @param  {Float} vol Volume from 0.0 to 1.0.
       * @return {Howler/Float}     Returns self or current volume.
       */
      volume: function(vol) {
        var self = this || Howler;
        vol = parseFloat(vol);
  
        // If we don't have an AudioContext created yet, run the setup.
        if (!self.ctx) {
          setupAudioContext();
        }
  
        if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
          self._volume = vol;
  
          // Don't update any of the nodes if we are muted.
          if (self._muted) {
            return self;
          }
  
          // When using Web Audio, we just need to adjust the master gain.
          if (self.usingWebAudio) {
            self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
          }
  
          // Loop through and change volume for all HTML5 audio nodes.
          for (var i=0; i<self._howls.length; i++) {
            if (!self._howls[i]._webAudio) {
              // Get all of the sounds in this Howl group.
              var ids = self._howls[i]._getSoundIds();
  
              // Loop through all sounds and change the volumes.
              for (var j=0; j<ids.length; j++) {
                var sound = self._howls[i]._soundById(ids[j]);
  
                if (sound && sound._node) {
                  sound._node.volume = sound._volume * vol;
                }
              }
            }
          }
  
          return self;
        }
  
        return self._volume;
      },
  
      /**
       * Handle muting and unmuting globally.
       * @param  {Boolean} muted Is muted or not.
       */
      mute: function(muted) {
        var self = this || Howler;
  
        // If we don't have an AudioContext created yet, run the setup.
        if (!self.ctx) {
          setupAudioContext();
        }
  
        self._muted = muted;
  
        // With Web Audio, we just need to mute the master gain.
        if (self.usingWebAudio) {
          self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
        }
  
        // Loop through and mute all HTML5 Audio nodes.
        for (var i=0; i<self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds();
  
            // Loop through all sounds and mark the audio node as muted.
            for (var j=0; j<ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);
  
              if (sound && sound._node) {
                sound._node.muted = (muted) ? true : sound._muted;
              }
            }
          }
        }
  
        return self;
      },
  
      /**
       * Unload and destroy all currently loaded Howl objects.
       * @return {Howler}
       */
      unload: function() {
        var self = this || Howler;
  
        for (var i=self._howls.length-1; i>=0; i--) {
          self._howls[i].unload();
        }
  
        // Create a new AudioContext to make sure it is fully reset.
        if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
          self.ctx.close();
          self.ctx = null;
          setupAudioContext();
        }
  
        return self;
      },
  
      /**
       * Check for codec support of specific extension.
       * @param  {String} ext Audio file extention.
       * @return {Boolean}
       */
      codecs: function(ext) {
        return (this || Howler)._codecs[ext.replace(/^x-/, '')];
      },
  
      /**
       * Setup various state values for global tracking.
       * @return {Howler}
       */
      _setup: function() {
        var self = this || Howler;
  
        // Keeps track of the suspend/resume state of the AudioContext.
        self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';
  
        // Automatically begin the 30-second suspend process
        self._autoSuspend();
  
        // Check if audio is available.
        if (!self.usingWebAudio) {
          // No audio is available on this system if noAudio is set to true.
          if (typeof Audio !== 'undefined') {
            try {
              var test = new Audio();
  
              // Check if the canplaythrough event is available.
              if (typeof test.oncanplaythrough === 'undefined') {
                self._canPlayEvent = 'canplay';
              }
            } catch(e) {
              self.noAudio = true;
            }
          } else {
            self.noAudio = true;
          }
        }
  
        // Test to make sure audio isn't disabled in Internet Explorer.
        try {
          var test = new Audio();
          if (test.muted) {
            self.noAudio = true;
          }
        } catch (e) {}
  
        // Check for supported codecs.
        if (!self.noAudio) {
          self._setupCodecs();
        }
  
        return self;
      },
  
      /**
       * Check for browser support for various codecs and cache the results.
       * @return {Howler}
       */
      _setupCodecs: function() {
        var self = this || Howler;
        var audioTest = null;
  
        // Must wrap in a try/catch because IE11 in server mode throws an error.
        try {
          audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
        } catch (err) {
          return self;
        }
  
        if (!audioTest || typeof audioTest.canPlayType !== 'function') {
          return self;
        }
  
        var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');
  
        // Opera version <33 has mixed MP3 support, so we need to check for and block it.
        var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);
        var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);
  
        self._codecs = {
          mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
          mpeg: !!mpegTest,
          opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
          ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
          oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
          wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
          aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
          caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
          m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
          mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
          weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
          webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
          dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
          flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
        };
  
        return self;
      },
  
      /**
       * Some browsers/devices will only allow audio to be played after a user interaction.
       * Attempt to automatically unlock audio on the first user interaction.
       * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
       * @return {Howler}
       */
      _unlockAudio: function() {
        var self = this || Howler;
  
        // Only run this if Web Audio is supported and it hasn't already been unlocked.
        if (self._audioUnlocked || !self.ctx) {
          return;
        }
  
        self._audioUnlocked = false;
        self.autoUnlock = false;
  
        // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
        // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
        // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
        if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
          self._mobileUnloaded = true;
          self.unload();
        }
  
        // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
        // http://stackoverflow.com/questions/24119684
        self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);
  
        // Call this method on touch start to create and play a buffer,
        // then check if the audio actually played to determine if
        // audio has now been unlocked on iOS, Android, etc.
        var unlock = function(e) {
          // Create a pool of unlocked HTML5 Audio objects that can
          // be used for playing sounds without user interaction. HTML5
          // Audio objects must be individually unlocked, as opposed
          // to the WebAudio API which only needs a single activation.
          // This must occur before WebAudio setup or the source.onended
          // event will not fire.
          for (var i=0; i<self.html5PoolSize; i++) {
            try {
              var audioNode = new Audio();
  
              // Mark this Audio object as unlocked to ensure it can get returned
              // to the unlocked pool when released.
              audioNode._unlocked = true;
  
              // Add the audio node to the pool.
              self._releaseHtml5Audio(audioNode);
            } catch (e) {
              self.noAudio = true;
            }
          }
  
          // Loop through any assigned audio nodes and unlock them.
          for (var i=0; i<self._howls.length; i++) {
            if (!self._howls[i]._webAudio) {
              // Get all of the sounds in this Howl group.
              var ids = self._howls[i]._getSoundIds();
  
              // Loop through all sounds and unlock the audio nodes.
              for (var j=0; j<ids.length; j++) {
                var sound = self._howls[i]._soundById(ids[j]);
  
                if (sound && sound._node && !sound._node._unlocked) {
                  sound._node._unlocked = true;
                  sound._node.load();
                }
              }
            }
          }
  
          // Fix Android can not play in suspend state.
          self._autoResume();
  
          // Create an empty buffer.
          var source = self.ctx.createBufferSource();
          source.buffer = self._scratchBuffer;
          source.connect(self.ctx.destination);
  
          // Play the empty buffer.
          if (typeof source.start === 'undefined') {
            source.noteOn(0);
          } else {
            source.start(0);
          }
  
          // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
          if (typeof self.ctx.resume === 'function') {
            self.ctx.resume();
          }
  
          // Setup a timeout to check that we are unlocked on the next event loop.
          source.onended = function() {
            source.disconnect(0);
  
            // Update the unlocked state and prevent this check from happening again.
            self._audioUnlocked = true;
  
            // Remove the touch start listener.
            document.removeEventListener('touchstart', unlock, true);
            document.removeEventListener('touchend', unlock, true);
            document.removeEventListener('click', unlock, true);
  
            // Let all sounds know that audio has been unlocked.
            for (var i=0; i<self._howls.length; i++) {
              self._howls[i]._emit('unlock');
            }
          };
        };
  
        // Setup a touch start listener to attempt an unlock in.
        document.addEventListener('touchstart', unlock, true);
        document.addEventListener('touchend', unlock, true);
        document.addEventListener('click', unlock, true);
  
        return self;
      },
  
      /**
       * Get an unlocked HTML5 Audio object from the pool. If none are left,
       * return a new Audio object and throw a warning.
       * @return {Audio} HTML5 Audio object.
       */
      _obtainHtml5Audio: function() {
        var self = this || Howler;
  
        // Return the next object from the pool if one exists.
        if (self._html5AudioPool.length) {
          return self._html5AudioPool.pop();
        }
  
        //.Check if the audio is locked and throw a warning.
        var testPlay = new Audio().play();
        if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {
          testPlay.catch(function() {
            console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');
          });
        }
  
        return new Audio();
      },
  
      /**
       * Return an activated HTML5 Audio object to the pool.
       * @return {Howler}
       */
      _releaseHtml5Audio: function(audio) {
        var self = this || Howler;
  
        // Don't add audio to the pool if we don't know if it has been unlocked.
        if (audio._unlocked) {
          self._html5AudioPool.push(audio);
        }
  
        return self;
      },
  
      /**
       * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
       * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
       * @return {Howler}
       */
      _autoSuspend: function() {
        var self = this;
  
        if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
          return;
        }
  
        // Check if any sounds are playing.
        for (var i=0; i<self._howls.length; i++) {
          if (self._howls[i]._webAudio) {
            for (var j=0; j<self._howls[i]._sounds.length; j++) {
              if (!self._howls[i]._sounds[j]._paused) {
                return self;
              }
            }
          }
        }
  
        if (self._suspendTimer) {
          clearTimeout(self._suspendTimer);
        }
  
        // If no sound has played after 30 seconds, suspend the context.
        self._suspendTimer = setTimeout(function() {
          if (!self.autoSuspend) {
            return;
          }
  
          self._suspendTimer = null;
          self.state = 'suspending';
          self.ctx.suspend().then(function() {
            self.state = 'suspended';
  
            if (self._resumeAfterSuspend) {
              delete self._resumeAfterSuspend;
              self._autoResume();
            }
          });
        }, 30000);
  
        return self;
      },
  
      /**
       * Automatically resume the Web Audio AudioContext when a new sound is played.
       * @return {Howler}
       */
      _autoResume: function() {
        var self = this;
  
        if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
          return;
        }
  
        if (self.state === 'running' && self._suspendTimer) {
          clearTimeout(self._suspendTimer);
          self._suspendTimer = null;
        } else if (self.state === 'suspended') {
          self.ctx.resume().then(function() {
            self.state = 'running';
  
            // Emit to all Howls that the audio has resumed.
            for (var i=0; i<self._howls.length; i++) {
              self._howls[i]._emit('resume');
            }
          });
  
          if (self._suspendTimer) {
            clearTimeout(self._suspendTimer);
            self._suspendTimer = null;
          }
        } else if (self.state === 'suspending') {
          self._resumeAfterSuspend = true;
        }
  
        return self;
      }
    };
  
    // Setup the global audio controller.
    var Howler = new HowlerGlobal();
  
    /** Group Methods **/
    /***************************************************************************/
  
    /**
     * Create an audio group controller.
     * @param {Object} o Passed in properties for this group.
     */
    var Howl = function(o) {
      var self = this;
  
      // Throw an error if no source is provided.
      if (!o.src || o.src.length === 0) {
        console.error('An array of source files must be passed with any new Howl.');
        return;
      }
  
      self.init(o);
    };
    Howl.prototype = {
      /**
       * Initialize a new Howl group object.
       * @param  {Object} o Passed in properties for this group.
       * @return {Howl}
       */
      init: function(o) {
        var self = this;
  
        // If we don't have an AudioContext created yet, run the setup.
        if (!Howler.ctx) {
          setupAudioContext();
        }
  
        // Setup user-defined default properties.
        self._autoplay = o.autoplay || false;
        self._format = (typeof o.format !== 'string') ? o.format : [o.format];
        self._html5 = o.html5 || false;
        self._muted = o.mute || false;
        self._loop = o.loop || false;
        self._pool = o.pool || 5;
        self._preload = (typeof o.preload === 'boolean') ? o.preload : true;
        self._rate = o.rate || 1;
        self._sprite = o.sprite || {};
        self._src = (typeof o.src !== 'string') ? o.src : [o.src];
        self._volume = o.volume !== undefined ? o.volume : 1;
        self._xhrWithCredentials = o.xhrWithCredentials || false;
  
        // Setup all other default properties.
        self._duration = 0;
        self._state = 'unloaded';
        self._sounds = [];
        self._endTimers = {};
        self._queue = [];
        self._playLock = false;
  
        // Setup event listeners.
        self._onend = o.onend ? [{fn: o.onend}] : [];
        self._onfade = o.onfade ? [{fn: o.onfade}] : [];
        self._onload = o.onload ? [{fn: o.onload}] : [];
        self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
        self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];
        self._onpause = o.onpause ? [{fn: o.onpause}] : [];
        self._onplay = o.onplay ? [{fn: o.onplay}] : [];
        self._onstop = o.onstop ? [{fn: o.onstop}] : [];
        self._onmute = o.onmute ? [{fn: o.onmute}] : [];
        self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
        self._onrate = o.onrate ? [{fn: o.onrate}] : [];
        self._onseek = o.onseek ? [{fn: o.onseek}] : [];
        self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];
        self._onresume = [];
  
        // Web Audio or HTML5 Audio?
        self._webAudio = Howler.usingWebAudio && !self._html5;
  
        // Automatically try to enable audio.
        if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {
          Howler._unlockAudio();
        }
  
        // Keep track of this Howl group in the global controller.
        Howler._howls.push(self);
  
        // If they selected autoplay, add a play event to the load queue.
        if (self._autoplay) {
          self._queue.push({
            event: 'play',
            action: function() {
              self.play();
            }
          });
        }
  
        // Load the source file unless otherwise specified.
        if (self._preload) {
          self.load();
        }
  
        return self;
      },
  
      /**
       * Load the audio file.
       * @return {Howler}
       */
      load: function() {
        var self = this;
        var url = null;
  
        // If no audio is available, quit immediately.
        if (Howler.noAudio) {
          self._emit('loaderror', null, 'No audio support.');
          return;
        }
  
        // Make sure our source is in an array.
        if (typeof self._src === 'string') {
          self._src = [self._src];
        }
  
        // Loop through the sources and pick the first one that is compatible.
        for (var i=0; i<self._src.length; i++) {
          var ext, str;
  
          if (self._format && self._format[i]) {
            // If an extension was specified, use that instead.
            ext = self._format[i];
          } else {
            // Make sure the source is a string.
            str = self._src[i];
            if (typeof str !== 'string') {
              self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
              continue;
            }
  
            // Extract the file extension from the URL or base64 data URI.
            ext = /^data:audio\/([^;,]+);/i.exec(str);
            if (!ext) {
              ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
            }
  
            if (ext) {
              ext = ext[1].toLowerCase();
            }
          }
  
          // Log a warning if no extension was found.
          if (!ext) {
            console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
          }
  
          // Check if this extension is available.
          if (ext && Howler.codecs(ext)) {
            url = self._src[i];
            break;
          }
        }
  
        if (!url) {
          self._emit('loaderror', null, 'No codec support for selected audio sources.');
          return;
        }
  
        self._src = url;
        self._state = 'loading';
  
        // If the hosting page is HTTPS and the source isn't,
        // drop down to HTML5 Audio to avoid Mixed Content errors.
        if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
          self._html5 = true;
          self._webAudio = false;
        }
  
        // Create a new sound object and add it to the pool.
        new Sound(self);
  
        // Load and decode the audio data for playback.
        if (self._webAudio) {
          loadBuffer(self);
        }
  
        return self;
      },
  
      /**
       * Play a sound or resume previous playback.
       * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
       * @param  {Boolean} internal Internal Use: true prevents event firing.
       * @return {Number}          Sound ID.
       */
      play: function(sprite, internal) {
        var self = this;
        var id = null;
  
        // Determine if a sprite, sound id or nothing was passed
        if (typeof sprite === 'number') {
          id = sprite;
          sprite = null;
        } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
          // If the passed sprite doesn't exist, do nothing.
          return null;
        } else if (typeof sprite === 'undefined') {
          // Use the default sound sprite (plays the full audio length).
          sprite = '__default';
  
          // Check if there is a single paused sound that isn't ended. 
          // If there is, play that sound. If not, continue as usual.  
          if (!self._playLock) {
            var num = 0;
            for (var i=0; i<self._sounds.length; i++) {
              if (self._sounds[i]._paused && !self._sounds[i]._ended) {
                num++;
                id = self._sounds[i]._id;
              }
            }
  
            if (num === 1) {
              sprite = null;
            } else {
              id = null;
            }
          }
        }
  
        // Get the selected node, or get one from the pool.
        var sound = id ? self._soundById(id) : self._inactiveSound();
  
        // If the sound doesn't exist, do nothing.
        if (!sound) {
          return null;
        }
  
        // Select the sprite definition.
        if (id && !sprite) {
          sprite = sound._sprite || '__default';
        }
  
        // If the sound hasn't loaded, we must wait to get the audio's duration.
        // We also need to wait to make sure we don't run into race conditions with
        // the order of function calls.
        if (self._state !== 'loaded') {
          // Set the sprite value on this sound.
          sound._sprite = sprite;
  
          // Mark this sound as not ended in case another sound is played before this one loads.
          sound._ended = false;
  
          // Add the sound to the queue to be played on load.
          var soundId = sound._id;
          self._queue.push({
            event: 'play',
            action: function() {
              self.play(soundId);
            }
          });
  
          return soundId;
        }
  
        // Don't play the sound if an id was passed and it is already playing.
        if (id && !sound._paused) {
          // Trigger the play event, in order to keep iterating through queue.
          if (!internal) {
            self._loadQueue('play');
          }
  
          return sound._id;
        }
  
        // Make sure the AudioContext isn't suspended, and resume it if it is.
        if (self._webAudio) {
          Howler._autoResume();
        }
  
        // Determine how long to play for and where to start playing.
        var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
        var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
        var timeout = (duration * 1000) / Math.abs(sound._rate);
        var start = self._sprite[sprite][0] / 1000;
        var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
        var loop = !!(sound._loop || self._sprite[sprite][2]);
        sound._sprite = sprite;
  
        // Mark the sound as ended instantly so that this async playback
        // doesn't get grabbed by another call to play while this one waits to start.
        sound._ended = false;
  
        // Update the parameters of the sound.
        var setParams = function() {
          sound._paused = false;
          sound._seek = seek;
          sound._start = start;
          sound._stop = stop;
          sound._loop = loop;
        };
  
        // End the sound instantly if seek is at the end.
        if (seek >= stop) {
          self._ended(sound);
          return;
        }
  
        // Begin the actual playback.
        var node = sound._node;
        if (self._webAudio) {
          // Fire this when the sound is ready to play to begin Web Audio playback.
          var playWebAudio = function() {
            self._playLock = false;
            setParams();
            self._refreshBuffer(sound);
  
            // Setup the playback params.
            var vol = (sound._muted || self._muted) ? 0 : sound._volume;
            node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
            sound._playStart = Howler.ctx.currentTime;
  
            // Play the sound using the supported method.
            if (typeof node.bufferSource.start === 'undefined') {
              sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
            } else {
              sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
            }
  
            // Start a new timer if none is present.
            if (timeout !== Infinity) {
              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
            }
  
            if (!internal) {
              setTimeout(function() {
                self._emit('play', sound._id);
                self._loadQueue();
              }, 0);
            }
          };
  
          if (Howler.state === 'running') {
            playWebAudio();
          } else {
            self._playLock = true;
  
            // Wait for the audio context to resume before playing.
            self.once('resume', playWebAudio);
  
            // Cancel the end timer.
            self._clearTimer(sound._id);
          }
        } else {
          // Fire this when the sound is ready to play to begin HTML5 Audio playback.
          var playHtml5 = function() {
            node.currentTime = seek;
            node.muted = sound._muted || self._muted || Howler._muted || node.muted;
            node.volume = sound._volume * Howler.volume();
            node.playbackRate = sound._rate;
  
            // Some browsers will throw an error if this is called without user interaction.
            try {
              var play = node.play();
  
              // Support older browsers that don't support promises, and thus don't have this issue.
              if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {
                // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
                self._playLock = true;
  
                // Set param values immediately.
                setParams();
  
                // Releases the lock and executes queued actions.
                play
                  .then(function() {
                    self._playLock = false;
                    node._unlocked = true;
                    if (!internal) {
                      self._emit('play', sound._id);
                      self._loadQueue();
                    }
                  })
                  .catch(function() {
                    self._playLock = false;
                    self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                      'on mobile devices and Chrome where playback was not within a user interaction.');
  
                    // Reset the ended and paused values.
                    sound._ended = true;
                    sound._paused = true;
                  });
              } else if (!internal) {
                self._playLock = false;
                setParams();
                self._emit('play', sound._id);
                self._loadQueue();
              }
  
              // Setting rate before playing won't work in IE, so we set it again here.
              node.playbackRate = sound._rate;
  
              // If the node is still paused, then we can assume there was a playback issue.
              if (node.paused) {
                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                  'on mobile devices and Chrome where playback was not within a user interaction.');
                return;
              }
  
              // Setup the end timer on sprites or listen for the ended event.
              if (sprite !== '__default' || sound._loop) {
                self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
              } else {
                self._endTimers[sound._id] = function() {
                  // Fire ended on this audio node.
                  self._ended(sound);
  
                  // Clear this listener.
                  node.removeEventListener('ended', self._endTimers[sound._id], false);
                };
                node.addEventListener('ended', self._endTimers[sound._id], false);
              }
            } catch (err) {
              self._emit('playerror', sound._id, err);
            }
          };
  
          // If this is streaming audio, make sure the src is set and load again.
          if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {
            node.src = self._src;
            node.load();
          }
  
          // Play immediately if ready, or wait for the 'canplaythrough'e vent.
          var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
          if (node.readyState >= 3 || loadedNoReadyState) {
            playHtml5();
          } else {
            self._playLock = true;
  
            var listener = function() {
              // Begin playback.
              playHtml5();
  
              // Clear this listener.
              node.removeEventListener(Howler._canPlayEvent, listener, false);
            };
            node.addEventListener(Howler._canPlayEvent, listener, false);
  
            // Cancel the end timer.
            self._clearTimer(sound._id);
          }
        }
  
        return sound._id;
      },
  
      /**
       * Pause playback and save current position.
       * @param  {Number} id The sound ID (empty to pause all in group).
       * @return {Howl}
       */
      pause: function(id) {
        var self = this;
  
        // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
        if (self._state !== 'loaded' || self._playLock) {
          self._queue.push({
            event: 'pause',
            action: function() {
              self.pause(id);
            }
          });
  
          return self;
        }
  
        // If no id is passed, get all ID's to be paused.
        var ids = self._getSoundIds(id);
  
        for (var i=0; i<ids.length; i++) {
          // Clear the end timer.
          self._clearTimer(ids[i]);
  
          // Get the sound.
          var sound = self._soundById(ids[i]);
  
          if (sound && !sound._paused) {
            // Reset the seek position.
            sound._seek = self.seek(ids[i]);
            sound._rateSeek = 0;
            sound._paused = true;
  
            // Stop currently running fades.
            self._stopFade(ids[i]);
  
            if (sound._node) {
              if (self._webAudio) {
                // Make sure the sound has been created.
                if (!sound._node.bufferSource) {
                  continue;
                }
  
                if (typeof sound._node.bufferSource.stop === 'undefined') {
                  sound._node.bufferSource.noteOff(0);
                } else {
                  sound._node.bufferSource.stop(0);
                }
  
                // Clean up the buffer source.
                self._cleanBuffer(sound._node);
              } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                sound._node.pause();
              }
            }
          }
  
          // Fire the pause event, unless `true` is passed as the 2nd argument.
          if (!arguments[1]) {
            self._emit('pause', sound ? sound._id : null);
          }
        }
  
        return self;
      },
  
      /**
       * Stop playback and reset to start.
       * @param  {Number} id The sound ID (empty to stop all in group).
       * @param  {Boolean} internal Internal Use: true prevents event firing.
       * @return {Howl}
       */
      stop: function(id, internal) {
        var self = this;
  
        // If the sound hasn't loaded, add it to the load queue to stop when capable.
        if (self._state !== 'loaded' || self._playLock) {
          self._queue.push({
            event: 'stop',
            action: function() {
              self.stop(id);
            }
          });
  
          return self;
        }
  
        // If no id is passed, get all ID's to be stopped.
        var ids = self._getSoundIds(id);
  
        for (var i=0; i<ids.length; i++) {
          // Clear the end timer.
          self._clearTimer(ids[i]);
  
          // Get the sound.
          var sound = self._soundById(ids[i]);
  
          if (sound) {
            // Reset the seek position.
            sound._seek = sound._start || 0;
            sound._rateSeek = 0;
            sound._paused = true;
            sound._ended = true;
  
            // Stop currently running fades.
            self._stopFade(ids[i]);
  
            if (sound._node) {
              if (self._webAudio) {
                // Make sure the sound's AudioBufferSourceNode has been created.
                if (sound._node.bufferSource) {
                  if (typeof sound._node.bufferSource.stop === 'undefined') {
                    sound._node.bufferSource.noteOff(0);
                  } else {
                    sound._node.bufferSource.stop(0);
                  }
  
                  // Clean up the buffer source.
                  self._cleanBuffer(sound._node);
                }
              } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                sound._node.currentTime = sound._start || 0;
                sound._node.pause();
  
                // If this is a live stream, stop download once the audio is stopped.
                if (sound._node.duration === Infinity) {
                  self._clearSound(sound._node);
                }
              }
            }
  
            if (!internal) {
              self._emit('stop', sound._id);
            }
          }
        }
  
        return self;
      },
  
      /**
       * Mute/unmute a single sound or all sounds in this Howl group.
       * @param  {Boolean} muted Set to true to mute and false to unmute.
       * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
       * @return {Howl}
       */
      mute: function(muted, id) {
        var self = this;
  
        // If the sound hasn't loaded, add it to the load queue to mute when capable.
        if (self._state !== 'loaded'|| self._playLock) {
          self._queue.push({
            event: 'mute',
            action: function() {
              self.mute(muted, id);
            }
          });
  
          return self;
        }
  
        // If applying mute/unmute to all sounds, update the group's value.
        if (typeof id === 'undefined') {
          if (typeof muted === 'boolean') {
            self._muted = muted;
          } else {
            return self._muted;
          }
        }
  
        // If no id is passed, get all ID's to be muted.
        var ids = self._getSoundIds(id);
  
        for (var i=0; i<ids.length; i++) {
          // Get the sound.
          var sound = self._soundById(ids[i]);
  
          if (sound) {
            sound._muted = muted;
  
            // Cancel active fade and set the volume to the end value.
            if (sound._interval) {
              self._stopFade(sound._id);
            }
  
            if (self._webAudio && sound._node) {
              sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
            } else if (sound._node) {
              sound._node.muted = Howler._muted ? true : muted;
            }
  
            self._emit('mute', sound._id);
          }
        }
  
        return self;
      },
  
      /**
       * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
       *   volume() -> Returns the group's volume value.
       *   volume(id) -> Returns the sound id's current volume.
       *   volume(vol) -> Sets the volume of all sounds in this Howl group.
       *   volume(vol, id) -> Sets the volume of passed sound id.
       * @return {Howl/Number} Returns self or current volume.
       */
      volume: function() {
        var self = this;
        var args = arguments;
        var vol, id;
  
        // Determine the values based on arguments.
        if (args.length === 0) {
          // Return the value of the groups' volume.
          return self._volume;
        } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
          // First check if this is an ID, and if not, assume it is a new volume.
          var ids = self._getSoundIds();
          var index = ids.indexOf(args[0]);
          if (index >= 0) {
            id = parseInt(args[0], 10);
          } else {
            vol = parseFloat(args[0]);
          }
        } else if (args.length >= 2) {
          vol = parseFloat(args[0]);
          id = parseInt(args[1], 10);
        }
  
        // Update the volume or return the current volume.
        var sound;
        if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
          // If the sound hasn't loaded, add it to the load queue to change volume when capable.
          if (self._state !== 'loaded'|| self._playLock) {
            self._queue.push({
              event: 'volume',
              action: function() {
                self.volume.apply(self, args);
              }
            });
  
            return self;
          }
  
          // Set the group volume.
          if (typeof id === 'undefined') {
            self._volume = vol;
          }
  
          // Update one or all volumes.
          id = self._getSoundIds(id);
          for (var i=0; i<id.length; i++) {
            // Get the sound.
            sound = self._soundById(id[i]);
  
            if (sound) {
              sound._volume = vol;
  
              // Stop currently running fades.
              if (!args[2]) {
                self._stopFade(id[i]);
              }
  
              if (self._webAudio && sound._node && !sound._muted) {
                sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
              } else if (sound._node && !sound._muted) {
                sound._node.volume = vol * Howler.volume();
              }
  
              self._emit('volume', sound._id);
            }
          }
        } else {
          sound = id ? self._soundById(id) : self._sounds[0];
          return sound ? sound._volume : 0;
        }
  
        return self;
      },
  
      /**
       * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
       * @param  {Number} from The value to fade from (0.0 to 1.0).
       * @param  {Number} to   The volume to fade to (0.0 to 1.0).
       * @param  {Number} len  Time in milliseconds to fade.
       * @param  {Number} id   The sound id (omit to fade all sounds).
       * @return {Howl}
       */
      fade: function(from, to, len, id) {
        var self = this;
  
        // If the sound hasn't loaded, add it to the load queue to fade when capable.
        if (self._state !== 'loaded' || self._playLock) {
          self._queue.push({
            event: 'fade',
            action: function() {
              self.fade(from, to, len, id);
            }
          });
  
          return self;
        }
  
        // Make sure the to/from/len values are numbers.
        from = parseFloat(from);
        to = parseFloat(to);
        len = parseFloat(len);
  
        // Set the volume to the start position.
        self.volume(from, id);
  
        // Fade the volume of one or all sounds.
        var ids = self._getSoundIds(id);
        for (var i=0; i<ids.length; i++) {
          // Get the sound.
          var sound = self._soundById(ids[i]);
  
          // Create a linear fade or fall back to timeouts with HTML5 Audio.
          if (sound) {
            // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
            if (!id) {
              self._stopFade(ids[i]);
            }
  
            // If we are using Web Audio, let the native methods do the actual fade.
            if (self._webAudio && !sound._muted) {
              var currentTime = Howler.ctx.currentTime;
              var end = currentTime + (len / 1000);
              sound._volume = from;
              sound._node.gain.setValueAtTime(from, currentTime);
              sound._node.gain.linearRampToValueAtTime(to, end);
            }
  
            self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');
          }
        }
  
        return self;
      },
  
      /**
       * Starts the internal interval to fade a sound.
       * @param  {Object} sound Reference to sound to fade.
       * @param  {Number} from The value to fade from (0.0 to 1.0).
       * @param  {Number} to   The volume to fade to (0.0 to 1.0).
       * @param  {Number} len  Time in milliseconds to fade.
       * @param  {Number} id   The sound id to fade.
       * @param  {Boolean} isGroup   If true, set the volume on the group.
       */
      _startFadeInterval: function(sound, from, to, len, id, isGroup) {
        var self = this;
        var vol = from;
        var diff = to - from;
        var steps = Math.abs(diff / 0.01);
        var stepLen = Math.max(4, (steps > 0) ? len / steps : len);
        var lastTick = Date.now();
  
        // Store the value being faded to.
        sound._fadeTo = to;
  
        // Update the volume value on each interval tick.
        sound._interval = setInterval(function() {
          // Update the volume based on the time since the last tick.
          var tick = (Date.now() - lastTick) / len;
          lastTick = Date.now();
          vol += diff * tick;
  
          // Make sure the volume is in the right bounds.
          vol = Math.max(0, vol);
          vol = Math.min(1, vol);
  
          // Round to within 2 decimal points.
          vol = Math.round(vol * 100) / 100;
  
          // Change the volume.
          if (self._webAudio) {
            sound._volume = vol;
          } else {
            self.volume(vol, sound._id, true);
          }
  
          // Set the group's volume.
          if (isGroup) {
            self._volume = vol;
          }
  
          // When the fade is complete, stop it and fire event.
          if ((to < from && vol <= to) || (to > from && vol >= to)) {
            clearInterval(sound._interval);
            sound._interval = null;
            sound._fadeTo = null;
            self.volume(to, sound._id);
            self._emit('fade', sound._id);
          }
        }, stepLen);
      },
  
      /**
       * Internal method that stops the currently playing fade when
       * a new fade starts, volume is changed or the sound is stopped.
       * @param  {Number} id The sound id.
       * @return {Howl}
       */
      _stopFade: function(id) {
        var self = this;
        var sound = self._soundById(id);
  
        if (sound && sound._interval) {
          if (self._webAudio) {
            sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
          }
  
          clearInterval(sound._interval);
          sound._interval = null;
          self.volume(sound._fadeTo, id);
          sound._fadeTo = null;
          self._emit('fade', id);
        }
  
        return self;
      },
  
      /**
       * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
       *   loop() -> Returns the group's loop value.
       *   loop(id) -> Returns the sound id's loop value.
       *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
       *   loop(loop, id) -> Sets the loop value of passed sound id.
       * @return {Howl/Boolean} Returns self or current loop value.
       */
      loop: function() {
        var self = this;
        var args = arguments;
        var loop, id, sound;
  
        // Determine the values for loop and id.
        if (args.length === 0) {
          // Return the grou's loop value.
          return self._loop;
        } else if (args.length === 1) {
          if (typeof args[0] === 'boolean') {
            loop = args[0];
            self._loop = loop;
          } else {
            // Return this sound's loop value.
            sound = self._soundById(parseInt(args[0], 10));
            return sound ? sound._loop : false;
          }
        } else if (args.length === 2) {
          loop = args[0];
          id = parseInt(args[1], 10);
        }
  
        // If no id is passed, get all ID's to be looped.
        var ids = self._getSoundIds(id);
        for (var i=0; i<ids.length; i++) {
          sound = self._soundById(ids[i]);
  
          if (sound) {
            sound._loop = loop;
            if (self._webAudio && sound._node && sound._node.bufferSource) {
              sound._node.bufferSource.loop = loop;
              if (loop) {
                sound._node.bufferSource.loopStart = sound._start || 0;
                sound._node.bufferSource.loopEnd = sound._stop;
              }
            }
          }
        }
  
        return self;
      },
  
      /**
       * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
       *   rate() -> Returns the first sound node's current playback rate.
       *   rate(id) -> Returns the sound id's current playback rate.
       *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
       *   rate(rate, id) -> Sets the playback rate of passed sound id.
       * @return {Howl/Number} Returns self or the current playback rate.
       */
      rate: function() {
        var self = this;
        var args = arguments;
        var rate, id;
  
        // Determine the values based on arguments.
        if (args.length === 0) {
          // We will simply return the current rate of the first node.
          id = self._sounds[0]._id;
        } else if (args.length === 1) {
          // First check if this is an ID, and if not, assume it is a new rate value.
          var ids = self._getSoundIds();
          var index = ids.indexOf(args[0]);
          if (index >= 0) {
            id = parseInt(args[0], 10);
          } else {
            rate = parseFloat(args[0]);
          }
        } else if (args.length === 2) {
          rate = parseFloat(args[0]);
          id = parseInt(args[1], 10);
        }
  
        // Update the playback rate or return the current value.
        var sound;
        if (typeof rate === 'number') {
          // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
          if (self._state !== 'loaded' || self._playLock) {
            self._queue.push({
              event: 'rate',
              action: function() {
                self.rate.apply(self, args);
              }
            });
  
            return self;
          }
  
          // Set the group rate.
          if (typeof id === 'undefined') {
            self._rate = rate;
          }
  
          // Update one or all volumes.
          id = self._getSoundIds(id);
          for (var i=0; i<id.length; i++) {
            // Get the sound.
            sound = self._soundById(id[i]);
  
            if (sound) {
              // Keep track of our position when the rate changed and update the playback
              // start position so we can properly adjust the seek position for time elapsed.
              if (self.playing(id[i])) {
                sound._rateSeek = self.seek(id[i]);
                sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
              }
              sound._rate = rate;
  
              // Change the playback rate.
              if (self._webAudio && sound._node && sound._node.bufferSource) {
                sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
              } else if (sound._node) {
                sound._node.playbackRate = rate;
              }
  
              // Reset the timers.
              var seek = self.seek(id[i]);
              var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
              var timeout = (duration * 1000) / Math.abs(sound._rate);
  
              // Start a new end timer if sound is already playing.
              if (self._endTimers[id[i]] || !sound._paused) {
                self._clearTimer(id[i]);
                self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
              }
  
              self._emit('rate', sound._id);
            }
          }
        } else {
          sound = self._soundById(id);
          return sound ? sound._rate : self._rate;
        }
  
        return self;
      },
  
      /**
       * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
       *   seek() -> Returns the first sound node's current seek position.
       *   seek(id) -> Returns the sound id's current seek position.
       *   seek(seek) -> Sets the seek position of the first sound node.
       *   seek(seek, id) -> Sets the seek position of passed sound id.
       * @return {Howl/Number} Returns self or the current seek position.
       */
      seek: function() {
        var self = this;
        var args = arguments;
        var seek, id;
  
        // Determine the values based on arguments.
        if (args.length === 0) {
          // We will simply return the current position of the first node.
          id = self._sounds[0]._id;
        } else if (args.length === 1) {
          // First check if this is an ID, and if not, assume it is a new seek position.
          var ids = self._getSoundIds();
          var index = ids.indexOf(args[0]);
          if (index >= 0) {
            id = parseInt(args[0], 10);
          } else if (self._sounds.length) {
            id = self._sounds[0]._id;
            seek = parseFloat(args[0]);
          }
        } else if (args.length === 2) {
          seek = parseFloat(args[0]);
          id = parseInt(args[1], 10);
        }
  
        // If there is no ID, bail out.
        if (typeof id === 'undefined') {
          return self;
        }
  
        // If the sound hasn't loaded, add it to the load queue to seek when capable.
        if (self._state !== 'loaded' || self._playLock) {
          self._queue.push({
            event: 'seek',
            action: function() {
              self.seek.apply(self, args);
            }
          });
  
          return self;
        }
  
        // Get the sound.
        var sound = self._soundById(id);
  
        if (sound) {
          if (typeof seek === 'number' && seek >= 0) {
            // Pause the sound and update position for restarting playback.
            var playing = self.playing(id);
            if (playing) {
              self.pause(id, true);
            }
  
            // Move the position of the track and cancel timer.
            sound._seek = seek;
            sound._ended = false;
            self._clearTimer(id);
  
            // Update the seek position for HTML5 Audio.
            if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {
              sound._node.currentTime = seek;
            }
  
            // Seek and emit when ready.
            var seekAndEmit = function() {
              self._emit('seek', id);
  
              // Restart the playback if the sound was playing.
              if (playing) {
                self.play(id, true);
              }
            };
  
            // Wait for the play lock to be unset before emitting (HTML5 Audio).
            if (playing && !self._webAudio) {
              var emitSeek = function() {
                if (!self._playLock) {
                  seekAndEmit();
                } else {
                  setTimeout(emitSeek, 0);
                }
              };
              setTimeout(emitSeek, 0);
            } else {
              seekAndEmit();
            }
          } else {
            if (self._webAudio) {
              var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
              var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
              return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
            } else {
              return sound._node.currentTime;
            }
          }
        }
  
        return self;
      },
  
      /**
       * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
       * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
       * @return {Boolean} True if playing and false if not.
       */
      playing: function(id) {
        var self = this;
  
        // Check the passed sound ID (if any).
        if (typeof id === 'number') {
          var sound = self._soundById(id);
          return sound ? !sound._paused : false;
        }
  
        // Otherwise, loop through all sounds and check if any are playing.
        for (var i=0; i<self._sounds.length; i++) {
          if (!self._sounds[i]._paused) {
            return true;
          }
        }
  
        return false;
      },
  
      /**
       * Get the duration of this sound. Passing a sound id will return the sprite duration.
       * @param  {Number} id The sound id to check. If none is passed, return full source duration.
       * @return {Number} Audio duration in seconds.
       */
      duration: function(id) {
        var self = this;
        var duration = self._duration;
  
        // If we pass an ID, get the sound and return the sprite length.
        var sound = self._soundById(id);
        if (sound) {
          duration = self._sprite[sound._sprite][1] / 1000;
        }
  
        return duration;
      },
  
      /**
       * Returns the current loaded state of this Howl.
       * @return {String} 'unloaded', 'loading', 'loaded'
       */
      state: function() {
        return this._state;
      },
  
      /**
       * Unload and destroy the current Howl object.
       * This will immediately stop all sound instances attached to this group.
       */
      unload: function() {
        var self = this;
  
        // Stop playing any active sounds.
        var sounds = self._sounds;
        for (var i=0; i<sounds.length; i++) {
          // Stop the sound if it is currently playing.
          if (!sounds[i]._paused) {
            self.stop(sounds[i]._id);
          }
  
          // Remove the source or disconnect.
          if (!self._webAudio) {
            // Set the source to 0-second silence to stop any downloading (except in IE).
            self._clearSound(sounds[i]._node);
  
            // Remove any event listeners.
            sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
            sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
  
            // Release the Audio object back to the pool.
            Howler._releaseHtml5Audio(sounds[i]._node);
          }
  
          // Empty out all of the nodes.
          delete sounds[i]._node;
  
          // Make sure all timers are cleared out.
          self._clearTimer(sounds[i]._id);
        }
  
        // Remove the references in the global Howler object.
        var index = Howler._howls.indexOf(self);
        if (index >= 0) {
          Howler._howls.splice(index, 1);
        }
  
        // Delete this sound from the cache (if no other Howl is using it).
        var remCache = true;
        for (i=0; i<Howler._howls.length; i++) {
          if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {
            remCache = false;
            break;
          }
        }
  
        if (cache && remCache) {
          delete cache[self._src];
        }
  
        // Clear global errors.
        Howler.noAudio = false;
  
        // Clear out `self`.
        self._state = 'unloaded';
        self._sounds = [];
        self = null;
  
        return null;
      },
  
      /**
       * Listen to a custom event.
       * @param  {String}   event Event name.
       * @param  {Function} fn    Listener to call.
       * @param  {Number}   id    (optional) Only listen to events for this sound.
       * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
       * @return {Howl}
       */
      on: function(event, fn, id, once) {
        var self = this;
        var events = self['_on' + event];
  
        if (typeof fn === 'function') {
          events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
        }
  
        return self;
      },
  
      /**
       * Remove a custom event. Call without parameters to remove all events.
       * @param  {String}   event Event name.
       * @param  {Function} fn    Listener to remove. Leave empty to remove all.
       * @param  {Number}   id    (optional) Only remove events for this sound.
       * @return {Howl}
       */
      off: function(event, fn, id) {
        var self = this;
        var events = self['_on' + event];
        var i = 0;
  
        // Allow passing just an event and ID.
        if (typeof fn === 'number') {
          id = fn;
          fn = null;
        }
  
        if (fn || id) {
          // Loop through event store and remove the passed function.
          for (i=0; i<events.length; i++) {
            var isId = (id === events[i].id);
            if (fn === events[i].fn && isId || !fn && isId) {
              events.splice(i, 1);
              break;
            }
          }
        } else if (event) {
          // Clear out all events of this type.
          self['_on' + event] = [];
        } else {
          // Clear out all events of every type.
          var keys = Object.keys(self);
          for (i=0; i<keys.length; i++) {
            if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
              self[keys[i]] = [];
            }
          }
        }
  
        return self;
      },
  
      /**
       * Listen to a custom event and remove it once fired.
       * @param  {String}   event Event name.
       * @param  {Function} fn    Listener to call.
       * @param  {Number}   id    (optional) Only listen to events for this sound.
       * @return {Howl}
       */
      once: function(event, fn, id) {
        var self = this;
  
        // Setup the event listener.
        self.on(event, fn, id, 1);
  
        return self;
      },
  
      /**
       * Emit all events of a specific type and pass the sound id.
       * @param  {String} event Event name.
       * @param  {Number} id    Sound ID.
       * @param  {Number} msg   Message to go with event.
       * @return {Howl}
       */
      _emit: function(event, id, msg) {
        var self = this;
        var events = self['_on' + event];
  
        // Loop through event store and fire all functions.
        for (var i=events.length-1; i>=0; i--) {
          // Only fire the listener if the correct ID is used.
          if (!events[i].id || events[i].id === id || event === 'load') {
            setTimeout(function(fn) {
              fn.call(this, id, msg);
            }.bind(self, events[i].fn), 0);
  
            // If this event was setup with `once`, remove it.
            if (events[i].once) {
              self.off(event, events[i].fn, events[i].id);
            }
          }
        }
  
        // Pass the event type into load queue so that it can continue stepping.
        self._loadQueue(event);
  
        return self;
      },
  
      /**
       * Queue of actions initiated before the sound has loaded.
       * These will be called in sequence, with the next only firing
       * after the previous has finished executing (even if async like play).
       * @return {Howl}
       */
      _loadQueue: function(event) {
        var self = this;
  
        if (self._queue.length > 0) {
          var task = self._queue[0];
  
          // Remove this task if a matching event was passed.
          if (task.event === event) {
            self._queue.shift();
            self._loadQueue();
          }
  
          // Run the task if no event type is passed.
          if (!event) {
            task.action();
          }
        }
  
        return self;
      },
  
      /**
       * Fired when playback ends at the end of the duration.
       * @param  {Sound} sound The sound object to work with.
       * @return {Howl}
       */
      _ended: function(sound) {
        var self = this;
        var sprite = sound._sprite;
  
        // If we are using IE and there was network latency we may be clipping
        // audio before it completes playing. Lets check the node to make sure it
        // believes it has completed, before ending the playback.
        if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
          setTimeout(self._ended.bind(self, sound), 100);
          return self;
        }
  
        // Should this sound loop?
        var loop = !!(sound._loop || self._sprite[sprite][2]);
  
        // Fire the ended event.
        self._emit('end', sound._id);
  
        // Restart the playback for HTML5 Audio loop.
        if (!self._webAudio && loop) {
          self.stop(sound._id, true).play(sound._id);
        }
  
        // Restart this timer if on a Web Audio loop.
        if (self._webAudio && loop) {
          self._emit('play', sound._id);
          sound._seek = sound._start || 0;
          sound._rateSeek = 0;
          sound._playStart = Howler.ctx.currentTime;
  
          var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
          self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
        }
  
        // Mark the node as paused.
        if (self._webAudio && !loop) {
          sound._paused = true;
          sound._ended = true;
          sound._seek = sound._start || 0;
          sound._rateSeek = 0;
          self._clearTimer(sound._id);
  
          // Clean up the buffer source.
          self._cleanBuffer(sound._node);
  
          // Attempt to auto-suspend AudioContext if no sounds are still playing.
          Howler._autoSuspend();
        }
  
        // When using a sprite, end the track.
        if (!self._webAudio && !loop) {
          self.stop(sound._id, true);
        }
  
        return self;
      },
  
      /**
       * Clear the end timer for a sound playback.
       * @param  {Number} id The sound ID.
       * @return {Howl}
       */
      _clearTimer: function(id) {
        var self = this;
  
        if (self._endTimers[id]) {
          // Clear the timeout or remove the ended listener.
          if (typeof self._endTimers[id] !== 'function') {
            clearTimeout(self._endTimers[id]);
          } else {
            var sound = self._soundById(id);
            if (sound && sound._node) {
              sound._node.removeEventListener('ended', self._endTimers[id], false);
            }
          }
  
          delete self._endTimers[id];
        }
  
        return self;
      },
  
      /**
       * Return the sound identified by this ID, or return null.
       * @param  {Number} id Sound ID
       * @return {Object}    Sound object or null.
       */
      _soundById: function(id) {
        var self = this;
  
        // Loop through all sounds and find the one with this ID.
        for (var i=0; i<self._sounds.length; i++) {
          if (id === self._sounds[i]._id) {
            return self._sounds[i];
          }
        }
  
        return null;
      },
  
      /**
       * Return an inactive sound from the pool or create a new one.
       * @return {Sound} Sound playback object.
       */
      _inactiveSound: function() {
        var self = this;
  
        self._drain();
  
        // Find the first inactive node to recycle.
        for (var i=0; i<self._sounds.length; i++) {
          if (self._sounds[i]._ended) {
            return self._sounds[i].reset();
          }
        }
  
        // If no inactive node was found, create a new one.
        return new Sound(self);
      },
  
      /**
       * Drain excess inactive sounds from the pool.
       */
      _drain: function() {
        var self = this;
        var limit = self._pool;
        var cnt = 0;
        var i = 0;
  
        // If there are less sounds than the max pool size, we are done.
        if (self._sounds.length < limit) {
          return;
        }
  
        // Count the number of inactive sounds.
        for (i=0; i<self._sounds.length; i++) {
          if (self._sounds[i]._ended) {
            cnt++;
          }
        }
  
        // Remove excess inactive sounds, going in reverse order.
        for (i=self._sounds.length - 1; i>=0; i--) {
          if (cnt <= limit) {
            return;
          }
  
          if (self._sounds[i]._ended) {
            // Disconnect the audio source when using Web Audio.
            if (self._webAudio && self._sounds[i]._node) {
              self._sounds[i]._node.disconnect(0);
            }
  
            // Remove sounds until we have the pool size.
            self._sounds.splice(i, 1);
            cnt--;
          }
        }
      },
  
      /**
       * Get all ID's from the sounds pool.
       * @param  {Number} id Only return one ID if one is passed.
       * @return {Array}    Array of IDs.
       */
      _getSoundIds: function(id) {
        var self = this;
  
        if (typeof id === 'undefined') {
          var ids = [];
          for (var i=0; i<self._sounds.length; i++) {
            ids.push(self._sounds[i]._id);
          }
  
          return ids;
        } else {
          return [id];
        }
      },
  
      /**
       * Load the sound back into the buffer source.
       * @param  {Sound} sound The sound object to work with.
       * @return {Howl}
       */
      _refreshBuffer: function(sound) {
        var self = this;
  
        // Setup the buffer source for playback.
        sound._node.bufferSource = Howler.ctx.createBufferSource();
        sound._node.bufferSource.buffer = cache[self._src];
  
        // Connect to the correct node.
        if (sound._panner) {
          sound._node.bufferSource.connect(sound._panner);
        } else {
          sound._node.bufferSource.connect(sound._node);
        }
  
        // Setup looping and playback rate.
        sound._node.bufferSource.loop = sound._loop;
        if (sound._loop) {
          sound._node.bufferSource.loopStart = sound._start || 0;
          sound._node.bufferSource.loopEnd = sound._stop || 0;
        }
        sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);
  
        return self;
      },
  
      /**
       * Prevent memory leaks by cleaning up the buffer source after playback.
       * @param  {Object} node Sound's audio node containing the buffer source.
       * @return {Howl}
       */
      _cleanBuffer: function(node) {
        var self = this;
        var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;
  
        if (Howler._scratchBuffer && node.bufferSource) {
          node.bufferSource.onended = null;
          node.bufferSource.disconnect(0);
          if (isIOS) {
            try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}
          }
        }
        node.bufferSource = null;
  
        return self;
      },
  
      /**
       * Set the source to a 0-second silence to stop any downloading (except in IE).
       * @param  {Object} node Audio node to clear.
       */
      _clearSound: function(node) {
        var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
        if (!checkIE) {
          node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
        }
      }
    };
  
    /** Single Sound Methods **/
    /***************************************************************************/
  
    /**
     * Setup the sound object, which each node attached to a Howl group is contained in.
     * @param {Object} howl The Howl parent group.
     */
    var Sound = function(howl) {
      this._parent = howl;
      this.init();
    };
    Sound.prototype = {
      /**
       * Initialize a new Sound object.
       * @return {Sound}
       */
      init: function() {
        var self = this;
        var parent = self._parent;
  
        // Setup the default parameters.
        self._muted = parent._muted;
        self._loop = parent._loop;
        self._volume = parent._volume;
        self._rate = parent._rate;
        self._seek = 0;
        self._paused = true;
        self._ended = true;
        self._sprite = '__default';
  
        // Generate a unique ID for this sound.
        self._id = ++Howler._counter;
  
        // Add itself to the parent's pool.
        parent._sounds.push(self);
  
        // Create the new node.
        self.create();
  
        return self;
      },
  
      /**
       * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
       * @return {Sound}
       */
      create: function() {
        var self = this;
        var parent = self._parent;
        var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;
  
        if (parent._webAudio) {
          // Create the gain node for controlling volume (the source will connect to this).
          self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
          self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
          self._node.paused = true;
          self._node.connect(Howler.masterGain);
        } else {
          // Get an unlocked Audio object from the pool.
          self._node = Howler._obtainHtml5Audio();
  
          // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
          self._errorFn = self._errorListener.bind(self);
          self._node.addEventListener('error', self._errorFn, false);
  
          // Listen for 'canplaythrough' event to let us know the sound is ready.
          self._loadFn = self._loadListener.bind(self);
          self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);
  
          // Setup the new audio node.
          self._node.src = parent._src;
          self._node.preload = 'auto';
          self._node.volume = volume * Howler.volume();
  
          // Begin loading the source.
          self._node.load();
        }
  
        return self;
      },
  
      /**
       * Reset the parameters of this sound to the original state (for recycle).
       * @return {Sound}
       */
      reset: function() {
        var self = this;
        var parent = self._parent;
  
        // Reset all of the parameters of this sound.
        self._muted = parent._muted;
        self._loop = parent._loop;
        self._volume = parent._volume;
        self._rate = parent._rate;
        self._seek = 0;
        self._rateSeek = 0;
        self._paused = true;
        self._ended = true;
        self._sprite = '__default';
  
        // Generate a new ID so that it isn't confused with the previous sound.
        self._id = ++Howler._counter;
  
        return self;
      },
  
      /**
       * HTML5 Audio error listener callback.
       */
      _errorListener: function() {
        var self = this;
  
        // Fire an error event and pass back the code.
        self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);
  
        // Clear the event listener.
        self._node.removeEventListener('error', self._errorFn, false);
      },
  
      /**
       * HTML5 Audio canplaythrough listener callback.
       */
      _loadListener: function() {
        var self = this;
        var parent = self._parent;
  
        // Round up the duration to account for the lower precision in HTML5 Audio.
        parent._duration = Math.ceil(self._node.duration * 10) / 10;
  
        // Setup a sprite if none is defined.
        if (Object.keys(parent._sprite).length === 0) {
          parent._sprite = {__default: [0, parent._duration * 1000]};
        }
  
        if (parent._state !== 'loaded') {
          parent._state = 'loaded';
          parent._emit('load');
          parent._loadQueue();
        }
  
        // Clear the event listener.
        self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
      }
    };
  
    /** Helper Methods **/
    /***************************************************************************/
  
    var cache = {};
  
    /**
     * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
     * @param  {Howl} self
     */
    var loadBuffer = function(self) {
      var url = self._src;
  
      // Check if the buffer has already been cached and use it instead.
      if (cache[url]) {
        // Set the duration from the cache.
        self._duration = cache[url].duration;
  
        // Load the sound into this Howl.
        loadSound(self);
  
        return;
      }
  
      if (/^data:[^;]+;base64,/.test(url)) {
        // Decode the base64 data URI without XHR, since some browsers don't support it.
        var data = atob(url.split(',')[1]);
        var dataView = new Uint8Array(data.length);
        for (var i=0; i<data.length; ++i) {
          dataView[i] = data.charCodeAt(i);
        }
  
        decodeAudioData(dataView.buffer, self);
      } else {
        // Load the buffer from the URL.
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.withCredentials = self._xhrWithCredentials;
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          // Make sure we get a successful response back.
          var code = (xhr.status + '')[0];
          if (code !== '0' && code !== '2' && code !== '3') {
            self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
            return;
          }
  
          decodeAudioData(xhr.response, self);
        };
        xhr.onerror = function() {
          // If there is an error, switch to HTML5 Audio.
          if (self._webAudio) {
            self._html5 = true;
            self._webAudio = false;
            self._sounds = [];
            delete cache[url];
            self.load();
          }
        };
        safeXhrSend(xhr);
      }
    };
  
    /**
     * Send the XHR request wrapped in a try/catch.
     * @param  {Object} xhr XHR to send.
     */
    var safeXhrSend = function(xhr) {
      try {
        xhr.send();
      } catch (e) {
        xhr.onerror();
      }
    };
  
    /**
     * Decode audio data from an array buffer.
     * @param  {ArrayBuffer} arraybuffer The audio data.
     * @param  {Howl}        self
     */
    var decodeAudioData = function(arraybuffer, self) {
      // Fire a load error if something broke.
      var error = function() {
        self._emit('loaderror', null, 'Decoding audio data failed.');
      };
  
      // Load the sound on success.
      var success = function(buffer) {
        if (buffer && self._sounds.length > 0) {
          cache[self._src] = buffer;
          loadSound(self, buffer);
        } else {
          error();
        }
      };
  
      // Decode the buffer into an audio source.
      if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {
        Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
      } else {
        Howler.ctx.decodeAudioData(arraybuffer, success, error);
      }
    }
  
    /**
     * Sound is now loaded, so finish setting everything up and fire the loaded event.
     * @param  {Howl} self
     * @param  {Object} buffer The decoded buffer sound source.
     */
    var loadSound = function(self, buffer) {
      // Set the duration.
      if (buffer && !self._duration) {
        self._duration = buffer.duration;
      }
  
      // Setup a sprite if none is defined.
      if (Object.keys(self._sprite).length === 0) {
        self._sprite = {__default: [0, self._duration * 1000]};
      }
  
      // Fire the loaded event.
      if (self._state !== 'loaded') {
        self._state = 'loaded';
        self._emit('load');
        self._loadQueue();
      }
    };
  
    /**
     * Setup the audio context when available, or switch to HTML5 Audio mode.
     */
    var setupAudioContext = function() {
      // If we have already detected that Web Audio isn't supported, don't run this step again.
      if (!Howler.usingWebAudio) {
        return;
      }
  
      // Check if we are using Web Audio and setup the AudioContext if we are.
      try {
        if (typeof AudioContext !== 'undefined') {
          Howler.ctx = new AudioContext();
        } else if (typeof webkitAudioContext !== 'undefined') {
          Howler.ctx = new webkitAudioContext();
        } else {
          Howler.usingWebAudio = false;
        }
      } catch(e) {
        Howler.usingWebAudio = false;
      }
  
      // If the audio context creation still failed, set using web audio to false.
      if (!Howler.ctx) {
        Howler.usingWebAudio = false;
      }
  
      // Check if a webview is being used on iOS8 or earlier (rather than the browser).
      // If it is, disable Web Audio as it causes crashing.
      var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
      var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var version = appVersion ? parseInt(appVersion[1], 10) : null;
      if (iOS && version && version < 9) {
        var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
        if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {
          Howler.usingWebAudio = false;
        }
      }
  
      // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
      if (Howler.usingWebAudio) {
        Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
        Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);
        Howler.masterGain.connect(Howler.ctx.destination);
      }
  
      // Re-run the setup on Howler.
      Howler._setup();
    };
  
    // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
    if (typeof define === 'function' && define.amd) {
      define([], function() {
        return {
          Howler: Howler,
          Howl: Howl
        };
      });
    }
  
    // Add support for CommonJS libraries such as browserify.
    if (typeof exports !== 'undefined') {
      exports.Howler = Howler;
      exports.Howl = Howl;
    }
  
    // Define globally in case AMD is not available or unused.
    if (typeof window !== 'undefined') {
      window.HowlerGlobal = HowlerGlobal;
      window.Howler = Howler;
      window.Howl = Howl;
      window.Sound = Sound;
    } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).
      global.HowlerGlobal = HowlerGlobal;
      global.Howler = Howler;
      global.Howl = Howl;
      global.Sound = Sound;
    }
  })();
  
  
  /*!
   *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
   *  
   *  howler.js v2.1.2
   *  howlerjs.com
   *
   *  (c) 2013-2019, James Simpson of GoldFire Studios
   *  goldfirestudios.com
   *
   *  MIT License
   */
  
  (function() {
  
    'use strict';
  
    // Setup default properties.
    HowlerGlobal.prototype._pos = [0, 0, 0];
    HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
  
    /** Global Methods **/
    /***************************************************************************/
  
    /**
     * Helper method to update the stereo panning position of all current Howls.
     * Future Howls will not use this value unless explicitly set.
     * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
     * @return {Howler/Number}     Self or current stereo panning value.
     */
    HowlerGlobal.prototype.stereo = function(pan) {
      var self = this;
  
      // Stop right here if not using Web Audio.
      if (!self.ctx || !self.ctx.listener) {
        return self;
      }
  
      // Loop through all Howls and update their stereo panning.
      for (var i=self._howls.length-1; i>=0; i--) {
        self._howls[i].stereo(pan);
      }
  
      return self;
    };
  
    /**
     * Get/set the position of the listener in 3D cartesian space. Sounds using
     * 3D position will be relative to the listener's position.
     * @param  {Number} x The x-position of the listener.
     * @param  {Number} y The y-position of the listener.
     * @param  {Number} z The z-position of the listener.
     * @return {Howler/Array}   Self or current listener position.
     */
    HowlerGlobal.prototype.pos = function(x, y, z) {
      var self = this;
  
      // Stop right here if not using Web Audio.
      if (!self.ctx || !self.ctx.listener) {
        return self;
      }
  
      // Set the defaults for optional 'y' & 'z'.
      y = (typeof y !== 'number') ? self._pos[1] : y;
      z = (typeof z !== 'number') ? self._pos[2] : z;
  
      if (typeof x === 'number') {
        self._pos = [x, y, z];
  
        if (typeof self.ctx.listener.positionX !== 'undefined') {
          self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);
          self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);
          self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);
        } else {
          self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
        }
      } else {
        return self._pos;
      }
  
      return self;
    };
  
    /**
     * Get/set the direction the listener is pointing in the 3D cartesian space.
     * A front and up vector must be provided. The front is the direction the
     * face of the listener is pointing, and up is the direction the top of the
     * listener is pointing. Thus, these values are expected to be at right angles
     * from each other.
     * @param  {Number} x   The x-orientation of the listener.
     * @param  {Number} y   The y-orientation of the listener.
     * @param  {Number} z   The z-orientation of the listener.
     * @param  {Number} xUp The x-orientation of the top of the listener.
     * @param  {Number} yUp The y-orientation of the top of the listener.
     * @param  {Number} zUp The z-orientation of the top of the listener.
     * @return {Howler/Array}     Returns self or the current orientation vectors.
     */
    HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
      var self = this;
  
      // Stop right here if not using Web Audio.
      if (!self.ctx || !self.ctx.listener) {
        return self;
      }
  
      // Set the defaults for optional 'y' & 'z'.
      var or = self._orientation;
      y = (typeof y !== 'number') ? or[1] : y;
      z = (typeof z !== 'number') ? or[2] : z;
      xUp = (typeof xUp !== 'number') ? or[3] : xUp;
      yUp = (typeof yUp !== 'number') ? or[4] : yUp;
      zUp = (typeof zUp !== 'number') ? or[5] : zUp;
  
      if (typeof x === 'number') {
        self._orientation = [x, y, z, xUp, yUp, zUp];
  
        if (typeof self.ctx.listener.forwardX !== 'undefined') {
          self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
          self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
          self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
          self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
          self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
          self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
        } else {
          self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
        }
      } else {
        return or;
      }
  
      return self;
    };
  
    /** Group Methods **/
    /***************************************************************************/
  
    /**
     * Add new properties to the core init.
     * @param  {Function} _super Core init method.
     * @return {Howl}
     */
    Howl.prototype.init = (function(_super) {
      return function(o) {
        var self = this;
  
        // Setup user-defined default properties.
        self._orientation = o.orientation || [1, 0, 0];
        self._stereo = o.stereo || null;
        self._pos = o.pos || null;
        self._pannerAttr = {
          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
        };
  
        // Setup event listeners.
        self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
        self._onpos = o.onpos ? [{fn: o.onpos}] : [];
        self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];
  
        // Complete initilization with howler.js core's init function.
        return _super.call(this, o);
      };
    })(Howl.prototype.init);
  
    /**
     * Get/set the stereo panning of the audio source for this sound or all in the group.
     * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
     * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
     * @return {Howl/Number}    Returns self or the current stereo panning value.
     */
    Howl.prototype.stereo = function(pan, id) {
      var self = this;
  
      // Stop right here if not using Web Audio.
      if (!self._webAudio) {
        return self;
      }
  
      // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'stereo',
          action: function() {
            self.stereo(pan, id);
          }
        });
  
        return self;
      }
  
      // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
      var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';
  
      // Setup the group's stereo panning if no ID is passed.
      if (typeof id === 'undefined') {
        // Return the group's stereo panning if no parameters are passed.
        if (typeof pan === 'number') {
          self._stereo = pan;
          self._pos = [pan, 0, 0];
        } else {
          return self._stereo;
        }
      }
  
      // Change the streo panning of one or all sounds in group.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);
  
        if (sound) {
          if (typeof pan === 'number') {
            sound._stereo = pan;
            sound._pos = [pan, 0, 0];
  
            if (sound._node) {
              // If we are falling back, make sure the panningModel is equalpower.
              sound._pannerAttr.panningModel = 'equalpower';
  
              // Check if there is a panner setup and create a new one if not.
              if (!sound._panner || !sound._panner.pan) {
                setupPanner(sound, pannerType);
              }
  
              if (pannerType === 'spatial') {
                if (typeof sound._panner.positionX !== 'undefined') {
                  sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
                  sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
                  sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
                } else {
                  sound._panner.setPosition(pan, 0, 0);
                }
              } else {
                sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
              }
            }
  
            self._emit('stereo', sound._id);
          } else {
            return sound._stereo;
          }
        }
      }
  
      return self;
    };
  
    /**
     * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
     * @param  {Number} x  The x-position of the audio source.
     * @param  {Number} y  The y-position of the audio source.
     * @param  {Number} z  The z-position of the audio source.
     * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
     * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
     */
    Howl.prototype.pos = function(x, y, z, id) {
      var self = this;
  
      // Stop right here if not using Web Audio.
      if (!self._webAudio) {
        return self;
      }
  
      // If the sound hasn't loaded, add it to the load queue to change position when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'pos',
          action: function() {
            self.pos(x, y, z, id);
          }
        });
  
        return self;
      }
  
      // Set the defaults for optional 'y' & 'z'.
      y = (typeof y !== 'number') ? 0 : y;
      z = (typeof z !== 'number') ? -0.5 : z;
  
      // Setup the group's spatial position if no ID is passed.
      if (typeof id === 'undefined') {
        // Return the group's spatial position if no parameters are passed.
        if (typeof x === 'number') {
          self._pos = [x, y, z];
        } else {
          return self._pos;
        }
      }
  
      // Change the spatial position of one or all sounds in group.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);
  
        if (sound) {
          if (typeof x === 'number') {
            sound._pos = [x, y, z];
  
            if (sound._node) {
              // Check if there is a panner setup and create a new one if not.
              if (!sound._panner || sound._panner.pan) {
                setupPanner(sound, 'spatial');
              }
  
              if (typeof sound._panner.positionX !== 'undefined') {
                sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
                sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
                sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
              } else {
                sound._panner.setPosition(x, y, z);
              }
            }
  
            self._emit('pos', sound._id);
          } else {
            return sound._pos;
          }
        }
      }
  
      return self;
    };
  
    /**
     * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
     * space. Depending on how direction the sound is, based on the `cone` attributes,
     * a sound pointing away from the listener can be quiet or silent.
     * @param  {Number} x  The x-orientation of the source.
     * @param  {Number} y  The y-orientation of the source.
     * @param  {Number} z  The z-orientation of the source.
     * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
     * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
     */
    Howl.prototype.orientation = function(x, y, z, id) {
      var self = this;
  
      // Stop right here if not using Web Audio.
      if (!self._webAudio) {
        return self;
      }
  
      // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
      if (self._state !== 'loaded') {
        self._queue.push({
          event: 'orientation',
          action: function() {
            self.orientation(x, y, z, id);
          }
        });
  
        return self;
      }
  
      // Set the defaults for optional 'y' & 'z'.
      y = (typeof y !== 'number') ? self._orientation[1] : y;
      z = (typeof z !== 'number') ? self._orientation[2] : z;
  
      // Setup the group's spatial orientation if no ID is passed.
      if (typeof id === 'undefined') {
        // Return the group's spatial orientation if no parameters are passed.
        if (typeof x === 'number') {
          self._orientation = [x, y, z];
        } else {
          return self._orientation;
        }
      }
  
      // Change the spatial orientation of one or all sounds in group.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);
  
        if (sound) {
          if (typeof x === 'number') {
            sound._orientation = [x, y, z];
  
            if (sound._node) {
              // Check if there is a panner setup and create a new one if not.
              if (!sound._panner) {
                // Make sure we have a position to setup the node with.
                if (!sound._pos) {
                  sound._pos = self._pos || [0, 0, -0.5];
                }
  
                setupPanner(sound, 'spatial');
              }
  
              if (typeof sound._panner.orientationX !== 'undefined') {
                sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
                sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
                sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
              } else {
                sound._panner.setOrientation(x, y, z);
              }
            }
  
            self._emit('orientation', sound._id);
          } else {
            return sound._orientation;
          }
        }
      }
  
      return self;
    };
  
    /**
     * Get/set the panner node's attributes for a sound or group of sounds.
     * This method can optionall take 0, 1 or 2 arguments.
     *   pannerAttr() -> Returns the group's values.
     *   pannerAttr(id) -> Returns the sound id's values.
     *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
     *   pannerAttr(o, id) -> Set's the values of passed sound id.
     *
     *   Attributes:
     *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
     *                      inside of which there will be no volume reduction.
     *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
     *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
     *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
     *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
     *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
     *                     listener. Can be `linear`, `inverse` or `exponential.
     *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
     *                   will not be reduced any further.
     *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
     *                   This is simply a variable of the distance model and has a different effect depending on which model
     *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
     *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
     *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
     *                     with `inverse` and `exponential`.
     *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
     *                     Can be `HRTF` or `equalpower`.
     *
     * @return {Howl/Object} Returns self or current panner attributes.
     */
    Howl.prototype.pannerAttr = function() {
      var self = this;
      var args = arguments;
      var o, id, sound;
  
      // Stop right here if not using Web Audio.
      if (!self._webAudio) {
        return self;
      }
  
      // Determine the values based on arguments.
      if (args.length === 0) {
        // Return the group's panner attribute values.
        return self._pannerAttr;
      } else if (args.length === 1) {
        if (typeof args[0] === 'object') {
          o = args[0];
  
          // Set the grou's panner attribute values.
          if (typeof id === 'undefined') {
            if (!o.pannerAttr) {
              o.pannerAttr = {
                coneInnerAngle: o.coneInnerAngle,
                coneOuterAngle: o.coneOuterAngle,
                coneOuterGain: o.coneOuterGain,
                distanceModel: o.distanceModel,
                maxDistance: o.maxDistance,
                refDistance: o.refDistance,
                rolloffFactor: o.rolloffFactor,
                panningModel: o.panningModel
              };
            }
  
            self._pannerAttr = {
              coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
              coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
              coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
              distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
              maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
              refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
              rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
              panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
            };
          }
        } else {
          // Return this sound's panner attribute values.
          sound = self._soundById(parseInt(args[0], 10));
          return sound ? sound._pannerAttr : self._pannerAttr;
        }
      } else if (args.length === 2) {
        o = args[0];
        id = parseInt(args[1], 10);
      }
  
      // Update the values of the specified sounds.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        sound = self._soundById(ids[i]);
  
        if (sound) {
          // Merge the new values into the sound.
          var pa = sound._pannerAttr;
          pa = {
            coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
            coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
            coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
            distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
            maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
            refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
            rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
            panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
          };
  
          // Update the panner values or create a new panner if none exists.
          var panner = sound._panner;
          if (panner) {
            panner.coneInnerAngle = pa.coneInnerAngle;
            panner.coneOuterAngle = pa.coneOuterAngle;
            panner.coneOuterGain = pa.coneOuterGain;
            panner.distanceModel = pa.distanceModel;
            panner.maxDistance = pa.maxDistance;
            panner.refDistance = pa.refDistance;
            panner.rolloffFactor = pa.rolloffFactor;
            panner.panningModel = pa.panningModel;
          } else {
            // Make sure we have a position to setup the node with.
            if (!sound._pos) {
              sound._pos = self._pos || [0, 0, -0.5];
            }
  
            // Create a new panner node.
            setupPanner(sound, 'spatial');
          }
        }
      }
  
      return self;
    };
  
    /** Single Sound Methods **/
    /***************************************************************************/
  
    /**
     * Add new properties to the core Sound init.
     * @param  {Function} _super Core Sound init method.
     * @return {Sound}
     */
    Sound.prototype.init = (function(_super) {
      return function() {
        var self = this;
        var parent = self._parent;
  
        // Setup user-defined default properties.
        self._orientation = parent._orientation;
        self._stereo = parent._stereo;
        self._pos = parent._pos;
        self._pannerAttr = parent._pannerAttr;
  
        // Complete initilization with howler.js core Sound's init function.
        _super.call(this);
  
        // If a stereo or position was specified, set it up.
        if (self._stereo) {
          parent.stereo(self._stereo);
        } else if (self._pos) {
          parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
        }
      };
    })(Sound.prototype.init);
  
    /**
     * Override the Sound.reset method to clean up properties from the spatial plugin.
     * @param  {Function} _super Sound reset method.
     * @return {Sound}
     */
    Sound.prototype.reset = (function(_super) {
      return function() {
        var self = this;
        var parent = self._parent;
  
        // Reset all spatial plugin properties on this sound.
        self._orientation = parent._orientation;
        self._stereo = parent._stereo;
        self._pos = parent._pos;
        self._pannerAttr = parent._pannerAttr;
  
        // If a stereo or position was specified, set it up.
        if (self._stereo) {
          parent.stereo(self._stereo);
        } else if (self._pos) {
          parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
        } else if (self._panner) {
          // Disconnect the panner.
          self._panner.disconnect(0);
          self._panner = undefined;
          parent._refreshBuffer(self);
        }
  
        // Complete resetting of the sound.
        return _super.call(this);
      };
    })(Sound.prototype.reset);
  
    /** Helper Methods **/
    /***************************************************************************/
  
    /**
     * Create a new panner node and save it on the sound.
     * @param  {Sound} sound Specific sound to setup panning on.
     * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
     */
    var setupPanner = function(sound, type) {
      type = type || 'spatial';
  
      // Create the new panner node.
      if (type === 'spatial') {
        sound._panner = Howler.ctx.createPanner();
        sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
        sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
        sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
        sound._panner.distanceModel = sound._pannerAttr.distanceModel;
        sound._panner.maxDistance = sound._pannerAttr.maxDistance;
        sound._panner.refDistance = sound._pannerAttr.refDistance;
        sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
        sound._panner.panningModel = sound._pannerAttr.panningModel;
  
        if (typeof sound._panner.positionX !== 'undefined') {
          sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
          sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
          sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
        } else {
          sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
        }
  
        if (typeof sound._panner.orientationX !== 'undefined') {
          sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
          sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
          sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
        } else {
          sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
        }
      } else {
        sound._panner = Howler.ctx.createStereoPanner();
        sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
      }
  
      sound._panner.connect(sound._node);
  
      // Update the connections.
      if (!sound._paused) {
        sound._parent.pause(sound._id, true).play(sound._id, true);
      }
    };
  })();

    var obj = {};

    obj.hi = true;

    _sound = false;

    obj.load = function(url, subs) {

        // url = "https://ipv4-c003-ema001-talktalk-isp.1.oca.nflxvideo.net/?o=AQNK5aUcQzwky0G-cCjpu23rkKTA0K9lptsU81EkCSV6qrDhn-3Sh4QyYK5PXlGVG_52p1BugXAKGk3_-Ds8f7mNo_Pp8CT5RpbIveKmlfrG4YehehkXBLPsw_U3fKwQPIMx7Wk-QVsPCrkfBnxRvcc&v=5&e=1567045690&t=4JWYotpi40rtGFsI2q3wLyHZ95A"
        // subs = subMan.subtitles;

        // checkTypes(arguments, "string,array");

        var sprite = function() {

            let returnObj = {};

            for(let sub of subs) {
                returnObj[`${sub.id}`] = [sub.begin, sub.end-sub.begin];
            }

            return returnObj;
        }();

        obj.sound = new Howl({
            html5: true,
            src: [url],
            sprite
          });
    }

    



/*
    ;var source = audioCtx.createBufferSource();
    var dest = audioCtx.createMediaStreamDestination();
    var mediaRecorder = new MediaRecorder(dest.stream);

    var request = new XMLHttpRequest();
    request.open('GET', 'your.ogg', true);
    request.responseType = 'arraybuffer';

    request.onload = function() {
    var audioData = request.response;
    audioCtx.decodeAudioData(
        audioData,
        function(buffer) {
        source.buffer = buffer;
        source.connect(dest);
        mediaRecorder.start();
        source.start(audioCtx.currentTime, 3);
        // etc...
        },
        function(e){ 
        console.log("Error with decoding audio data" + e.err);
        }
    );

    }

    request.send();
*/
    return obj;
}

var Test = function(lln) {

    var obj = {};

    var keycodes = {
        A: 65, // 'a' key
        LEFT: 37, // left arrow
        S: 83, // 's'
        DOWN: 40, // down arrow
        D: 68, // 'd'
        RIGHT: 39, // right arrow
        W: 87, // 'w'
        UP: 38, // up arrow
        SPACE: 32, // space bar
        E: 69, // e
        R: 82, // 'r':
        F: 70, // 'f':
        Q: 81, // 'q':
        ONE: 49, // '1'
        TWO: 50 // '2'
}

    function click(element) {
        $(element).trigger('click');
    }

    function key(key) {
        jQuery.event.trigger({ type: 'keydown', which: keycodes[key] });
    }

    function timeout(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }


    var testList = [
        
        ['click', '.lln-toggle-bottom-view', 'Toggle bottom panel', 1000],
        ['click', '.lln-toggle-bottom-view', 'Toggle bottom panel', 1000],
        ['click', '.lln-toggle-vertical-view', 'Toggle side panel', 1000],
        ['click', '.lln-toggle-vertical-view', 'Toggle side panel', 1000],
        // playback logic
        ['console', 'Testing PLAYBACK LOGIC', 1000],
        ['key', 'D', 'Next sub button', 2000],
        ['key', 'D', 'Next sub button', 2000],
        ['key', 'D', 'Next sub button', 2000],
        ['key', 'A', 'Prev sub button', 2000],
        ['key', 'A', 'Prev sub button', 2000],
        ['key', 'A', 'Prev sub button', 2000],
        ['key', 'S', 'Repeat sub button', 2000],
        ['key', 'S', 'Repeat sub button', 2000],
        ['key', 'S', 'Repeat sub button', 2000],
        // changing subtitles
        /*
        ['click', '', 'Clicking Play button' 1000],
        ['click', '', 'Clicking Play button' 1000],
        ['click', '', 'Clicking Play button' 1000],
        ['click', '', 'Clicking Play button' 1000],
        */
        // mt and ht
        ['click', '.lln-options-btn', 'Open settings', 1000],
        ['click', '#showMT', 'Toggle MT', 1000],
        ['click', '#lln-options-save-btn', 'Close settings', 5000],

        ['click', '.lln-options-btn', 'Open settings', 1000],
        ['click', '#showHT', 'Toggle MT', 1000],
        ['click', '#lln-options-save-btn', 'Close settings', 5000],
        
        // login test
        // saving words
        // open close panels
        // change translation language
        // hide translation
        // playback speed
        // dict
        // (change movie)


    ]

    obj.test = async function() {

        for(testItem of testList) {

            switch(testItem[0]) {

                case 'console':
                    lln.ui.flashMessage(testItem[1], 500);
                    // console.log(testItem[1]);
                    await timeout(testItem[2]);
                    break;

                case 'click':
                    click(testItem[1]);
                    lln.ui.flashMessage(testItem[2], 500);
                    // console.log(testItem[2]);
                    await timeout(testItem[3]);
                    break;

                case 'key':
                    key(testItem[1]);
                    lln.ui.flashMessage(testItem[2], 500);
                    // console.log(testItem[2]);
                    await timeout(testItem[3]);
                    break;
            }
        }
        
    }

    return obj;

}

BottomPanel = function(lln) {

    var obj = {};

    ////////// Module API

    // Functions:

    obj.setBlurTranslationsFlag;
    obj.redrawBottomPanel;
    obj.resetStickyBottomPanelHeight;

    ////////// End of Module API

    var _blurTranslationsFlag = true; // God, awful name.

    obj.setBlurTranslationsFlag = function() { _blurTranslationsFlag = true; }

    $(document).on("LLN_subStepIndexChanged", function() {

        _blurTranslationsFlag = true;
        obj.redrawBottomPanel();
    });

    // Click to unblur
    $(document).on('click', '.lln-whole-title-translation', function(e) {
        e.preventDefault();
        _blurTranslationsFlag = false;
        obj.redrawBottomPanel();
    });

    // Pause on mouse hover
    let pausedOnHover = false;
    
    $(document).on('mouseenter', '#lln-subs', function() {
        if (lln.setMan.getPauseOnSubsHover() && !lln.vidMan.getPaused()) {
            lln.vidMan.pause();
            pausedOnHover = true;
        }
    });

    $(document).on('mouseleave', '#lln-subs', function() {
        if (lln.setMan.getPauseOnSubsHover() && pausedOnHover) {
            lln.vidMan.play();
            pausedOnHover = false;
        }
    });

    var _llnHeightLines = false;

    function setLinesAndFontSizeClassesOnBodyElement() {
        let lines = 1;
        if (lln.setMan.getTransliterations() !== 'ORIG' && lln.subMan.subLangCode_G === 'ja') {
            // Transliterations will show
            lines += 1;
        }
        if (lln.setMan.getShowHT() && lln.subMan.hTranslationsAvailable && lln.setMan.getShowMT() && lln.subMan.mTranslationsAvailable) {
            // HT and MT both will show
            lines += 1;
        }

        // set the right height class
        if(lines !== _llnHeightLines) {
            $('body').removeClass('lln-height-1');
            $('body').removeClass('lln-height-2');
            $('body').removeClass('lln-height-3');
            $('body').addClass('lln-height-' + lines);
        }

        // increase translation and source font size for some languages
        const languagesWithBiggerFont = ['ar', 'ja', 'zh-TW', 'zh-CN', 'fa', 'ur'];

        if (languagesWithBiggerFont.includes(lln.setMan.getTranslationLanguageCode())){
            $('body').addClass('lln-bigger-translation-font');
        } else {
            $('body').removeClass('lln-bigger-translation-font');
        }

        if (languagesWithBiggerFont.includes(lln.subMan.subLangCode_G)){
            $('body').addClass('lln-bigger-source-font');
        } else {
            $('body').removeClass('lln-bigger-source-font');
        }
    }

    function get_primarySub_HTML(index) {
            
        // Transit mode
        if(index < 0) {
            throw "No valid sub for negative index!"
        }
        // We are in a sub

        return lln.pureText.subToHtml(
            'subs',
            lln.subMan.subtitles[index].text, 
            lln.subMan.subLangCode_G, 
            false, 
            lln.setMan.getVocabSize(), 
            lln.savedItems.isSubtitleSaved(index), 
            true, 
            '', 
            ((lln.subMan.subtitlesNLP || {})[index])
        );
    }

    function get_mTranslation_HTML(index) {
        
        // Transit mode
        if(index < 0) {
            throw "No valid sub for negative index!"
        }
        // We are in a sub
        if(index in lln.subMan.mTranslations) { 
            // if we have a machine translation ready..

            let returnValue = lln.subMan.mTranslations[index];
            if (lln.pure.isRTL(lln.setMan.getTranslationLanguageCode())) {
                returnValue = '&rlm;' + returnValue + '&rlm;';
            }

            return returnValue;
        }
        else { 
            // We got no translation
            return `<span class="lln-sub-message">${lln_i18n.loadingTranslations}</span>`;
        }
    }

    function get_hTranslation_HTML(index) {
        
        // Transit mode
        if(index < 0) {
            throw "No valid sub for negative index!"
        }
        // We are in a sub

        if(index in lln.subMan.hTranslations) { // if a translation is available
            
            // hTranslation = lln.subMan.hTranslations[index];

            let returnValue = "";

            // underline relevant part
            for(let alignInfo of lln.subMan.extraAlignInfo[index]) {

                // console.log(lln.subMan.extraAlignInfo[index]);

                // let multipart = lln.subMan.extraAlignInfo[index].length > 1;
                let hasMultipart = lln.subMan.extraAlignInfo[index].filter(alignInf => alignInf[2] > 1).length > 0;

                let origTranslationSub = lln.subMan.hTranslationsRaw[alignInfo[0]].text;
                // console.log('OTS ', origTranslationSub)
                let partNumber = alignInfo[1];
                let noOfParts = alignInfo[2];

                if(noOfParts === 1) {
                    if(hasMultipart) {
                        returnValue += `<span class="lln-human-sub-highlight">${origTranslationSub}</span>`;
                    }
                    else {
                        returnValue += origTranslationSub;
                    }
                    // fixme:
                    returnValue += ' ';
                    continue;
                }

                // fixme:

                // WARNING: JS is a sloppy dick language.
                // -- string.length --
                // This property returns the number of code units in the string.
                // UTF-16, the string format used by JavaScript, uses a single 16-bit code
                // unit to represent the most common characters, but needs to use two
                // code units for less commonly-used characters, so it's possible for
                // the value returned by length to not match the actual number of
                // characters in the string.

                let fraction = 1/noOfParts;
                let charsToUnderline = Math.floor(fraction*origTranslationSub.length);
                let startChar = Math.floor(fraction*origTranslationSub.length*partNumber);
                
                let pre = "";
                let underlined = "";
                let post = "";

                if(partNumber === 0) {
                    // underline beginning part of sub
                    underlined = origTranslationSub.slice(0,charsToUnderline);
                    post = origTranslationSub.slice(charsToUnderline,);
                }
                else if(partNumber === (noOfParts-1)) {
                    // underline end part of sub
                    pre = origTranslationSub.slice(0,startChar);
                    underlined = origTranslationSub.slice(startChar,);
                }
                else {
                    // underline some middle part
                    pre = origTranslationSub.slice(0,startChar);
                    underlined = origTranslationSub.slice(startChar,startChar+charsToUnderline);
                    post = origTranslationSub.slice(startChar+charsToUnderline,);
                }

                let styleclass;

                if(partNumber === 0) {
                    // underline beginning part of sub
                    styleclass = `lln-human-sub-highlight-start`;
                }
                else if(partNumber === (noOfParts-1)) {
                    // underline end part of sub
                    styleclass = `lln-human-sub-highlight-end`;
                }
                else {
                    // underline some middle part
                    styleclass = `lln-human-sub-highlight-middle`;
                }

                // console.log('pre ', pre)
                // console.log('underlined ', underlined)
                // console.log('post ', post)

                returnValue += 
                `<span class="lln-human-sub-highlight-pre">` + pre + "</span>"
                + `<span class="${styleclass}">` + underlined + '</span>'
                + `<span class="lln-human-sub-highlight-post">` + post + "</span>";

                // fixme:
                returnValue += ' ';

            }

            // console.log(returnValue);
            
            if (lln.pure.isRTL(lln.setMan.getTranslationLanguageCode())) {
                returnValue = '&rlm;' + returnValue + '&rlm;';
            }

            return returnValue;
        }
        else { // We got no htranslation
            return "-"; // no human translation for this sub
        }

    }

    // fixme: add blur back
    function generateLSC(type, index, message) {

        var isBox; // Output is used for YT scrolling view
        var isMessage; // Output is for 'subs not loaded' etc message
        var isMessageGrey;
        var hasDataIndex; // Adds the sub number to some div
        var smallMargins; // YT scrolling view needs this
        var showTranslations;
        var showMT;
        var showHT;

        var primarySub_HTML;
        var mTranslation_HTML;
        var hTranslation_HTML;

        if(type === "message") {
            checkTypes(arguments, "string,false,string");
            isBox = false;
            isMessage = true;
            isMessageGrey = false;
            hasDataIndex = false;
            smallMargins = false;
            showTranslations = false;
            showMT = false;
            showHT = false;
            primarySub_HTML = message;
        }
        else if(type === "grey_message") {
            checkTypes(arguments, "string,false,string");
            isBox = false;
            isMessage = true;
            isMessageGrey = true;
            hasDataIndex = false;
            smallMargins = false;
            showTranslations = false;
            showMT = false;
            showHT = false;
            primarySub_HTML = message;
        }
        else if(type === "regular") {
            checkTypes(arguments, "string,number");
            isBox = false;
            isMessage = false;
            isMessageGrey = false;
            hasDataIndex = true;
            smallMargins = false;
            showTranslations = true;
            mTranslation_HTML = get_mTranslation_HTML(index);
            hTranslation_HTML = get_hTranslation_HTML(index);
            showMT = !!mTranslation_HTML;
            showHT = !!hTranslation_HTML;
            primarySub_HTML = get_primarySub_HTML(index);
        }
        else if(type === "box") {
            checkTypes(arguments, "string,number");
            isBox = true;
            isMessage = false;
            isMessageGrey = false;
            hasDataIndex = true;
            smallMargins = true;
            showTranslations = true;
            mTranslation_HTML = get_mTranslation_HTML(index);
            hTranslation_HTML = get_hTranslation_HTML(index);
            showMT = !!mTranslation_HTML;
            showHT = !!hTranslation_HTML;
            primarySub_HTML = get_primarySub_HTML(index);
        }
        else {
            util.fuck(`generateLMS(): bad type: ${type}`);
        }

        var mtShouldShow = lln.subMan.mTranslationsAvailable && lln.setMan.getShowMT();

        var htShouldShow = lln.subMan.hTranslationsAvailable && lln.setMan.getShowHT();

        var actuallyBlurTranslations = _blurTranslationsFlag && lln.setMan.getBlurTranslations();

        var blurTranslationsTooltip_HTML = `
            <span class="lln-hover-tooltip lln-info-btn">
                <span class="svg-span svg-info-tooltip"></span>
                <span class="tt">
                    Hide translations setting enabled. Click or press [e] to reveal translation.
                </span>
            </span>
        `;

        function IF(test, onTrue, onFalse) {
            if(onFalse === undefined) { onFalse = ''; }
            return (test ? onTrue : onFalse);
        }

        return `
            ${ IF( isBox, `<div id='lln-moving-sub-box-${index}' style="position: absolute;">` )}
                <div class="lln-subs-wrap ${ IF( isMessageGrey, 'subs-inactive' )}" ${ IF(smallMargins, `style="padding: 1px;"`) }>
                    <div class="lln-subs-font-adjust">
                        <div class="lln-subs" ${ IF( smallMargins, `style="padding: 0px;"` )} id="lln-subs">
                            <div class='lln-subs' ${ IF( hasDataIndex, `data-index=${ index.toString() }` )}>
                                ${ IF( isMessage, `<span class="lln-sub-message">` )}
                                    ${ primarySub_HTML }
                                ${ IF( isMessage, '</span>') }
                            </div>
                        </div>
                        ${ IF(showTranslations,
                            `<div id="lln-translations">
                                ${ IF(mtShouldShow || htShouldShow, 
                                    `<div class="lln-subs-separator"></div>`
                                )}
                    
                                ${ IF(mtShouldShow,
                                    `<div class="lln-whole-title-translation-wrap">
                                        <div class="lln-whole-title-translation">
                                            <span style="${ IF( actuallyBlurTranslations, `filter: blur(0.25em)` )}">
                                                ${ mTranslation_HTML }
                                            </span>
                                            ${ IF(actuallyBlurTranslations, blurTranslationsTooltip_HTML )}
                                        </div>
                                    </div>`
                                )}
                    
                                ${ IF(mtShouldShow && htShouldShow,
                                    `<div class="lln-subs-separator"></div>`
                                )}
                    
                                ${ IF(htShouldShow,
                                    `<div class="lln-whole-title-translation-wrap">
                                        <div class="lln-whole-title-translation">
                                            <span style="${ IF(actuallyBlurTranslations, `filter: blur(0.25em)` )}">
                                                ${ hTranslation_HTML }
                                            </span>
                                            ${ IF( actuallyBlurTranslations, blurTranslationsTooltip_HTML )}
                                        </div>
                                    </div>`
                                )}
                            </div>`
                        )}
                    </div>
                </div>
            ${ IF(isBox, `</div>` )}
        `;
    }

    // Used for ASR captions
    let _onScreenCaptions = {};

    let _subMode = false;
    const MESSAGE = 'message';
    const ASR = 'asr';
    const NON_ASR = 'non_asr';

    // This is only called when an update is required
    obj.redrawBottomPanel = function() {

        setLinesAndFontSizeClassesOnBodyElement();
        updateMainSubsContainerPosition();

        let LSC_DIV = document.getElementById('lln-subs-content');

        ///// Handle some simple cases

        // fixme: for testing youtube:
        if(!LSC_DIV) { return; }

        // Note: noSubsAvailable_error is only defined in YT subman.
        // fixme: i18n
        if(lln.subMan.noSubsAvailable_error) {
            LSC_DIV.innerHTML = generateLSC("message", false, `No Subs For This Video!`);
            _subMode = MESSAGE;
            return;
        }
        else if(lln.subMan.subLoad_error) {
            LSC_DIV.innerHTML = generateLSC("message", false, lln_i18n.pleaseSelectSubtitles);
            _subMode = MESSAGE;
            return;
        }
        // No subLoad_error but no subs yet
        else if (lln.subMan.loadingMainSubs) {
            LSC_DIV.innerHTML = generateLSC("message", false, lln_i18n.loadingSubtitles);
            _subMode = MESSAGE;
            return;
        }

        // No errors

        ///// Figure out display mode: TRANSIT / FIRST_SUB_NOT_REACHED / REGULAR

        const index = lln.playMan.getSubStepIndex();
        const lastStarted = lln.subMan.getLastStartedSubtitleIndex( lln.vidMan.getTime() );

        // [{text: "123", begin: XXX, end: XXX}]

        // Disable ASR mode for now
        // if(!lln.subMan.data.isFromASR) {
        if(true) {

            if(_subMode !== NON_ASR) {
                // clear any existing stuff
                LSC_DIV.innerHTML = '';
                _subMode = NON_ASR;
            }

            // Regular, non-ASR mode

            let displayMode = false;
            // possible modes:
            const TRANSIT = 'transit'; // between
            const FIRST_SUB_NOT_REACHED = 'first_sub_not_reached';
            const REGULAR = 'regular'; 
            
            // Determine displayMode
            {
                if( index === -1 && lastStarted === -1 ) {
                    displayMode = FIRST_SUB_NOT_REACHED;
                }
                else if(index === -1) {
                    displayMode = TRANSIT;
                }
                else {
                    displayMode = REGULAR;
                }
            }

            ///// Insert primary subtitle into lln-subs

            if( displayMode === FIRST_SUB_NOT_REACHED ) {
                LSC_DIV.innerHTML = generateLSC("grey_message", false, lln_i18n.firstSubtitleNotReached);
            }
            else if( displayMode === TRANSIT ) {
                LSC_DIV.innerHTML = generateLSC("grey_message", false, "");
            }
            else if( displayMode === REGULAR ) {

                // logic tweak..
                if(!lln.setMan.getBlurTranslations()) { _blurTranslationsFlag = false; }

                LSC_DIV.innerHTML = generateLSC("regular", index);

/*
                if (!$(lln_subs_DIV).hasClass('contextMenuOverride')) {
                    $(lln_subs_DIV).addClass('contextMenuOverride');
                    
                    // add right click handler
                    $(lln_subs_DIV).on('contextmenu', '.lln-word', function(e){
                        let $this = $(this);
                        let action = lln.setMan.getOnRightClick();

                        if (action === 'speakWord' || action === 'showDictSpeak') {
                            // play word
                            lln.pure.speak(lln.ui.getElTextWithoutChildren($this), $this.attr('data-word-key').split('|')[2]);
                        }
                        if (action === 'showDictSpeak' || action === 'showDict') {
                            lln.dict.showDict($this);
                        }
                        if (action === 'saveWord') {
                            lln.savedItems.saveWordElement($this);
                        }
                        if (action === 'doNothing') {
                            // do nothing - let context menu show
                            return true;
                        } else {
                            return false;
                        }
                    });
                }
*/
            }

            /*
            if (displayMode === REGULAR) {
                $('.lln-subs-separator').addClass('active');
            } else {
                $('.lln-subs-separator').removeClass('active');
            }
            */

        } // Non-ASR Mode
        else {

            // ASR Mode
            if(_subMode !== ASR) {
                // clear any existing stuff
                LSC_DIV.innerHTML = '';
                _subMode = ASR;
            }

            let newOnScreenCaptions = {};

            let i;

            // construct new newOnScreenCaptions
            for(i = 0; i < lln.subMan.subtitles.length; i++) {
                // For each sub in video..
                const thisSub = lln.subMan.subtitles[i];
                // Should this be in the DOM?
                // +- 120s should be in DOM
                if(thisSub.begin < (_animatedPlayerTime+12000) && thisSub.end > (_animatedPlayerTime-12000)) {
                    
                    // Yes it should
                    // Is it already in the DOM?
                    if(!_onScreenCaptions[i]) {

                        // No it's not, let's add it.
                        newOnScreenCaptions[i] = {};
                        newOnScreenCaptions[i].div = $( generateLSC("box",i) ).appendTo(LSC_DIV);
                        newOnScreenCaptions[i].width = newOnScreenCaptions[i].div.width();
                        newOnScreenCaptions[i].text = lln.subMan.subtitles[i].text;
                        // newly created:
                        newOnScreenCaptions[i].div.css("transform", `translateX(${-1000}px)`);
                        newOnScreenCaptions[i].x = false;

                        // fixme: add onclick handlers here
                    }
                    else {

                        // Yes it is.
                        // Just copy the reference over
                        newOnScreenCaptions[i] = _onScreenCaptions[i];

                        delete _onScreenCaptions[i];
                    }
                }
            }

            console.log(newOnScreenCaptions);

            ///// Clean up unneeded DIVS
            for(let key of Object.keys(_onScreenCaptions)) {

                // fixme: remove handlers

                _onScreenCaptions[key].div.remove();

                delete _onScreenCaptions[key];
            }

            _onScreenCaptions = newOnScreenCaptions;

            // place middle caption
            let middlePoint_px = $(LSC_DIV).width()/2;
            console.log('middlePoint_px ', middlePoint_px);

            if(index === -1) {

                return;

                // transit mode
                // middle caption is actually a space

                console.log('running for transit mode');

                // first go right
                let thisIndex = lastStarted + 1;
                let xStartOffset = 0;

                while(newOnScreenCaptions[thisIndex]) {
                    thisCaption = newOnScreenCaptions[thisIndex];
                    thisCaption.div.css("transform", `translateX(${middlePoint_px+xStartOffset}px)`);
                    thisCaption.x = middlePoint_px+xStartOffset;
                    xStartOffset += thisCaption.width;
                    thisIndex += 1;
                }

                // then go left
                thisIndex = lastStarted;
                xStartOffset = 0;

                while(newOnScreenCaptions[thisIndex]) {
                    thisCaption = newOnScreenCaptions[thisIndex];
                    xStartOffset -= newOnScreenCaptions[thisIndex].width;
                    thisCaption.div.css("transform", `translateX(${middlePoint_px+xStartOffset}px)`);
                    thisCaption.x = middlePoint_px+xStartOffset;
                    thisIndex -= 1;
                }
            }
            else {
                // middle caption is caption

                console.log('running for sub mode');

                setPosition = function(caption, position) {
                    if(caption.new === undefined) caption.new = true;
                    else if(caption.new === true) {
                        caption.new = false;
                        caption.div.css("transition", `transform 0.3s ease-in-out`);
                    }
                    
                    caption.div.css("transform", `translateX(${middlePoint_px+xStartOffset}px)`);
                    caption.x = middlePoint_px+xStartOffset;
                }

                // start center, go right

                // set id
                let thisIndex = index;
                // set starting offset
                let xStartOffset = (-1) * (newOnScreenCaptions[thisIndex].width/2);
                // set position
                setPosition(newOnScreenCaptions[thisIndex], middlePoint_px+xStartOffset);
                // add width
                xStartOffset += newOnScreenCaptions[thisIndex].width;
                // set id
                thisIndex += 1;

                while(newOnScreenCaptions[thisIndex]) {
                    // set position
                    setPosition(newOnScreenCaptions[thisIndex], middlePoint_px + xStartOffset);
                    // add width
                    xStartOffset += newOnScreenCaptions[thisIndex].width;
                    // set id
                    thisIndex += 1;
                }

                // then go left

                // set id
                thisIndex = lastStarted;
                // set offset
                xStartOffset = (-1) * (newOnScreenCaptions[thisIndex].width/2);
                // set position
                setPosition(newOnScreenCaptions[thisIndex], middlePoint_px+xStartOffset);

                // set id
                thisIndex -= 1;

                while(newOnScreenCaptions[thisIndex]) {
                    // set offset
                    xStartOffset -= newOnScreenCaptions[thisIndex].width;
                    // set position
                    setPosition(newOnScreenCaptions[thisIndex], middlePoint_px+xStartOffset);
                    // set id
                    thisIndex -= 1;
                }
            }
        }

        if (!window.__IS_YOUTUBE) {
            adjustBottomPanelHeight();
        }
    };

    let _stickyBottomPanelHeight = 0;
    let _stickyBottomPanelHeightTimeChanged = 0;
    
    obj.resetStickyBottomPanelHeight = function() {
        _stickyBottomPanelHeight = 0;
    };

    function adjustBottomPanelHeight() { // fixme: netflix only
        // if bottom panel content too high, resize bottom panel

        const $akira = $('.sizing-wrapper .AkiraPlayer'); // height: calc(100vh - 170px);
        const $layout = $('div.PlayerControlsNeo__layout'); // height: calc(100vh - 170px);
        const $vv = $('.lln-vertical-view'); // height: calc(100% - 170px);
        const $bottomPanel = $('.lln-bottom-panel'); // height: 170px;

        const $subsWrap = $('.lln-bottom-panel .lln-subs-wrap');

        // first reset heights
        $akira.css('height', '');
        $layout.css('height', '');
        $vv.css('height', '');
        $bottomPanel.css('height', '');

        // reset sticky height after 15 secs
        if (_stickyBottomPanelHeightTimeChanged < ((new Date()).getTime() - 15000)) {
            _stickyBottomPanelHeight = 0;
        }

        // check if bottom view is active
        if ($('body').hasClass('lln-bottom-view-active')) {
            // check if bottom view content too high
            let height = $subsWrap.height() + 60;
            // allow decreasing panel height after 15 secs
            if (height < _stickyBottomPanelHeight) {
                height = _stickyBottomPanelHeight;
            } else {
                _stickyBottomPanelHeight = height;
                _stickyBottomPanelHeightTimeChanged = (new Date()).getTime();
            }
            height = Math.max(height, _stickyBottomPanelHeight);

            if (height > $bottomPanel.height()) {
                $akira.css('height', `calc(100vh - ${height}px)`);
                $layout.css('height', `calc(100vh - ${height}px)`);
                $vv.css('height', `calc(100% - ${height}px)`);
                $bottomPanel.css('height', `${height}px`);
            }
        }
    }

    // for subs over video force #lln-main-subs z-index, by moving it inside videoPlayer on controls hover
    let nflxBottomControlsHovered = false;

    $(document).on('mousemove click', function(e) {

        let nflxBottomControlsHoveredNew = false;
        if ($(e.target).closest('.PlayerControlsNeo__bottom-controls').length) {
            nflxBottomControlsHoveredNew = true;
        }
        if (nflxBottomControlsHoveredNew !== nflxBottomControlsHovered) {
            nflxBottomControlsHovered = nflxBottomControlsHoveredNew;
            updateMainSubsContainerPosition();
        }
    });

    setInterval(function(){
        if(!__LLN_ACTIVE) { return; }
        // updateYoutubeFont();
        updatePlayingClass();
        updateMainSubsContainerPosition();
    }, 500);

    function updatePlayingClass(){
        let bottomPanel = document.getElementById('lln-bottom-panel');
        if (bottomPanel) bottomPanel.classList.toggle('paused', lln.vidMan.getPaused());
    }

    // move lln-bottom-panel to appropriate parent, depending on lln-bottom-view-active and nflxBottomControlsHovered
    function updateMainSubsContainerPosition() {

        // transform: translateY(170px)

        if(window.__IS_YOUTUBE && $('.html5-video-player').length) {

            let panel = document.getElementById('lln-bottom-panel');
            //let $vv = $(document.querySelector('.lln-vertical-view'));

            if (!panel) {
                $(lln.pureTemplates.bottomPanelTemplate).appendTo($('.html5-video-player'));
            }

            // if ($vv.length === 1 && $vv.parent().attr('id') !== 'related') {
            //     $vv.prependTo('#related');
            // }

            // also add auto-paused message to the video, if not present
            if (!document.getElementById('lln-auto-paused-indicator')) {
                $('#movie_player.html5-video-player').append(`
                    <div id="lln-auto-paused-indicator" style="z-index: 10;">${lln_i18n.autoPaused}<br><span>${lln_i18n.pressSpaceToContinue}</span></div>
                `)
            }
        }
        else if (window.__IS_NETFLIX) {
            let panel = document.getElementById('lln-bottom-panel');
            if (document.body.classList.contains('lln-bottom-view-active')) {
                if (!panel) {
                    $(lln.pureTemplates.bottomPanelTemplate).appendTo($('.sizing-wrapper'));
                } else if (!panel.parentElement.classList.contains('sizing-wrapper')) {
                    $(panel).appendTo($('.sizing-wrapper'));
                }
            } else {
                if (nflxBottomControlsHovered) {
                    if (!panel) {
                        $(lln.pureTemplates.bottomPanelTemplate).appendTo($('.AkiraPlayer .VideoContainer'));
                    } else if (!panel.parentElement.classList.contains('VideoContainer')) {
                        $(panel).appendTo($('.AkiraPlayer .VideoContainer'));
                    }
                } else {
                    if (!panel) {
                        $(lln.pureTemplates.bottomPanelTemplate).appendTo($('.AkiraPlayer'));
                    } else if (!panel.parentElement.classList.contains('AkiraPlayer')) {
                        $(panel).appendTo($('.AkiraPlayer'));
                    }
                }
            }
            // also add auto-paused message to the video, if not present
            if (!document.getElementById('lln-auto-paused-indicator')) {
                $('.AkiraPlayer .VideoContainer').append(`
                    <div id="lln-auto-paused-indicator">${lln_i18n.autoPaused}<br><span>${lln_i18n.pressSpaceToContinue}</span></div>
                    <div id="llnVideoMessage">1.0x</div>
                `)
            }
        }
        else {
            util.fuck("FOOK!");
        }
        $('#autoPause').prop('checked', lln.setMan.getAutoPause());
    }

    
    // todo: enable as an option later
    window.requestAnimationFrame(updateSubsView);

    let _animatedPlayerTime = 0;

    var updateCounter = 0;
    let subViewWidth = 5; // random val > 0

    obj.resizeCanvas = function () {
        var canvas = document.getElementById('lln-sub-view');
        if (canvas) {
            // console.log('trying');
            canvas.width = subViewWidth = $(canvas).parent().width();
        }
    };

    function updateSubsView() {

        window.requestAnimationFrame(updateSubsView);

        if(!__LLN_ACTIVE) { return; }

        if (updateCounter % 60 === 0) {
            obj.resizeCanvas(); // update canvas width max. every second
        }

        _animatedPlayerTime = ((isNaN(_animatedPlayerTime) ? 0 : _animatedPlayerTime) * 0.5 + lln.vidMan.getTime() * 0.5);

        updateCounter += 1;

        // Draw every two frames
        // Fixme: updateSubsView is too slow to run every frame?
        if(updateCounter % 2 === 0) { return; }

        var canvas = document.getElementById('lln-sub-view');
        if (!canvas) return;

        var ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        // Midpoint marker

        var width = parseInt(canvas.width);

        ctx.lineCap="round";

        //  37600            57600
        //  |  ------    ----|--    ------    |
        //  leftTime         curTime          rightTime
        let leftTime = _animatedPlayerTime - 10 * width;
        let rightTime = _animatedPlayerTime + 10 * width;

        // is this sub in the view?
        function inView(sub){
            if(sub.begin < rightTime && sub.end > leftTime) { return true; }
            else { return false; }
        }

        let i;

        ctx.strokeStyle = "#242424";
        let lineY = 7;
        ctx.lineWidth = 8;

        let n = 0;
        for(i = 0; i < lln.subMan.subtitles.length; i++) {
            const sub = lln.subMan.subtitles[i];
            if(inView(sub)) {
                n++;

                let begin = sub.begin;// - startSubEarlyMargin;

                let startPixel = (begin - leftTime) / 20;
                if (startPixel < 0) { startPixel = 0; }

                let end = sub.end;
                let endPixel = (end - leftTime) / 20;
                if (endPixel > width - 1) { endPixel = width - 1; }

                ctx.beginPath();
                ctx.moveTo(startPixel + 4, lineY);
                ctx.lineTo(endPixel - 4, lineY);
                ctx.stroke();
            }
        }

        // draw cursor
        if (n > 0) {
            ctx.lineWidth=1.5;
            ctx.strokeStyle="#3a3a3a";
            ctx.beginPath();
            ctx.moveTo(width / 2, 0);
            ctx.lineTo(width / 2, 14);
            ctx.stroke();
        }

    };

    $(document).on("click", '#lln-sub-view div', function(event) {
        lln.playMan.playSubtitle(parseInt(event.target.getAttribute('subid')));
    });

    
    function getYTFontSize() {

    }

    function updateYoutubeFont(){
        if(window.__IS_YOUTUBE) {
            let $subsWrap = $('.lln-subs-wrap');
            if ($subsWrap.length) {
                let relativeFontSize = Math.max($subsWrap.width() / $(document).width(), 0.53) * 1.33;
                relativeFontSize = Math.round(relativeFontSize * 1000) / 1000;
                $('.lln-subs-font-adjust').css({'font-size': relativeFontSize + 'em'});
            }
        }
    }

    return obj;
}
////////// start of closureFinish.js
////////// Wraps all the Netflix code

	}

}());

////////// end of closureFinish.js
////////// Wraps all the Netflix code